/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace MasterChefOperator {
  export type FarmAdditionStruct = {
    lpToken: PromiseOrValue<string>;
    allocationPoints: PromiseOrValue<BigNumberish>;
    rewarder: PromiseOrValue<string>;
  };

  export type FarmAdditionStructOutput = [string, BigNumber, string] & {
    lpToken: string;
    allocationPoints: BigNumber;
    rewarder: string;
  };

  export type FarmModificationStruct = {
    pid: PromiseOrValue<BigNumberish>;
    allocationPoints: PromiseOrValue<BigNumberish>;
    rewarder: PromiseOrValue<string>;
    overwriteRewarder: PromiseOrValue<boolean>;
  };

  export type FarmModificationStructOutput = [
    BigNumber,
    BigNumber,
    string,
    boolean
  ] & {
    pid: BigNumber;
    allocationPoints: BigNumber;
    rewarder: string;
    overwriteRewarder: boolean;
  };
}

export interface MasterChefOperatorInterface extends utils.Interface {
  functions: {
    "COMMIT_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "STAGE_ROLE()": FunctionFragment;
    "acceptTimelockAdmin()": FunctionFragment;
    "cancelTransaction(address,uint256,string,bytes,uint256)": FunctionFragment;
    "commitEmissionChange(uint256,uint256,uint8)": FunctionFragment;
    "commitFarmChanges(uint256,uint8)": FunctionFragment;
    "commitSetPendingTimelockAdmin(address,uint256,uint8)": FunctionFragment;
    "commitSetTreasuryAddress(address,uint256,uint8)": FunctionFragment;
    "executeTransaction(address,uint256,string,bytes,uint256)": FunctionFragment;
    "farmAdditions(uint256,uint256)": FunctionFragment;
    "farmAdditionsForEta(uint256)": FunctionFragment;
    "farmModifications(uint256,uint256)": FunctionFragment;
    "farmModificationsForEta(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "masterChef()": FunctionFragment;
    "queueTransaction(address,uint256,string,bytes,uint256)": FunctionFragment;
    "queuedFarmChangeEtas()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "stageFarmAdditions((address,uint256,address)[],uint256)": FunctionFragment;
    "stageFarmModifications((uint256,uint256,address,bool)[],uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "timelock()": FunctionFragment;
    "usedFarmChangeEtas(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "COMMIT_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "STAGE_ROLE"
      | "acceptTimelockAdmin"
      | "cancelTransaction"
      | "commitEmissionChange"
      | "commitFarmChanges"
      | "commitSetPendingTimelockAdmin"
      | "commitSetTreasuryAddress"
      | "executeTransaction"
      | "farmAdditions"
      | "farmAdditionsForEta"
      | "farmModifications"
      | "farmModificationsForEta"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "masterChef"
      | "queueTransaction"
      | "queuedFarmChangeEtas"
      | "renounceRole"
      | "revokeRole"
      | "stageFarmAdditions"
      | "stageFarmModifications"
      | "supportsInterface"
      | "timelock"
      | "usedFarmChangeEtas"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "COMMIT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAGE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptTimelockAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "commitEmissionChange",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "commitFarmChanges",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "commitSetPendingTimelockAdmin",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "commitSetTreasuryAddress",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "farmAdditions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "farmAdditionsForEta",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "farmModifications",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "farmModificationsForEta",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "masterChef",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queueTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queuedFarmChangeEtas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stageFarmAdditions",
    values: [
      MasterChefOperator.FarmAdditionStruct[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stageFarmModifications",
    values: [
      MasterChefOperator.FarmModificationStruct[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "usedFarmChangeEtas",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "COMMIT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "STAGE_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptTimelockAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitEmissionChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitFarmChanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitSetPendingTimelockAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitSetTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmAdditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmAdditionsForEta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmModifications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmModificationsForEta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "masterChef", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queueTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedFarmChangeEtas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stageFarmAdditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stageFarmModifications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usedFarmChangeEtas",
    data: BytesLike
  ): Result;

  events: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface MasterChefOperator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MasterChefOperatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    COMMIT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    STAGE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    acceptTimelockAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      eta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    commitEmissionChange(
      beetsPerBlock: PromiseOrValue<BigNumberish>,
      eta: PromiseOrValue<BigNumberish>,
      txType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    commitFarmChanges(
      eta: PromiseOrValue<BigNumberish>,
      txType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    commitSetPendingTimelockAdmin(
      admin: PromiseOrValue<string>,
      eta: PromiseOrValue<BigNumberish>,
      txType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    commitSetTreasuryAddress(
      treasury: PromiseOrValue<string>,
      eta: PromiseOrValue<BigNumberish>,
      txType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      eta: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    farmAdditions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        lpToken: string;
        allocationPoints: BigNumber;
        rewarder: string;
      }
    >;

    farmAdditionsForEta(
      eta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MasterChefOperator.FarmAdditionStructOutput[]]>;

    farmModifications(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean] & {
        pid: BigNumber;
        allocationPoints: BigNumber;
        rewarder: string;
        overwriteRewarder: boolean;
      }
    >;

    farmModificationsForEta(
      eta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MasterChefOperator.FarmModificationStructOutput[]]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    masterChef(overrides?: CallOverrides): Promise<[string]>;

    queueTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      eta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    queuedFarmChangeEtas(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stageFarmAdditions(
      farmsToAdd: MasterChefOperator.FarmAdditionStruct[],
      eta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stageFarmModifications(
      farmsToEdit: MasterChefOperator.FarmModificationStruct[],
      eta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    timelock(overrides?: CallOverrides): Promise<[string]>;

    usedFarmChangeEtas(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  COMMIT_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  STAGE_ROLE(overrides?: CallOverrides): Promise<string>;

  acceptTimelockAdmin(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelTransaction(
    target: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    eta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  commitEmissionChange(
    beetsPerBlock: PromiseOrValue<BigNumberish>,
    eta: PromiseOrValue<BigNumberish>,
    txType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  commitFarmChanges(
    eta: PromiseOrValue<BigNumberish>,
    txType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  commitSetPendingTimelockAdmin(
    admin: PromiseOrValue<string>,
    eta: PromiseOrValue<BigNumberish>,
    txType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  commitSetTreasuryAddress(
    treasury: PromiseOrValue<string>,
    eta: PromiseOrValue<BigNumberish>,
    txType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeTransaction(
    target: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    eta: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  farmAdditions(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      lpToken: string;
      allocationPoints: BigNumber;
      rewarder: string;
    }
  >;

  farmAdditionsForEta(
    eta: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MasterChefOperator.FarmAdditionStructOutput[]>;

  farmModifications(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, boolean] & {
      pid: BigNumber;
      allocationPoints: BigNumber;
      rewarder: string;
      overwriteRewarder: boolean;
    }
  >;

  farmModificationsForEta(
    eta: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MasterChefOperator.FarmModificationStructOutput[]>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  masterChef(overrides?: CallOverrides): Promise<string>;

  queueTransaction(
    target: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    eta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  queuedFarmChangeEtas(overrides?: CallOverrides): Promise<BigNumber[]>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stageFarmAdditions(
    farmsToAdd: MasterChefOperator.FarmAdditionStruct[],
    eta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stageFarmModifications(
    farmsToEdit: MasterChefOperator.FarmModificationStruct[],
    eta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  timelock(overrides?: CallOverrides): Promise<string>;

  usedFarmChangeEtas(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    COMMIT_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    STAGE_ROLE(overrides?: CallOverrides): Promise<string>;

    acceptTimelockAdmin(overrides?: CallOverrides): Promise<void>;

    cancelTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      eta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    commitEmissionChange(
      beetsPerBlock: PromiseOrValue<BigNumberish>,
      eta: PromiseOrValue<BigNumberish>,
      txType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    commitFarmChanges(
      eta: PromiseOrValue<BigNumberish>,
      txType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    commitSetPendingTimelockAdmin(
      admin: PromiseOrValue<string>,
      eta: PromiseOrValue<BigNumberish>,
      txType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    commitSetTreasuryAddress(
      treasury: PromiseOrValue<string>,
      eta: PromiseOrValue<BigNumberish>,
      txType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      eta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    farmAdditions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        lpToken: string;
        allocationPoints: BigNumber;
        rewarder: string;
      }
    >;

    farmAdditionsForEta(
      eta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MasterChefOperator.FarmAdditionStructOutput[]>;

    farmModifications(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean] & {
        pid: BigNumber;
        allocationPoints: BigNumber;
        rewarder: string;
        overwriteRewarder: boolean;
      }
    >;

    farmModificationsForEta(
      eta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MasterChefOperator.FarmModificationStructOutput[]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    masterChef(overrides?: CallOverrides): Promise<string>;

    queueTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      eta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    queuedFarmChangeEtas(overrides?: CallOverrides): Promise<BigNumber[]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stageFarmAdditions(
      farmsToAdd: MasterChefOperator.FarmAdditionStruct[],
      eta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stageFarmModifications(
      farmsToEdit: MasterChefOperator.FarmModificationStruct[],
      eta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    timelock(overrides?: CallOverrides): Promise<string>;

    usedFarmChangeEtas(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    COMMIT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    STAGE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptTimelockAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      eta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    commitEmissionChange(
      beetsPerBlock: PromiseOrValue<BigNumberish>,
      eta: PromiseOrValue<BigNumberish>,
      txType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    commitFarmChanges(
      eta: PromiseOrValue<BigNumberish>,
      txType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    commitSetPendingTimelockAdmin(
      admin: PromiseOrValue<string>,
      eta: PromiseOrValue<BigNumberish>,
      txType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    commitSetTreasuryAddress(
      treasury: PromiseOrValue<string>,
      eta: PromiseOrValue<BigNumberish>,
      txType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      eta: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    farmAdditions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    farmAdditionsForEta(
      eta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    farmModifications(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    farmModificationsForEta(
      eta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterChef(overrides?: CallOverrides): Promise<BigNumber>;

    queueTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      eta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    queuedFarmChangeEtas(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stageFarmAdditions(
      farmsToAdd: MasterChefOperator.FarmAdditionStruct[],
      eta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stageFarmModifications(
      farmsToEdit: MasterChefOperator.FarmModificationStruct[],
      eta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    usedFarmChangeEtas(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COMMIT_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    STAGE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptTimelockAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      eta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    commitEmissionChange(
      beetsPerBlock: PromiseOrValue<BigNumberish>,
      eta: PromiseOrValue<BigNumberish>,
      txType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    commitFarmChanges(
      eta: PromiseOrValue<BigNumberish>,
      txType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    commitSetPendingTimelockAdmin(
      admin: PromiseOrValue<string>,
      eta: PromiseOrValue<BigNumberish>,
      txType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    commitSetTreasuryAddress(
      treasury: PromiseOrValue<string>,
      eta: PromiseOrValue<BigNumberish>,
      txType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      eta: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    farmAdditions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    farmAdditionsForEta(
      eta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    farmModifications(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    farmModificationsForEta(
      eta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterChef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queueTransaction(
      target: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      eta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    queuedFarmChangeEtas(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stageFarmAdditions(
      farmsToAdd: MasterChefOperator.FarmAdditionStruct[],
      eta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stageFarmModifications(
      farmsToEdit: MasterChefOperator.FarmModificationStruct[],
      eta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usedFarmChangeEtas(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
