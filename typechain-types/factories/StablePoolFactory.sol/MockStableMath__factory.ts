/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MockStableMath,
  MockStableMathInterface,
} from "../../StablePoolFactory.sol/MockStableMath";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amp",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amountsOut",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "bptInForExactTokensOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amp",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "lastInvariant",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "protocolSwapFeePercentage",
        type: "uint256",
      },
    ],
    name: "calculateDueTokenProtocolSwapFeeAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amp",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "tokenIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptAmountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "exactBPTInForTokenOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "bptAmountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
    ],
    name: "exactBPTInForTokensOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amp",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amountsIn",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "exactTokensInForBPTOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amp",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "tokenIndexIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenIndexOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenAmountOut",
        type: "uint256",
      },
    ],
    name: "inGivenOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amp",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "bool",
        name: "roundUp",
        type: "bool",
      },
    ],
    name: "invariant",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amp",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "tokenIndexIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenIndexOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenAmountIn",
        type: "uint256",
      },
    ],
    name: "outGivenIn",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amp",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "tokenIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptAmountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "tokenInForExactBPTOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611446806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80639cd91d3f116100665780639cd91d3f14610107578063a89d42591461011a578063cf1b8c8c1461012d578063db7ad3f214610140578063fe2dd7ba1461015357610093565b80631c855fa61461009857806332fec905146100c1578063405de978146100e15780636fc82f29146100f4575b600080fd5b6100ab6100a63660046111d6565b610166565b6040516100b891906113c3565b60405180910390f35b6100d46100cf36600461129e565b61017d565b6040516100b89190611407565b6100d46100ef36600461135b565b61018a565b6100d4610102366004611222565b6101a5565b6100d46101153660046112fb565b6101c0565b6100d4610128366004611222565b6101cf565b6100d461013b36600461135b565b6101de565b6100d461014e3660046112fb565b6101ee565b6100d46101613660046112fb565b6101fd565b606061017384848461020c565b90505b9392505050565b60006101738484846102be565b600061019a87878787878761045a565b979650505050505050565b60006101b4868686868661058c565b90505b95945050505050565b60006101b48686868686610850565b60006101b486868686866108fe565b600061019a878787878787610b7a565b60006101b48686868686610c41565b60006101b48686868686610caf565b6060600061021a8484610d41565b90506000855167ffffffffffffffff8111801561023657600080fd5b50604051908082528060200260200182016040528015610260578160200160208202803683370190505b50905060005b86518110156102b4576102958388838151811061027f57fe5b6020026020010151610d9490919063ffffffff16565b8282815181106102a157fe5b6020908102919091010152600101610266565b5095945050505050565b81516000908190815b818110156102ff576102f58682815181106102de57fe5b602002602001015184610dca90919063ffffffff16565b92506001016102c7565b508161031057600092505050610176565b600082878302825b60ff811015610442576000858a60008151811061033157fe5b60200260200101510290506000600190505b868110156103855761037b61037461036e848e858151811061036157fe5b6020026020010151610ddc565b89610ddc565b868c610df6565b9150600101610343565b508394506103f86103c76103ae6103a561039f878c610ddc565b85610ddc565b6103e88d610df6565b6103c16103bb8a89610ddc565b88610ddc565b90610dca565b6103f26103e56103db6103e8880386610ddc565b6103e88e15610df6565b6103c18a60010189610ddc565b8b610df6565b9350848411156104205760018585031161041b5783975050505050505050610176565b610439565b6001848603116104395783975050505050505050610176565b50600101610318565b5061044e610142610e16565b50505050509392505050565b600080610469888860016102be565b9050600061048b826104858761047f818b610dca565b90610e69565b90610eb7565b9050600061049b8a8a848b610ef3565b905060006104c58a8a815181106104ae57fe5b6020026020010151836110a990919063ffffffff16565b90506000805b8b51811015610504576104fa8c82815181106104e357fe5b602002602001015183610dca90919063ffffffff16565b91506001016104cb565b50600061052d828d8d8151811061051757fe5b6020026020010151610d4190919063ffffffff16565b9050600061053a826110bf565b905060006105488583610eb7565b9050600061055686836110a9565b905061057761057083670de0b6b3a76400008e9003610e69565b8290610dca565b99505050505050505050509695505050505050565b600080805b86518110156105b3576105a98782815181106104e357fe5b9150600101610591565b506000855167ffffffffffffffff811180156105ce57600080fd5b506040519080825280602002602001820160405280156105f8578160200160208202803683370190505b5090506000805b88518110156106af57600061061a858b848151811061051757fe5b90506106728a838151811061062b57fe5b602002602001015161066c8b858151811061064257fe5b60200260200101518d868151811061065657fe5b6020026020010151610dca90919063ffffffff16565b90610d41565b84838151811061067e57fe5b6020026020010181815250506106a461069d8286858151811061027f57fe5b8490610dca565b9250506001016105ff565b506000885167ffffffffffffffff811180156106ca57600080fd5b506040519080825280602002602001820160405280156106f4578160200160208202803683370190505b50905060005b89518110156107de5760008385838151811061071257fe5b6020026020010151111561079757600061074361073786670de0b6b3a76400006110a9565b8d858151811061027f57fe5b9050600061076d828d868151811061075757fe5b60200260200101516110a990919063ffffffff16565b905061078e61078782670de0b6b3a76400008d9003610d94565b8390610dca565b925050506107ae565b8982815181106107a357fe5b602002602001015190505b6107be818c848151811061065657fe5b8383815181106107ca57fe5b6020908102919091010152506001016106fa565b5060006107ed8b8b60016102be565b905060006107fd8c8460006102be565b9050600061080b8284610d41565b9050670de0b6b3a7640000811115610840576108328a670de0b6b3a763ffff198301610d94565b9750505050505050506101b7565b60009750505050505050506101b7565b60008061085f878760016102be565b90506108718387868151811061075757fe5b86858151811061087d57fe5b602002602001018181525050600061089788888489610ef3565b9050838786815181106108a657fe5b6020026020010151018786815181106108bb57fe5b6020026020010181815250506108f260016103c18989815181106108db57fe5b6020026020010151846110a990919063ffffffff16565b98975050505050505050565b600080805b86518110156109255761091b8782815181106104e357fe5b9150600101610903565b506000855167ffffffffffffffff8111801561094057600080fd5b5060405190808252806020026020018201604052801561096a578160200160208202803683370190505b5090506000805b8851811015610a2a5760006109a2858b848151811061098c57fe5b6020026020010151610e6990919063ffffffff16565b90506109de8a83815181106109b357fe5b602002602001015161047f8b85815181106109ca57fe5b60200260200101518d868151811061075757fe5b8483815181106109ea57fe5b602002602001018181525050610a1f61069d82868581518110610a0957fe5b6020026020010151610eb790919063ffffffff16565b925050600101610971565b506000885167ffffffffffffffff81118015610a4557600080fd5b50604051908082528060200260200182016040528015610a6f578160200160208202803683370190505b50905060005b8951811015610b27576000848281518110610a8c57fe5b6020026020010151841115610ae0576000610aa9610737866110bf565b90506000610abd828d868151811061075757fe5b9050610ad761078782670de0b6b3a76400008d9003610e69565b92505050610af7565b898281518110610aec57fe5b602002602001015190505b610b07818c848151811061075757fe5b838381518110610b1357fe5b602090810291909101015250600101610a75565b506000610b368b8b60016102be565b90506000610b468c8460006102be565b90506000610b548284610d41565b9050610b69610b62826110bf565b8b90610eb7565b9d9c50505050505050505050505050565b600080610b89888860016102be565b90506000610b9f826104858761047f818b6110a9565b90506000610baf8a8a848b610ef3565b90506000610bc3828b8b8151811061075757fe5b90506000805b8b51811015610beb57610be18c82815181106104e357fe5b9150600101610bc9565b506000610bfe828d8d8151811061051757fe5b90506000610c0b826110bf565b90506000610c198583610eb7565b90506000610c2786836110a9565b905061057761057083670de0b6b3a76400008e9003610d94565b600080610c5087878787610ef3565b905080868581518110610c5f57fe5b602002602001015111610c765760009150506101b7565b600081878681518110610c8557fe5b60200260200101510390506108f2670de0b6b3a764000061066c8684610d9490919063ffffffff16565b600080610cbe878760016102be565b9050610cd08387878151811061065657fe5b868681518110610cdc57fe5b6020026020010181815250506000610cf688888488610ef3565b905083878781518110610d0557fe5b602002602001015103878781518110610d1a57fe5b6020026020010181815250506108f26001610d3b838a898151811061075757fe5b906110a9565b6000610d5082151560046110e5565b82610d5d57506000610d8e565b670de0b6b3a764000083810290610d8090858381610d7757fe5b041460056110e5565b828181610d8957fe5b049150505b92915050565b6000828202610db8841580610db1575083858381610dae57fe5b04145b60036110e5565b670de0b6b3a764000090049392505050565b600082820161017684821015836110e5565b6000828202610176841580610db1575083858381610dae57fe5b600081610e0c57610e0784846110f7565b610173565b6101738484611117565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6000610e7882151560046110e5565b82610e8557506000610d8e565b670de0b6b3a764000083810290610e9f90858381610d7757fe5b826001820381610eab57fe5b04600101915050610d8e565b6000828202610ed1841580610db1575083858381610dae57fe5b80610ee0576000915050610d8e565b670de0b6b3a76400006000198201610eab565b600080845186029050600085600081518110610f0b57fe5b602002602001015190506000865187600081518110610f2657fe5b60200260200101510290506000600190505b8751811015610f7f57610f64610f5e610f57848b858151811061036157fe5b8a51610ddc565b886110f7565b9150610f758882815181106102de57fe5b9250600101610f38565b50868581518110610f8c57fe5b6020026020010151820391506000610fa48788610ddc565b90506000610fd5610fc9610fc184610fbc8988610ddc565b611117565b6103e8610ddc565b8a898151811061036157fe5b90506000610ff0610fe9610fc18b896110f7565b8690610dca565b905060008061100c6110028686610dca565b610fbc8d86610dca565b905060005b60ff81101561108c5781925061104161102e866103c18586610ddc565b610fbc8e610d3b886103c1886002610ddc565b91508282111561106a57600183830311611065575097506110a19650505050505050565b611084565b600182840311611084575097506110a19650505050505050565b600101611011565b50611098610142610e16565b50505050505050505b949350505050565b60006110b98383111560016110e5565b50900390565b6000670de0b6b3a764000082106110d7576000610d8e565b50670de0b6b3a76400000390565b816110f3576110f381610e16565b5050565b600061110682151560046110e5565b81838161110f57fe5b049392505050565b600061112682151560046110e5565b8261113357506000610d8e565b81600184038161113f57fe5b046001019050610d8e565b600082601f83011261115a578081fd5b8135602067ffffffffffffffff8083111561117157fe5b8183026040518382820101818110848211171561118a57fe5b604052848152838101925086840182880185018910156111a8578687fd5b8692505b858310156111ca5780358452928401926001929092019184016111ac565b50979650505050505050565b6000806000606084860312156111ea578283fd5b833567ffffffffffffffff811115611200578384fd5b61120c8682870161114a565b9660208601359650604090950135949350505050565b600080600080600060a08688031215611239578081fd5b85359450602086013567ffffffffffffffff80821115611257578283fd5b61126389838a0161114a565b95506040880135915080821115611278578283fd5b506112858882890161114a565b9598949750949560608101359550608001359392505050565b6000806000606084860312156112b2578283fd5b83359250602084013567ffffffffffffffff8111156112cf578283fd5b6112db8682870161114a565b925050604084013580151581146112f0578182fd5b809150509250925092565b600080600080600060a08688031215611312578081fd5b85359450602086013567ffffffffffffffff81111561132f578182fd5b61133b8882890161114a565b959895975050505060408401359360608101359360809091013592509050565b60008060008060008060c08789031215611373578081fd5b86359550602087013567ffffffffffffffff811115611390578182fd5b61139c89828a0161114a565b96999698505050506040850135946060810135946080820135945060a09091013592509050565b6020808252825182820181905260009190848201906040850190845b818110156113fb578351835292840192918401916001016113df565b50909695505050505050565b9081526020019056fea26469706673582212204c23ab0d8de1a05bccc24a2652e7fa95c664a428f3d48fb38988dbdb3386bd7f64736f6c63430007060033";

type MockStableMathConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockStableMathConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockStableMath__factory extends ContractFactory {
  constructor(...args: MockStableMathConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockStableMath> {
    return super.deploy(overrides || {}) as Promise<MockStableMath>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockStableMath {
    return super.attach(address) as MockStableMath;
  }
  override connect(signer: Signer): MockStableMath__factory {
    return super.connect(signer) as MockStableMath__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockStableMathInterface {
    return new utils.Interface(_abi) as MockStableMathInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockStableMath {
    return new Contract(address, _abi, signerOrProvider) as MockStableMath;
  }
}
