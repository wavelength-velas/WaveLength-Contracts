/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MockStableMathInterface extends utils.Interface {
  functions: {
    "bptInForExactTokensOut(uint256,uint256[],uint256[],uint256,uint256)": FunctionFragment;
    "calculateDueTokenProtocolSwapFeeAmount(uint256,uint256[],uint256,uint256,uint256)": FunctionFragment;
    "exactBPTInForTokenOut(uint256,uint256[],uint256,uint256,uint256,uint256)": FunctionFragment;
    "exactBPTInForTokensOut(uint256[],uint256,uint256)": FunctionFragment;
    "exactTokensInForBPTOut(uint256,uint256[],uint256[],uint256,uint256)": FunctionFragment;
    "inGivenOut(uint256,uint256[],uint256,uint256,uint256)": FunctionFragment;
    "invariant(uint256,uint256[],bool)": FunctionFragment;
    "outGivenIn(uint256,uint256[],uint256,uint256,uint256)": FunctionFragment;
    "tokenInForExactBPTOut(uint256,uint256[],uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bptInForExactTokensOut"
      | "calculateDueTokenProtocolSwapFeeAmount"
      | "exactBPTInForTokenOut"
      | "exactBPTInForTokensOut"
      | "exactTokensInForBPTOut"
      | "inGivenOut"
      | "invariant"
      | "outGivenIn"
      | "tokenInForExactBPTOut"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bptInForExactTokensOut",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDueTokenProtocolSwapFeeAmount",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exactBPTInForTokenOut",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exactBPTInForTokensOut",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exactTokensInForBPTOut",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "inGivenOut",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "invariant",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "outGivenIn",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenInForExactBPTOut",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "bptInForExactTokensOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateDueTokenProtocolSwapFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactBPTInForTokenOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactBPTInForTokensOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactTokensInForBPTOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "inGivenOut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invariant", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "outGivenIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenInForExactBPTOut",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockStableMath extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockStableMathInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bptInForExactTokensOut(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      amountsOut: PromiseOrValue<BigNumberish>[],
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateDueTokenProtocolSwapFeeAmount(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      lastInvariant: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    exactBPTInForTokenOut(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      tokenIndex: PromiseOrValue<BigNumberish>,
      bptAmountIn: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    exactBPTInForTokensOut(
      balances: PromiseOrValue<BigNumberish>[],
      bptAmountIn: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    exactTokensInForBPTOut(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      amountsIn: PromiseOrValue<BigNumberish>[],
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    inGivenOut(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      tokenIndexIn: PromiseOrValue<BigNumberish>,
      tokenIndexOut: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    invariant(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      roundUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    outGivenIn(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      tokenIndexIn: PromiseOrValue<BigNumberish>,
      tokenIndexOut: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenInForExactBPTOut(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      tokenIndex: PromiseOrValue<BigNumberish>,
      bptAmountOut: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  bptInForExactTokensOut(
    amp: PromiseOrValue<BigNumberish>,
    balances: PromiseOrValue<BigNumberish>[],
    amountsOut: PromiseOrValue<BigNumberish>[],
    bptTotalSupply: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateDueTokenProtocolSwapFeeAmount(
    amp: PromiseOrValue<BigNumberish>,
    balances: PromiseOrValue<BigNumberish>[],
    lastInvariant: PromiseOrValue<BigNumberish>,
    tokenIndex: PromiseOrValue<BigNumberish>,
    protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exactBPTInForTokenOut(
    amp: PromiseOrValue<BigNumberish>,
    balances: PromiseOrValue<BigNumberish>[],
    tokenIndex: PromiseOrValue<BigNumberish>,
    bptAmountIn: PromiseOrValue<BigNumberish>,
    bptTotalSupply: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exactBPTInForTokensOut(
    balances: PromiseOrValue<BigNumberish>[],
    bptAmountIn: PromiseOrValue<BigNumberish>,
    bptTotalSupply: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  exactTokensInForBPTOut(
    amp: PromiseOrValue<BigNumberish>,
    balances: PromiseOrValue<BigNumberish>[],
    amountsIn: PromiseOrValue<BigNumberish>[],
    bptTotalSupply: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  inGivenOut(
    amp: PromiseOrValue<BigNumberish>,
    balances: PromiseOrValue<BigNumberish>[],
    tokenIndexIn: PromiseOrValue<BigNumberish>,
    tokenIndexOut: PromiseOrValue<BigNumberish>,
    tokenAmountOut: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  invariant(
    amp: PromiseOrValue<BigNumberish>,
    balances: PromiseOrValue<BigNumberish>[],
    roundUp: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  outGivenIn(
    amp: PromiseOrValue<BigNumberish>,
    balances: PromiseOrValue<BigNumberish>[],
    tokenIndexIn: PromiseOrValue<BigNumberish>,
    tokenIndexOut: PromiseOrValue<BigNumberish>,
    tokenAmountIn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenInForExactBPTOut(
    amp: PromiseOrValue<BigNumberish>,
    balances: PromiseOrValue<BigNumberish>[],
    tokenIndex: PromiseOrValue<BigNumberish>,
    bptAmountOut: PromiseOrValue<BigNumberish>,
    bptTotalSupply: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    bptInForExactTokensOut(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      amountsOut: PromiseOrValue<BigNumberish>[],
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateDueTokenProtocolSwapFeeAmount(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      lastInvariant: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exactBPTInForTokenOut(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      tokenIndex: PromiseOrValue<BigNumberish>,
      bptAmountIn: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exactBPTInForTokensOut(
      balances: PromiseOrValue<BigNumberish>[],
      bptAmountIn: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    exactTokensInForBPTOut(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      amountsIn: PromiseOrValue<BigNumberish>[],
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inGivenOut(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      tokenIndexIn: PromiseOrValue<BigNumberish>,
      tokenIndexOut: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invariant(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      roundUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    outGivenIn(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      tokenIndexIn: PromiseOrValue<BigNumberish>,
      tokenIndexOut: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenInForExactBPTOut(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      tokenIndex: PromiseOrValue<BigNumberish>,
      bptAmountOut: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    bptInForExactTokensOut(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      amountsOut: PromiseOrValue<BigNumberish>[],
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateDueTokenProtocolSwapFeeAmount(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      lastInvariant: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exactBPTInForTokenOut(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      tokenIndex: PromiseOrValue<BigNumberish>,
      bptAmountIn: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exactBPTInForTokensOut(
      balances: PromiseOrValue<BigNumberish>[],
      bptAmountIn: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exactTokensInForBPTOut(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      amountsIn: PromiseOrValue<BigNumberish>[],
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inGivenOut(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      tokenIndexIn: PromiseOrValue<BigNumberish>,
      tokenIndexOut: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invariant(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      roundUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    outGivenIn(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      tokenIndexIn: PromiseOrValue<BigNumberish>,
      tokenIndexOut: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenInForExactBPTOut(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      tokenIndex: PromiseOrValue<BigNumberish>,
      bptAmountOut: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bptInForExactTokensOut(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      amountsOut: PromiseOrValue<BigNumberish>[],
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateDueTokenProtocolSwapFeeAmount(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      lastInvariant: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exactBPTInForTokenOut(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      tokenIndex: PromiseOrValue<BigNumberish>,
      bptAmountIn: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exactBPTInForTokensOut(
      balances: PromiseOrValue<BigNumberish>[],
      bptAmountIn: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exactTokensInForBPTOut(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      amountsIn: PromiseOrValue<BigNumberish>[],
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inGivenOut(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      tokenIndexIn: PromiseOrValue<BigNumberish>,
      tokenIndexOut: PromiseOrValue<BigNumberish>,
      tokenAmountOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    invariant(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      roundUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    outGivenIn(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      tokenIndexIn: PromiseOrValue<BigNumberish>,
      tokenIndexOut: PromiseOrValue<BigNumberish>,
      tokenAmountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenInForExactBPTOut(
      amp: PromiseOrValue<BigNumberish>,
      balances: PromiseOrValue<BigNumberish>[],
      tokenIndex: PromiseOrValue<BigNumberish>,
      bptAmountOut: PromiseOrValue<BigNumberish>,
      bptTotalSupply: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
