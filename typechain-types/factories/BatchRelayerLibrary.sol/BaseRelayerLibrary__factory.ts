/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  BaseRelayerLibrary,
  BaseRelayerLibraryInterface,
} from "../../BatchRelayerLibrary.sol/BaseRelayerLibrary";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IVault",
        name: "vault",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approveVault",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntrypoint",
    outputs: [
      {
        internalType: "contract IBalancerRelayer",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVault",
    outputs: [
      {
        internalType: "contract IVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "relayer",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "authorisation",
        type: "bytes",
      },
    ],
    name: "setRelayerApproval",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x6101006040527fae1dc54057af8e8e5ce068cdd4383149c7efcb30e8fb95b592ee1594367fb50960e05234801561003557600080fd5b50604051610dbe380380610dbe8339810160408190526100549161013b565b806001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561008d57600080fd5b505afa1580156100a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100c5919061013b565b6001600160601b0319606091821b81166080529082901b1660a052604051819030906100f09061012e565b6100fb92919061015e565b604051809103906000f080158015610117573d6000803e3d6000fd5b5060601b6001600160601b03191660c05250610190565b6106998061072583390190565b60006020828403121561014c578081fd5b815161015781610178565b9392505050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b038116811461018d57600080fd5b50565b60805160601c60a05160601c60c05160601c60e05161055d6101c8600039508060bb52508061019752806101c752505061055d6000f3fe60806040526004361061003f5760003560e01c80637fd0e5d51461004457806380db15bd1461006f5780638d928af814610084578063b6d2473714610099575b600080fd5b34801561005057600080fd5b506100596100b9565b60405161006691906104b6565b60405180910390f35b61008261007d36600461033c565b6100dd565b005b34801561009057600080fd5b506100596101c5565b3480156100a557600080fd5b506100826100b43660046103ec565b6101e9565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b0384163014806100f2575082155b6101175760405162461bcd60e51b815260040161010e906104ca565b60405180910390fd5b600063fa6e671d60e01b33868660405160240161013693929190610479565b60408051601f19818403018152918152602080830180516001600160e01b03166001600160e01b0319909516949094179093525161017892869186910161045c565b60408051601f1981840301815291905290506101bd6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682610275565b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b816001600160a01b031663095ea7b36102006101c5565b836040518363ffffffff1660e01b815260040161021e92919061049d565b602060405180830381600087803b15801561023857600080fd5b505af115801561024c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027091906103c9565b505050565b6060600080846001600160a01b0316846040516102929190610450565b6000604051808303816000865af19150503d80600081146102cf576040519150601f19603f3d011682016040523d82523d6000602084013e6102d4565b606091505b50915091506102e382826102ee565b925050505b92915050565b606082156102fd5750806102e8565b81511561030d5781518083602001fd5b62461bcd60e51b600090815260206004908152600760245266042414c233433360cc1b6044526102e891606490fd5b60008060008060608587031215610351578384fd5b843561035c81610501565b9350602085013561036c81610519565b9250604085013567ffffffffffffffff80821115610388578384fd5b818701915087601f83011261039b578384fd5b8135818111156103a9578485fd5b8860208285010111156103ba578485fd5b95989497505060200194505050565b6000602082840312156103da578081fd5b81516103e581610519565b9392505050565b600080604083850312156103fe578182fd5b823561040981610501565b946020939093013593505050565b60008151815b81811015610437576020818501810151868301520161041d565b818111156104455782828601525b509290920192915050565b60006103e58284610417565b60006104688286610417565b838582379092019182525092915050565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0391909116815260200190565b6020808252601f908201527f52656c617965722063616e206f6e6c7920617070726f766520697473656c6600604082015260600190565b6001600160a01b038116811461051657600080fd5b50565b801515811461051657600080fdfea26469706673582212202c02fdd728b74d9c87187eb66b9fcbed1bf5247e92360e60f0a9c3be1eb9e89164736f6c6343000706003360c060405234801561001057600080fd5b5060405161069938038061069983398101604081905261002f91610052565b60016000556001600160601b0319606092831b8116608052911b1660a0526100a3565b60008060408385031215610064578182fd5b825161006f8161008b565b60208401519092506100808161008b565b809150509250929050565b6001600160a01b03811681146100a057600080fd5b50565b60805160601c60a05160601c6105c56100d46000398060ef52806101f5525080604b528061011352506105c56000f3fe6080604052600436106100385760003560e01c80637678922e1461007b5780638d928af8146100a6578063ac9650d8146100bb57610076565b3661007657610074336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102066100db565b005b600080fd5b34801561008757600080fd5b506100906100ed565b60405161009d9190610487565b60405180910390f35b3480156100b257600080fd5b50610090610111565b6100ce6100c93660046103f9565b610135565b60405161009d919061049b565b816100e9576100e981610254565b5050565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b606061013f6102a7565b8167ffffffffffffffff8111801561015657600080fd5b5060405190808252806020026020018201604052801561018a57816020015b60608152602001906001900390816101755790505b50905060005b8281101561023d5761021e8484838181106101a757fe5b90506020028101906101b99190610513565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016929150506102c0565b82828151811061022a57fe5b6020908102919091010152600101610190565b50610246610335565b61024e610349565b92915050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6102b9600260005414156101906100db565b6002600055565b6060600080846001600160a01b0316846040516102dd9190610468565b600060405180830381855af49150503d8060008114610318576040519150601f19603f3d011682016040523d82523d6000602084013e61031d565b606091505b509150915061032c8282610350565b95945050505050565b47801561034657610346338261037a565b50565b6001600055565b6060821561035f57508061024e565b81511561036f5781518083602001fd5b61024e6101ae610254565b610389814710156101a36100db565b6000826001600160a01b0316826040516103a290610484565b60006040518083038185875af1925050503d80600081146103df576040519150601f19603f3d011682016040523d82523d6000602084013e6103e4565b606091505b505090506103f4816101a46100db565b505050565b6000806020838503121561040b578182fd5b823567ffffffffffffffff80821115610422578384fd5b818501915085601f830112610435578384fd5b813581811115610443578485fd5b8660208083028501011115610456578485fd5b60209290920196919550909350505050565b6000825161047a81846020870161055f565b9190910192915050565b90565b6001600160a01b0391909116815260200190565b6000602080830181845280855180835260408601915060408482028701019250838701855b8281101561050657878503603f19018452815180518087526104e7818989018a850161055f565b601f01601f1916959095018601945092850192908501906001016104c0565b5092979650505050505050565b6000808335601e19843603018112610529578283fd5b83018035915067ffffffffffffffff821115610543578283fd5b60200191503681900382131561055857600080fd5b9250929050565b60005b8381101561057a578181015183820152602001610562565b83811115610589576000848401525b5050505056fea2646970667358221220749ee4b3d2430dd936e54333b076f8a0286c64b21f69facb4932267e0be2f20864736f6c63430007060033";

type BaseRelayerLibraryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BaseRelayerLibraryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BaseRelayerLibrary__factory extends ContractFactory {
  constructor(...args: BaseRelayerLibraryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BaseRelayerLibrary> {
    return super.deploy(vault, overrides || {}) as Promise<BaseRelayerLibrary>;
  }
  override getDeployTransaction(
    vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(vault, overrides || {});
  }
  override attach(address: string): BaseRelayerLibrary {
    return super.attach(address) as BaseRelayerLibrary;
  }
  override connect(signer: Signer): BaseRelayerLibrary__factory {
    return super.connect(signer) as BaseRelayerLibrary__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BaseRelayerLibraryInterface {
    return new utils.Interface(_abi) as BaseRelayerLibraryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BaseRelayerLibrary {
    return new Contract(address, _abi, signerOrProvider) as BaseRelayerLibrary;
  }
}
