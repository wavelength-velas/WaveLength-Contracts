/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  LidoRelayer,
  LidoRelayerInterface,
} from "../../BalancerHelpers.sol/LidoRelayer";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IVault",
        name: "vault",
        type: "address",
      },
      {
        internalType: "contract IwstETH",
        name: "wstETH",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "enum IVault.SwapKind",
        name: "kind",
        type: "uint8",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "poolId",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "assetInIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "assetOutIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "userData",
            type: "bytes",
          },
        ],
        internalType: "struct IVault.BatchSwapStep[]",
        name: "swaps",
        type: "tuple[]",
      },
      {
        internalType: "contract IAsset[]",
        name: "assets",
        type: "address[]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "bool",
            name: "fromInternalBalance",
            type: "bool",
          },
          {
            internalType: "address payable",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "bool",
            name: "toInternalBalance",
            type: "bool",
          },
        ],
        internalType: "struct IVault.FundManagement",
        name: "funds",
        type: "tuple",
      },
      {
        internalType: "int256[]",
        name: "limits",
        type: "int256[]",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "batchSwap",
    outputs: [
      {
        internalType: "int256[]",
        name: "swapAmounts",
        type: "int256[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "recipient",
        type: "address",
      },
      {
        components: [
          {
            internalType: "contract IAsset[]",
            name: "assets",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "minAmountsOut",
            type: "uint256[]",
          },
          {
            internalType: "bytes",
            name: "userData",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "toInternalBalance",
            type: "bool",
          },
        ],
        internalType: "struct IVault.ExitPoolRequest",
        name: "request",
        type: "tuple",
      },
    ],
    name: "exitPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getStETH",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVault",
    outputs: [
      {
        internalType: "contract IVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getWstETH",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "poolId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        components: [
          {
            internalType: "contract IAsset[]",
            name: "assets",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "maxAmountsIn",
            type: "uint256[]",
          },
          {
            internalType: "bytes",
            name: "userData",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "fromInternalBalance",
            type: "bool",
          },
        ],
        internalType: "struct IVault.JoinPoolRequest",
        name: "request",
        type: "tuple",
      },
    ],
    name: "joinPool",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "poolId",
            type: "bytes32",
          },
          {
            internalType: "enum IVault.SwapKind",
            name: "kind",
            type: "uint8",
          },
          {
            internalType: "contract IAsset",
            name: "assetIn",
            type: "address",
          },
          {
            internalType: "contract IAsset",
            name: "assetOut",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "userData",
            type: "bytes",
          },
        ],
        internalType: "struct IVault.SingleSwap",
        name: "singleSwap",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "bool",
            name: "fromInternalBalance",
            type: "bool",
          },
          {
            internalType: "address payable",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "bool",
            name: "toInternalBalance",
            type: "bool",
          },
        ],
        internalType: "struct IVault.FundManagement",
        name: "funds",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256",
        name: "swapAmount",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60e06040523480156200001157600080fd5b506040516200224438038062002244833981016040819052620000349162000119565b81806001600160a01b03166080816001600160a01b031660601b81525050506001600081905550806001600160a01b031663c1fe3e486040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200009757600080fd5b505af1158015620000ac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000d29190620000f3565b6001600160601b0319606091821b811660a05291901b1660c0525062000170565b60006020828403121562000105578081fd5b8151620001128162000157565b9392505050565b600080604083850312156200012c578081fd5b8251620001398162000157565b60208401519092506200014c8162000157565b809150509250929050565b6001600160a01b03811681146200016d57600080fd5b50565b60805160601c60a05160601c60c05160601c61203162000213600039806101d8528061026f528061034852806103ef52806104e752806105b152806106bc5280610758528061080252806108e352806109ac5280610ac55280610ba45280610c795280610d825280610e395280610f145280610f505280611112525080610b315280610ec95280610ef352806111b35250806087528061079a52506120316000f3fe6080604052600436106100745760003560e01c8063945bcec91161004e578063945bcec914610122578063a2f0398314610142578063b95cac2814610157578063dd5323ed1461016a576100b2565b806352bbbe29146100b75780638bdb3913146100e05780638d928af814610100576100b2565b366100b2576100b0336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461020661017f565b005b600080fd5b6100ca6100c5366004611858565b610191565b6040516100d79190611ed7565b60405180910390f35b3480156100ec57600080fd5b506100b06100fb3660046116f8565b610567565b34801561010c57600080fd5b50610115610798565b6040516100d79190611ae0565b610135610130366004611793565b6107bc565b6040516100d79190611b27565b34801561014e57600080fd5b50610115610b2f565b6100b0610165366004611762565b610b53565b34801561017657600080fd5b50610115610d80565b8161018d5761018d81610da4565b5050565b600061019b610df7565b83516001600160a01b031633146101cd5760405162461bcd60e51b81526004016101c490611db0565b60405180910390fd5b6000846040015190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686604001516001600160a01b031614156103ed573085526020850151156102395760405162461bcd60e51b81526004016101c490611d6f565b6000808760200151600181111561024c57fe5b14610257578461025d565b86608001515b90506102693382610e10565b5061029c7f0000000000000000000000000000000000000000000000000000000000000000610296610798565b83610fe1565b6102a4610798565b6001600160a01b03166352bbbe2934898989896040518663ffffffff1660e01b81526004016102d69493929190611e0f565b6020604051808303818588803b1580156102ef57600080fd5b505af1158015610303573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610328919061193b565b925060018760200151600181111561033c57fe5b14156103e7576103e7337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016103929190611ae0565b60206040518083038186803b1580156103aa57600080fd5b505afa1580156103be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e2919061193b565b6110ee565b5061054e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031686606001516001600160a01b03161415610536573060408601526060850151156104535760405162461bcd60e51b81526004016101c490611dd8565b61045b610798565b6001600160a01b03166352bbbe2934888888886040518663ffffffff1660e01b815260040161048d9493929190611e0f565b6020604051808303818588803b1580156104a657600080fd5b505af11580156104ba573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906104df919061193b565b9150610531817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016103929190611ae0565b61054e565b60405162461bcd60e51b81526004016101c490611d38565b6105566111ea565b5061055f6111fe565b949350505050565b61056f610df7565b6001600160a01b03831633146105975760405162461bcd60e51b81526004016101c490611db0565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906105e6908690600401611ae0565b60206040518083038186803b1580156105fe57600080fd5b505afa158015610612573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610636919061193b565b9050610640610798565b6001600160a01b0316638bdb3913868686866040518563ffffffff1660e01b81526004016106719493929190611bf1565b600060405180830381600087803b15801561068b57600080fd5b505af115801561069f573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691506370a08231906106f2908790600401611ae0565b60206040518083038186803b15801561070a57600080fd5b505afa15801561071e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610742919061193b565b905060006107508284611205565b905061077d857f00000000000000000000000000000000000000000000000000000000000000008361121a565b61078785826110ee565b5050506107926111fe565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60606107c6610df7565b84516001600160a01b031633146107ef5760405162461bcd60e51b81526004016101c490611db0565b60408501516000805b8881101561088d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168a8a8381811061083657fe5b905060200201602081019061084b9190611777565b6001600160a01b031614156108625780915061088d565b600019890181106108855760405162461bcd60e51b81526004016101c490611d38565b6001016107f8565b50600086868381811061089c57fe5b90506020020135905060008113156109fb573088526020880151156108d35760405162461bcd60e51b81526004016101c490611d6f565b6108dd3382610e10565b5061090a7f0000000000000000000000000000000000000000000000000000000000000000610296610798565b610912610798565b6001600160a01b031663945bcec9348f8f8f8f8f8f8f8f8f6040518b63ffffffff1660e01b815260040161094e99989796959493929190611c2d565b6000604051808303818588803b15801561096757600080fd5b505af115801561097b573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526109a4919081019061163b565b93506109f6337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016103929190611ae0565b610b0f565b306040890152606088015115610a235760405162461bcd60e51b81526004016101c490611dd8565b610a2b610798565b6001600160a01b031663945bcec9348f8f8f8f8f8f8f8f8f6040518b63ffffffff1660e01b8152600401610a6799989796959493929190611c2d565b6000604051808303818588803b158015610a8057600080fd5b505af1158015610a94573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052610abd919081019061163b565b9350610b0f837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016103929190611ae0565b610b176111ea565b505050610b226111fe565b9998505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b610b5b610df7565b6001600160a01b0383163314610b835760405162461bcd60e51b81526004016101c490611db0565b6000805b610b918380611ee0565b9050811015610c56576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016610bce8480611ee0565b83818110610bd857fe5b9050602002016020810190610bed9190611777565b6001600160a01b03161415610c2157610c096020840184611ee0565b82818110610c1357fe5b905060200201359150610c56565b6001610c2d8480611ee0565b9050038110610c4e5760405162461bcd60e51b81526004016101c490611d38565b600101610b87565b50610c618482610e10565b5060405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90610cb09087908590600401611b0e565b602060405180830381600087803b158015610cca57600080fd5b505af1158015610cde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0291906116dc565b50610d0b610798565b6001600160a01b031663b95cac2834878787876040518663ffffffff1660e01b8152600401610d3d9493929190611bf1565b6000604051808303818588803b158015610d5657600080fd5b505af1158015610d6a573d6000803e3d6000fd5b5050505050610d776111ea565b506107926111fe565b7f000000000000000000000000000000000000000000000000000000000000000090565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b610e096002600054141561019061017f565b6002600055565b600081610e1f57506000610fdb565b604051632eca54bf60e21b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063bb2952fc90610e6e908690600401611ed7565b60206040518083038186803b158015610e8657600080fd5b505afa158015610e9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebe919061193b565b6001019050610eee847f00000000000000000000000000000000000000000000000000000000000000008361121a565b610f397f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083610fe1565b604051630ea598cb60e41b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ea598cb090610f85908490600401611ed7565b602060405180830381600087803b158015610f9f57600080fd5b505af1158015610fb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd7919061193b565b9150505b92915050565b604051636eb1769f60e11b815281906001600160a01b0385169063dd62ed3e906110119030908790600401611af4565b60206040518083038186803b15801561102957600080fd5b505afa15801561103d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611061919061193b565b10156110e95760405163095ea7b360e01b81526001600160a01b0384169063095ea7b39061109790859060001990600401611b0e565b602060405180830381600087803b1580156110b157600080fd5b505af11580156110c5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079291906116dc565b505050565b806110f85761018d565b604051636f074d1f60e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063de0e9a3e90611147908590600401611ed7565b602060405180830381600087803b15801561116157600080fd5b505af1158015611175573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611199919061193b565b60405163a9059cbb60e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906110979086908590600401611b0e565b4780156111fb576111fb33826112bd565b50565b6001600055565b600061121383836001611337565b9392505050565b80611224576110e9565b60408051600180825281830190925260009160208083019080368337019050509050828160008151811061125457fe5b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050828160008151811061129f57fe5b6020026020010181815250506112b685838361134d565b5050505050565b6112cc814710156101a361017f565b6000826001600160a01b0316826040516112e590611add565b60006040518083038185875af1925050503d8060008114611322576040519150601f19603f3d011682016040523d82523d6000602084013e611327565b606091505b505090506110e9816101a461017f565b6000611346848411158361017f565b5050900390565b6000825167ffffffffffffffff8111801561136757600080fd5b506040519080825280602002602001820160405280156113a157816020015b61138e6114a5565b8152602001906001900390816113865790505b50905060005b8351811015611439576040805160a0810190915280600381526020018583815181106113cf57fe5b60200260200101516001600160a01b031681526020018483815181106113f157fe5b60200260200101518152602001866001600160a01b03168152602001306001600160a01b031681525082828151811061142657fe5b60209081029190910101526001016113a7565b50611442610798565b6001600160a01b0316630e8e3e84826040518263ffffffff1660e01b815260040161146d9190611b6b565b600060405180830381600087803b15801561148757600080fd5b505af115801561149b573d6000803e3d6000fd5b5050505050505050565b6040805160a081019091528060008152600060208201819052604082018190526060820181905260809091015290565b60008083601f8401126114e6578182fd5b50813567ffffffffffffffff8111156114fd578182fd5b602083019150836020808302850101111561151757600080fd5b9250929050565b600082601f83011261152e578081fd5b813567ffffffffffffffff81111561154257fe5b611555601f8201601f1916602001611f27565b818152846020838601011115611569578283fd5b816020850160208301379081016020019190915292915050565b803561158e81611fd8565b919050565b80356002811061158e57600080fd5b6000608082840312156115b3578081fd5b50919050565b6000608082840312156115ca578081fd5b6040516080810181811067ffffffffffffffff821117156115e757fe5b60405290508082356115f881611fd8565b8152602083013561160881611fed565b6020820152604083013561161b81611fd8565b6040820152606083013561162e81611fed565b6060919091015292915050565b6000602080838503121561164d578182fd5b825167ffffffffffffffff80821115611664578384fd5b818501915085601f830112611677578384fd5b81518181111561168357fe5b8381029150611693848301611f27565b8181528481019084860184860187018a10156116ad578788fd5b8795505b838610156116cf5780518352600195909501949186019186016116b1565b5098975050505050505050565b6000602082840312156116ed578081fd5b815161121381611fed565b6000806000806080858703121561170d578283fd5b84359350602085013561171f81611fd8565b9250604085013561172f81611fd8565b9150606085013567ffffffffffffffff81111561174a578182fd5b611756878288016115a2565b91505092959194509250565b6000806000806080858703121561170d578384fd5b600060208284031215611788578081fd5b813561121381611fd8565b60008060008060008060008060006101208a8c0312156117b1578687fd5b6117ba8a611593565b985060208a013567ffffffffffffffff808211156117d6578889fd5b6117e28d838e016114d5565b909a50985060408c01359150808211156117fa578687fd5b6118068d838e016114d5565b909850965086915061181b8d60608e016115b9565b955060e08c0135915080821115611830578485fd5b5061183d8c828d016114d5565b9a9d999c50979a969995989497966101000135949350505050565b60008060008060e0858703121561186d578182fd5b843567ffffffffffffffff80821115611884578384fd5b9086019060c08289031215611897578384fd5b60405160c0810181811083821117156118ac57fe5b604052823581526118bf60208401611593565b60208201526118d060408401611583565b60408201526118e160608401611583565b60608201526080830135608082015260a083013582811115611901578586fd5b61190d8a82860161151e565b60a08301525080965050505061192686602087016115b9565b939693955050505060a08201359160c0013590565b60006020828403121561194c578081fd5b5051919050565b60008284526020808501945082825b8581101561199057813561197581611fd8565b6001600160a01b031687529582019590820190600101611962565b509495945050505050565b60008284526020808501945082825b85811015611990578135875295820195908201906001016119aa565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b600281106119fa57fe5b9052565b6000611a0a8283611f4b565b60808552611a1c608086018284611953565b9150506020611a2d81850185611f4b565b868403838801528084526001600160fb1b03811115611a4a578485fd5b820280828585013780840193505050808201838152611a6c6040860186611f93565b83888603016040890152611a818382846119c6565b9450505050506060830135611a9581611fed565b8015156060860152508091505092915050565b80516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015611b5f57835183529284019291840191600101611b43565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015611be4578151805160048110611b9e57fe5b8552808701516001600160a01b03908116888701528682015187870152606080830151821690870152608091820151169085015260a09093019290850190600101611b88565b5091979650505050505050565b8481526001600160a01b03848116602083015283166040820152608060608201819052600090611c23908301846119fe565b9695505050505050565b60006101208201611c3e838d6119f0565b6101206020840152808a82526101408401905061014060208c0285010191508b835b8c811015611ce85785840361013f190183528135368f9003609e19018112611c86578586fd5b8e8101905080358552602081013560208601526040810135604086015260608101356060860152611cba6080820182611f93565b915060a06080870152611cd160a0870183836119c6565b955050506020928301929190910190600101611c60565b5050508281036040840152611cfe81898b611953565b9050611d0d6060840188611aa8565b82810360e0840152611d2081868861199b565b915050826101008301529a9950505050505050505050565b60208082526017908201527f446f6573206e6f74207265717569726520777374455448000000000000000000604082015260600190565b60208082526021908201527f43616e6e6f742073656e642066726f6d20696e7465726e616c2062616c616e636040820152606560f81b606082015260800190565b6020808252600e908201526d24b73b30b634b21039b2b73232b960911b604082015260600190565b6020808252601f908201527f43616e6e6f742073656e6420746f20696e7465726e616c2062616c616e636500604082015260600190565b600060e08252855160e0830152602080870151611e306101008501826119f0565b5060408701516001600160a01b03908116610120850152606088015116610140840152608087015161016084015260a087015160c061018085015280516101a08501819052835b81811015611e94578281018401518682016101c001528301611e77565b81811115611ea657846101c083880101525b50601f01601f191684016101c0019250611ec4905081840187611aa8565b5060a082019390935260c0015292915050565b90815260200190565b6000808335601e19843603018112611ef6578283fd5b83018035915067ffffffffffffffff821115611f10578283fd5b602090810192508102360382131561151757600080fd5b60405181810167ffffffffffffffff81118282101715611f4357fe5b604052919050565b6000808335601e19843603018112611f61578283fd5b830160208101925035905067ffffffffffffffff811115611f8157600080fd5b60208102360383131561151757600080fd5b6000808335601e19843603018112611fa9578283fd5b830160208101925035905067ffffffffffffffff811115611fc957600080fd5b80360383131561151757600080fd5b6001600160a01b03811681146111fb57600080fd5b80151581146111fb57600080fdfea2646970667358221220047a7c3b1114b841993e359f6bf4fb04ead8453998c78a88599ca2378f86d42164736f6c63430007060033";

type LidoRelayerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LidoRelayerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LidoRelayer__factory extends ContractFactory {
  constructor(...args: LidoRelayerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    vault: PromiseOrValue<string>,
    wstETH: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LidoRelayer> {
    return super.deploy(vault, wstETH, overrides || {}) as Promise<LidoRelayer>;
  }
  override getDeployTransaction(
    vault: PromiseOrValue<string>,
    wstETH: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(vault, wstETH, overrides || {});
  }
  override attach(address: string): LidoRelayer {
    return super.attach(address) as LidoRelayer;
  }
  override connect(signer: Signer): LidoRelayer__factory {
    return super.connect(signer) as LidoRelayer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LidoRelayerInterface {
    return new utils.Interface(_abi) as LidoRelayerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LidoRelayer {
    return new Contract(address, _abi, signerOrProvider) as LidoRelayer;
  }
}
