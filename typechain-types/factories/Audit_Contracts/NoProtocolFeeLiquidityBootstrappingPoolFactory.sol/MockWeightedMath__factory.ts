/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockWeightedMath,
  MockWeightedMathInterface,
} from "../../../Audit_Contracts/NoProtocolFeeLiquidityBootstrappingPoolFactory.sol/MockWeightedMath";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "normalizedWeights",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amountsOut",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "bptInForExactTokensOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "normalizedWeight",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "previousInvariant",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentInvariant",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "protocolSwapFeePercentage",
        type: "uint256",
      },
    ],
    name: "calculateDueTokenProtocolSwapFeeAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenNormalizedWeight",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptAmountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "exactBPTInForTokenOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "currentBalances",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "bptAmountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalBPT",
        type: "uint256",
      },
    ],
    name: "exactBPTInForTokensOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "normalizedWeights",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amountsIn",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "exactTokensInForBPTOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenBalanceIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenWeightIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenBalanceOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenWeightOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenAmountOut",
        type: "uint256",
      },
    ],
    name: "inGivenOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "normalizedWeights",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "balances",
        type: "uint256[]",
      },
    ],
    name: "invariant",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenBalanceIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenWeightIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenBalanceOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenWeightOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenAmountIn",
        type: "uint256",
      },
    ],
    name: "outGivenIn",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenNormalizedWeight",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptAmountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bptTotalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapFee",
        type: "uint256",
      },
    ],
    name: "tokenInForExactBPTOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506118b8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c80631b02e9a8146100885780631c855fa6146100b15780632e752149146100d15780634b114ddf146100e457806356785371146100f75780635b55b24a1461010a57806398f59bca1461011d578063c2546cc314610130578063fab3b9d714610143575b600080fd5b61009b6100963660046117fb565b610156565b6040516100a89190611879565b60405180910390f35b6100c46100bf3660046117b0565b610171565b6040516100a89190611835565b61009b6100df36600461171b565b610186565b61009b6100f23660046117fb565b610195565b61009b6101053660046116bb565b6101a4565b61009b6101183660046117fb565b6101b9565b61009b61012b36600461171b565b6101c8565b61009b61013e3660046117fb565b6101d7565b61009b6101513660046117fb565b6101e6565b600061016586868686866101f5565b90505b95945050505050565b606061017e848484610279565b949350505050565b6000610165868686868661032a565b6000610165868686868661058e565b60006101b083836105fb565b90505b92915050565b60006101658686868686610666565b6000610165868686868661072c565b60006101658686868686610918565b600061016586868686866109c3565b600061021761020c85670429d069189e0000610a37565b831115610131610a6d565b600061022d6102268685610a7f565b8690610a95565b9050600061023b8588610a95565b905060006102498383610aec565b9050600061025f82670de0b6b3a7640000610a7f565b905061026b8a82610b1f565b9a9950505050505050505050565b606060006102878484610b5b565b9050600085516001600160401b03811180156102a257600080fd5b506040519080825280602002602001820160405280156102cc578160200160208202803683370190505b50905060005b865181101561032057610301838883815181106102eb57fe5b6020026020010151610a3790919063ffffffff16565b82828151811061030d57fe5b60209081029190910101526001016102d2565b5095945050505050565b60008084516001600160401b038111801561034457600080fd5b5060405190808252806020026020018201604052801561036e578160200160208202803683370190505b5090506000805b8851811015610423576103d489828151811061038d57fe5b60200260200101516103ce8984815181106103a457fe5b60200260200101518c85815181106103b857fe5b6020026020010151610ba390919063ffffffff16565b90610b5b565b8382815181106103e057fe5b6020026020010181815250506104196104128983815181106103fe57fe5b60200260200101518584815181106102eb57fe5b8390610ba3565b9150600101610375565b50670de0b6b3a764000060005b895181101561054b5760008385838151811061044857fe5b602002602001015111156104cd57600061047961046d86670de0b6b3a7640000610a7f565b8d85815181106102eb57fe5b905060006104a3828c868151811061048d57fe5b6020026020010151610a7f90919063ffffffff16565b90506104c46104126104bd670de0b6b3a76400008c610a7f565b8390610a37565b925050506104e4565b8882815181106104d957fe5b602002602001015190505b600061050d8c84815181106104f557fe5b60200260200101516103ce848f87815181106103b857fe5b905061053f6105388c858151811061052157fe5b602002602001015183610bb590919063ffffffff16565b8590610a37565b93505050600101610430565b50670de0b6b3a76400008111156105825761057861057182670de0b6b3a7640000610a7f565b8790610a37565b9350505050610168565b60009350505050610168565b60006105b06105a587670429d069189e0000610a37565b831115610130610a6d565b60006105bc8784610ba3565b905060006105ca8883610a95565b905060006105d88887610b5b565b905060006105e68383610aec565b905061026b6105f482610bfd565b8990610a37565b670de0b6b3a764000060005b83518110156106565761064c6104bd85838151811061062257fe5b602002602001015185848151811061063657fe5b6020026020010151610bb590919063ffffffff16565b9150600101610607565b506101b360008211610137610a6d565b60008061067d846106778188610a7f565b90610a95565b90506106966709b6e64a8ec60000821015610132610a6d565b60006106b46106ad670de0b6b3a764000089610b5b565b8390610aec565b905060006106cb6106c483610bfd565b8a90610a37565b905060006106d889610bfd565b905060006106e68383610b1f565b905060006106f48483610a7f565b905061071c61071561070e670de0b6b3a76400008b610a7f565b8490610a37565b8290610ba3565b9c9b505050505050505050505050565b60008084516001600160401b038111801561074657600080fd5b50604051908082528060200260200182016040528015610770578160200160208202803683370190505b5090506000805b8851811015610818576107ba89828151811061078f57fe5b60200260200101516106778984815181106107a657fe5b60200260200101518c858151811061048d57fe5b8382815181106107c657fe5b60200260200101818152505061080e6104128983815181106107e457fe5b60200260200101518584815181106107f857fe5b6020026020010151610b1f90919063ffffffff16565b9150600101610777565b50670de0b6b3a764000060005b89518110156108f757600084828151811061083c57fe5b602002602001015184111561089757600061085961046d86610bfd565b9050600061086d828c868151811061048d57fe5b905061088e610412610887670de0b6b3a76400008c610a7f565b8390610a95565b925050506108ae565b8882815181106108a357fe5b602002602001015190505b60006108d78c84815181106108bf57fe5b60200260200101516103ce848f878151811061048d57fe5b90506108eb6105388c858151811061052157fe5b93505050600101610825565b5061090b61090482610bfd565b8790610b1f565b9998505050505050505050565b600080610929846106778188610ba3565b90506109426729a2241af62c0000821115610133610a6d565b60006109596106ad670de0b6b3a764000089610a95565b9050600061097961097283670de0b6b3a7640000610a7f565b8a90610b1f565b9050600061098689610bfd565b905060006109948383610b1f565b905060006109a28483610a7f565b905061071c6107156109bc670de0b6b3a76400008b610a7f565b8490610a95565b60008383116109d457506000610168565b60006109e08585610a95565b905060006109f6670de0b6b3a764000088610b5b565b9050610a0a826709b6e64a8ec60000610c29565b91506000610a188383610aec565b90506000610a2f610a2883610bfd565b8b90610a37565b905061026b81875b6000828202610a5b841580610a54575083858381610a5157fe5b04145b6003610a6d565b670de0b6b3a764000090049392505050565b81610a7b57610a7b81610c40565b5050565b6000610a8f838311156001610a6d565b50900390565b6000610aa48215156004610a6d565b82610ab1575060006101b3565b670de0b6b3a764000083810290610ad490858381610acb57fe5b04146005610a6d565b826001820381610ae057fe5b046001019150506101b3565b600080610af98484610c93565b90506000610b13610b0c83612710610b1f565b6001610ba3565b90506101688282610ba3565b6000828202610b39841580610a54575083858381610a5157fe5b80610b485760009150506101b3565b670de0b6b3a76400006000198201610ae0565b6000610b6a8215156004610a6d565b82610b77575060006101b3565b670de0b6b3a764000083810290610b9190858381610acb57fe5b828181610b9a57fe5b049150506101b3565b60008282016101b08482101583610a6d565b600080610bc28484610c93565b90506000610bd5610b0c83612710610b1f565b905080821015610bea576000925050506101b3565b610bf48282610a7f565b925050506101b3565b6000670de0b6b3a76400008210610c15576000610c21565b81670de0b6b3a7640000035b90505b919050565b600081831015610c3957816101b0565b5090919050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b600081610ca95750670de0b6b3a76400006101b3565b82610cb6575060006101b3565b610cc7600160ff1b84106006610a6d565b82610ced770bce5086492111aea88f4bb1ca6bcf584181ea8059f7653284106007610a6d565b826000670c7d713b49da000083138015610d0e5750670f43fc2c04ee000083125b15610d45576000610d1e84610d9e565b9050670de0b6b3a764000080820784020583670de0b6b3a764000083050201915050610d53565b81610d4f84610ebc565b0290505b670de0b6b3a76400009005610d8b680238fd42c5cf03ffff198212801590610d84575068070c1cc73b00c800008213155b6008610a6d565b610d9481611255565b9695505050505050565b670de0b6b3a7640000026000806a0c097ce7bc90715b34b9f160241b808401906ec097ce7bc90715b34b9f0fffffffff1985010281610dd957fe5b05905060006a0c097ce7bc90715b34b9f160241b82800205905081806a0c097ce7bc90715b34b9f160241b81840205915060038205016a0c097ce7bc90715b34b9f160241b82840205915060058205016a0c097ce7bc90715b34b9f160241b82840205915060078205016a0c097ce7bc90715b34b9f160241b82840205915060098205016a0c097ce7bc90715b34b9f160241b828402059150600b8205016a0c097ce7bc90715b34b9f160241b828402059150600d8205016a0c097ce7bc90715b34b9f160241b828402059150600f826002919005919091010295945050505050565b6000670de0b6b3a7640000821215610ef857610eee826a0c097ce7bc90715b34b9f160241b81610ee857fe5b05610ebc565b6000039050610c24565b6000775803bcc5cb9634ba4cfb2213f784019318ed4dcb6017880f60361b8312610f435772195e54c5dd42177f53a27172fa9ec63026282760241b830592506806f05b59d3b2000000015b73011798004d755d3c8bc8e03204cf44619e0000008312610f7b576b1425982cf597cd205cef7380830592506803782dace9d9000000015b606492830292026e01855144814a7ff805980ff00840008312610fc3576e01855144814a7ff805980ff008400068056bc75e2d63100000840205925068ad78ebc5ac62000000015b6b02df0ab5a80a22c61ab5a7008312610ffe576b02df0ab5a80a22c61ab5a70068056bc75e2d6310000084020592506856bc75e2d631000000015b693f1fce3da636ea5cf850831261103557693f1fce3da636ea5cf85068056bc75e2d631000008402059250682b5e3af16b18800000015b690127fa27722cc06cc5e2831261106c57690127fa27722cc06cc5e268056bc75e2d6310000084020592506815af1d78b58c400000015b68280e60114edb805d0383126110a15768280e60114edb805d0368056bc75e2d631000008402059250680ad78ebc5ac6200000015b680ebc5fb4174612111083126110cc57680ebc5fb4174612111068056bc75e2d631000009384020592015b6808f00f760a4b2db55d8312611101576808f00f760a4b2db55d68056bc75e2d6310000084020592506802b5e3af16b1880000015b6806f5f17757889379378312611136576806f5f177578893793768056bc75e2d63100000840205925068015af1d78b58c40000015b6806248f33704b286603831261116a576806248f33704b28660368056bc75e2d63100000840205925067ad78ebc5ac620000015b6805c548670b9510e7ac831261119e576805c548670b9510e7ac68056bc75e2d6310000084020592506756bc75e2d6310000015b600068056bc75e2d63100000840168056bc75e2d6310000080860302816111c157fe5b059050600068056bc75e2d63100000828002059050818068056bc75e2d63100000818402059150600382050168056bc75e2d63100000828402059150600582050168056bc75e2d63100000828402059150600782050168056bc75e2d63100000828402059150600982050168056bc75e2d63100000828402059150600b820501600202606485820105979650505050505050565b6000611284680238fd42c5cf03ffff19831215801561127d575068070c1cc73b00c800008313155b6009610a6d565b60008212156112b75761129982600003611255565b6a0c097ce7bc90715b34b9f160241b816112af57fe5b059050610c24565b60006806f05b59d3b200000083126112f557506806f05b59d3b1ffffff199091019072195e54c5dd42177f53a27172fa9ec63026282760241b61132b565b6803782dace9d9000000831261132757506803782dace9d8ffffff19909101906b1425982cf597cd205cef738061132b565b5060015b6064929092029168056bc75e2d6310000068ad78ebc5ac62000000841261137b5768ad78ebc5ac61ffffff199093019268056bc75e2d631000006e01855144814a7ff805980ff008400082020590505b6856bc75e2d63100000084126113b7576856bc75e2d630ffffff199093019268056bc75e2d631000006b02df0ab5a80a22c61ab5a70082020590505b682b5e3af16b1880000084126113f157682b5e3af16b187fffff199093019268056bc75e2d63100000693f1fce3da636ea5cf85082020590505b6815af1d78b58c400000841261142b576815af1d78b58c3fffff199093019268056bc75e2d63100000690127fa27722cc06cc5e282020590505b680ad78ebc5ac6200000841261146457680ad78ebc5ac61fffff199093019268056bc75e2d6310000068280e60114edb805d0382020590505b68056bc75e2d63100000841261149d5768056bc75e2d630fffff199093019268056bc75e2d63100000680ebc5fb4174612111082020590505b6802b5e3af16b188000084126114d6576802b5e3af16b187ffff199093019268056bc75e2d631000006808f00f760a4b2db55d82020590505b68015af1d78b58c40000841261150f5768015af1d78b58c3ffff199093019268056bc75e2d631000006806f5f177578893793782020590505b68056bc75e2d631000008481019085906002908280020505918201919050600368056bc75e2d631000008783020505918201919050600468056bc75e2d631000008783020505918201919050600568056bc75e2d631000008783020505918201919050600668056bc75e2d631000008783020505918201919050600768056bc75e2d631000008783020505918201919050600868056bc75e2d631000008783020505918201919050600968056bc75e2d631000008783020505918201919050600a68056bc75e2d631000008783020505918201919050600b68056bc75e2d631000008783020505918201919050600c68056bc75e2d631000008783020505918201919050606468056bc75e2d63100000848402058502059695505050505050565b600082601f830112611640578081fd5b813560206001600160401b038083111561165657fe5b8183026040518382820101818110848211171561166f57fe5b6040528481528381019250868401828801850189101561168d578687fd5b8692505b858310156116af578035845292840192600192909201918401611691565b50979650505050505050565b600080604083850312156116cd578182fd5b82356001600160401b03808211156116e3578384fd5b6116ef86838701611630565b93506020850135915080821115611704578283fd5b5061171185828601611630565b9150509250929050565b600080600080600060a08688031215611732578081fd5b85356001600160401b0380821115611748578283fd5b61175489838a01611630565b96506020880135915080821115611769578283fd5b61177589838a01611630565b9550604088013591508082111561178a578283fd5b5061179788828901611630565b9598949750949560608101359550608001359392505050565b6000806000606084860312156117c4578283fd5b83356001600160401b038111156117d9578384fd5b6117e586828701611630565b9660208601359650604090950135949350505050565b600080600080600060a08688031215611812578081fd5b505083359560208501359550604085013594606081013594506080013592509050565b6020808252825182820181905260009190848201906040850190845b8181101561186d57835183529284019291840191600101611851565b50909695505050505050565b9081526020019056fea2646970667358221220658f3c9c957413f672bf506250c4ab53f0aa80660487d3005757f55f024cfa7f64736f6c63430007060033";

type MockWeightedMathConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockWeightedMathConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockWeightedMath__factory extends ContractFactory {
  constructor(...args: MockWeightedMathConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockWeightedMath> {
    return super.deploy(overrides || {}) as Promise<MockWeightedMath>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockWeightedMath {
    return super.attach(address) as MockWeightedMath;
  }
  override connect(signer: Signer): MockWeightedMath__factory {
    return super.connect(signer) as MockWeightedMath__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockWeightedMathInterface {
    return new utils.Interface(_abi) as MockWeightedMathInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockWeightedMath {
    return new Contract(address, _abi, signerOrProvider) as MockWeightedMath;
  }
}
