{
	"id": "3aa64e9b197b7964c5d1955fd26c7a69",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.6",
	"solcLongVersion": "0.7.6+commit.7338295f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/ProtocolFeesCollector.sol": {
				"content": "pragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface for the TemporarilyPausable helper.\r\n */\r\ninterface ITemporarilyPausable {\r\n    /**\r\n     * @dev Emitted every time the pause state changes by `_setPaused`.\r\n     */\r\n    event PausedStateChanged(bool paused);\r\n\r\n    /**\r\n     * @dev Returns the current paused state.\r\n     */\r\n    function getPausedState()\r\n        external\r\n        view\r\n        returns (\r\n            bool paused,\r\n            uint256 pauseWindowEndTime,\r\n            uint256 bufferPeriodEndTime\r\n        );\r\n}\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\r\n */\r\ninterface ISignaturesValidator {\r\n    /**\r\n     * @dev Returns the EIP712 domain separator.\r\n     */\r\n    function getDomainSeparator() external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Returns the next nonce used by an address to sign messages.\r\n     */\r\n    function getNextNonce(address user) external view returns (uint256);\r\n}\r\n\r\npragma solidity ^0.7.0;\r\n\r\ninterface IAuthentication {\r\n    /**\r\n     * @dev Returns the action identifier associated with the external function described by `selector`.\r\n     */\r\n    function getActionId(bytes4 selector) external view returns (bytes32);\r\n}\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\r\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\r\n * types.\r\n *\r\n * This concept is unrelated to a Pool's Asset Managers.\r\n */\r\ninterface IAsset {\r\n    // solhint-disable-previous-line no-empty-blocks\r\n}\r\n\r\npragma solidity ^0.7.0;\r\n\r\n// solhint-disable\r\n\r\n/**\r\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\r\n * supported.\r\n */\r\nfunction _require(bool condition, uint256 errorCode) pure {\r\n    if (!condition) _revert(errorCode);\r\n}\r\n\r\n/**\r\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\r\n */\r\nfunction _revert(uint256 errorCode) pure {\r\n    // We're going to dynamically create a revert string based on the error code, with the following format:\r\n    // 'BAL#{errorCode}'\r\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\r\n    //\r\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\r\n    // number (8 to 16 bits) than the individual string characters.\r\n    //\r\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\r\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\r\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\r\n    assembly {\r\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\r\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\r\n        // the '0' character.\r\n\r\n        let units := add(mod(errorCode, 10), 0x30)\r\n\r\n        errorCode := div(errorCode, 10)\r\n        let tenths := add(mod(errorCode, 10), 0x30)\r\n\r\n        errorCode := div(errorCode, 10)\r\n        let hundreds := add(mod(errorCode, 10), 0x30)\r\n\r\n        // With the individual characters, we can now construct the full string. The \"BAL#\" part is a known constant\r\n        // (0x42414c23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\r\n        // characters to it, each shifted by a multiple of 8.\r\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\r\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\r\n        // array).\r\n\r\n        let revertReason := shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\r\n\r\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\r\n        // message will have the following layout:\r\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\r\n\r\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\r\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\r\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\r\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\r\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\r\n        // The string length is fixed: 7 characters.\r\n        mstore(0x24, 7)\r\n        // Finally, the string itself is stored.\r\n        mstore(0x44, revertReason)\r\n\r\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\r\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\r\n        revert(0, 100)\r\n    }\r\n}\r\n\r\nlibrary Errors {\r\n    // Math\r\n    uint256 internal constant ADD_OVERFLOW = 0;\r\n    uint256 internal constant SUB_OVERFLOW = 1;\r\n    uint256 internal constant SUB_UNDERFLOW = 2;\r\n    uint256 internal constant MUL_OVERFLOW = 3;\r\n    uint256 internal constant ZERO_DIVISION = 4;\r\n    uint256 internal constant DIV_INTERNAL = 5;\r\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\r\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\r\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\r\n    uint256 internal constant INVALID_EXPONENT = 9;\r\n\r\n    // Input\r\n    uint256 internal constant OUT_OF_BOUNDS = 100;\r\n    uint256 internal constant UNSORTED_ARRAY = 101;\r\n    uint256 internal constant UNSORTED_TOKENS = 102;\r\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\r\n    uint256 internal constant ZERO_TOKEN = 104;\r\n\r\n    // Shared pools\r\n    uint256 internal constant MIN_TOKENS = 200;\r\n    uint256 internal constant MAX_TOKENS = 201;\r\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\r\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\r\n    uint256 internal constant MINIMUM_BPT = 204;\r\n    uint256 internal constant CALLER_NOT_VAULT = 205;\r\n    uint256 internal constant UNINITIALIZED = 206;\r\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\r\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\r\n    uint256 internal constant EXPIRED_PERMIT = 209;\r\n\r\n    // Pools\r\n    uint256 internal constant MIN_AMP = 300;\r\n    uint256 internal constant MAX_AMP = 301;\r\n    uint256 internal constant MIN_WEIGHT = 302;\r\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\r\n    uint256 internal constant MAX_IN_RATIO = 304;\r\n    uint256 internal constant MAX_OUT_RATIO = 305;\r\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\r\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\r\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\r\n    uint256 internal constant INVALID_TOKEN = 309;\r\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\r\n    uint256 internal constant ZERO_INVARIANT = 311;\r\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\r\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\r\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\r\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\r\n    uint256 internal constant ORACLE_BAD_SECS = 316;\r\n\r\n    // Lib\r\n    uint256 internal constant REENTRANCY = 400;\r\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\r\n    uint256 internal constant PAUSED = 402;\r\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\r\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\r\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\r\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\r\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\r\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\r\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\r\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\r\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\r\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\r\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\r\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\r\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\r\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\r\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\r\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\r\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\r\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\r\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\r\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\r\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\r\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\r\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\r\n\r\n    // Vault\r\n    uint256 internal constant INVALID_POOL_ID = 500;\r\n    uint256 internal constant CALLER_NOT_POOL = 501;\r\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\r\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\r\n    uint256 internal constant INVALID_SIGNATURE = 504;\r\n    uint256 internal constant EXIT_BELOW_MIN = 505;\r\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\r\n    uint256 internal constant SWAP_LIMIT = 507;\r\n    uint256 internal constant SWAP_DEADLINE = 508;\r\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\r\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\r\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\r\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\r\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\r\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\r\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\r\n    uint256 internal constant INSUFFICIENT_ETH = 516;\r\n    uint256 internal constant UNALLOCATED_ETH = 517;\r\n    uint256 internal constant ETH_TRANSFER = 518;\r\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\r\n    uint256 internal constant TOKENS_MISMATCH = 520;\r\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\r\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\r\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\r\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\r\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\r\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\r\n    uint256 internal constant POOL_NO_TOKENS = 527;\r\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\r\n\r\n    // Fees\r\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\r\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\r\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\r\n}\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity ^0.7.0;\r\n\r\ninterface IFlashLoanRecipient {\r\n    /**\r\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\r\n     *\r\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\r\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\r\n     * Vault, or else the entire flash loan will revert.\r\n     *\r\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\r\n     */\r\n    function receiveFlashLoan(\r\n        IERC20[] memory tokens,\r\n        uint256[] memory amounts,\r\n        uint256[] memory feeAmounts,\r\n        bytes memory userData\r\n    ) external;\r\n}\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Interface for the WETH token contract used internally for wrapping and unwrapping, to support\r\n * sending and receiving ETH in joins, swaps, and internal balance deposits and withdrawals.\r\n */\r\ninterface IWETH is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 amount) external;\r\n}\r\n\r\npragma solidity ^0.7.0;\r\n\r\ninterface IAuthorizer {\r\n    /**\r\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\r\n     */\r\n    function canPerform(\r\n        bytes32 actionId,\r\n        address account,\r\n        address where\r\n    ) external view returns (bool);\r\n}\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     *\r\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\r\n     */\r\n    function _callOptionalReturn(address token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n        (bool success, bytes memory returndata) = token.call(data);\r\n\r\n        // If the low-level call didn't succeed we return whatever was returned from it.\r\n        assembly {\r\n            if eq(success, 0) {\r\n                returndatacopy(0, 0, returndatasize())\r\n                revert(0, returndatasize())\r\n            }\r\n        }\r\n\r\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\r\n        _require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\r\n    }\r\n}\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _enterNonReentrant();\r\n        _;\r\n        _exitNonReentrant();\r\n    }\r\n\r\n    function _enterNonReentrant() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        _require(_status != _ENTERED, Errors.REENTRANCY);\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _exitNonReentrant() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Building block for performing access control on external functions.\r\n *\r\n * This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be applied\r\n * to external functions to only make them callable by authorized accounts.\r\n *\r\n * Derived contracts must implement the `_canPerform` function, which holds the actual access control logic.\r\n */\r\nabstract contract Authentication is IAuthentication {\r\n    bytes32 private immutable _actionIdDisambiguator;\r\n\r\n    /**\r\n     * @dev The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in\r\n     * multi contract systems.\r\n     *\r\n     * There are two main uses for it:\r\n     *  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers\r\n     *    unique. The contract's own address is a good option.\r\n     *  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier\r\n     *    shared by the entire family (and no other contract) should be used instead.\r\n     */\r\n    constructor(bytes32 actionIdDisambiguator) {\r\n        _actionIdDisambiguator = actionIdDisambiguator;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts unless the caller is allowed to call this function. Should only be applied to external functions.\r\n     */\r\n    modifier authenticate() {\r\n        _authenticateCaller();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts unless the caller is allowed to call the entry point function.\r\n     */\r\n    function _authenticateCaller() internal view {\r\n        bytes32 actionId = getActionId(msg.sig);\r\n        _require(_canPerform(actionId, msg.sender), Errors.SENDER_NOT_ALLOWED);\r\n    }\r\n\r\n    function getActionId(bytes4 selector) public view override returns (bytes32) {\r\n        // Each external function is dynamically assigned an action identifier as the hash of the disambiguator and the\r\n        // function selector. Disambiguation is necessary to avoid potential collisions in the function selectors of\r\n        // multiple contracts.\r\n        return keccak256(abi.encodePacked(_actionIdDisambiguator, selector));\r\n    }\r\n\r\n    function _canPerform(bytes32 actionId, address user) internal view virtual returns (bool);\r\n}\r\n\r\npragma solidity ^0.7.0;\r\n\r\nlibrary InputHelpers {\r\n    function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {\r\n        _require(a == b, Errors.INPUT_LENGTH_MISMATCH);\r\n    }\r\n\r\n    function ensureInputLengthMatch(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 c\r\n    ) internal pure {\r\n        _require(a == b && b == c, Errors.INPUT_LENGTH_MISMATCH);\r\n    }\r\n\r\n    function ensureArrayIsSorted(IAsset[] memory array) internal pure {\r\n        address[] memory addressArray;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            addressArray := array\r\n        }\r\n        ensureArrayIsSorted(addressArray);\r\n    }\r\n\r\n    function ensureArrayIsSorted(IERC20[] memory array) internal pure {\r\n        address[] memory addressArray;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            addressArray := array\r\n        }\r\n        ensureArrayIsSorted(addressArray);\r\n    }\r\n\r\n    function ensureArrayIsSorted(address[] memory array) internal pure {\r\n        if (array.length < 2) {\r\n            return;\r\n        }\r\n\r\n        address previous = array[0];\r\n        for (uint256 i = 1; i < array.length; ++i) {\r\n            address current = array[i];\r\n            _require(previous < current, Errors.UNSORTED_ARRAY);\r\n            previous = current;\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.7.0;\r\n\r\n/**\r\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\r\n * don't override one of these declarations.\r\n */\r\ninterface IVault is ISignaturesValidator, ITemporarilyPausable {\r\n    // Generalities about the Vault:\r\n    //\r\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\r\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\r\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\r\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\r\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\r\n    //\r\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\r\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\r\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\r\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\r\n    //\r\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\r\n\r\n    // Authorizer\r\n    //\r\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\r\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\r\n    // can perform a given action.\r\n\r\n    /**\r\n     * @dev Returns the Vault's Authorizer.\r\n     */\r\n    function getAuthorizer() external view returns (IAuthorizer);\r\n\r\n    /**\r\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\r\n     *\r\n     * Emits an `AuthorizerChanged` event.\r\n     */\r\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\r\n\r\n    /**\r\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\r\n     */\r\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\r\n\r\n    // Relayers\r\n    //\r\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\r\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\r\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\r\n    // this power, two things must occur:\r\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\r\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\r\n    //    functions.\r\n    //  - Each user must approve the relayer to act on their behalf.\r\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\r\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\r\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\r\n\r\n    /**\r\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\r\n     */\r\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\r\n     *\r\n     * Emits a `RelayerApprovalChanged` event.\r\n     */\r\n    function setRelayerApproval(\r\n        address sender,\r\n        address relayer,\r\n        bool approved\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\r\n     */\r\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\r\n\r\n    // Internal Balance\r\n    //\r\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\r\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\r\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\r\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\r\n    //\r\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\r\n    // operations of different kinds, with different senders and recipients, at once.\r\n\r\n    /**\r\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\r\n     */\r\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\r\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\r\n     * it lets integrators reuse a user's Vault allowance.\r\n     *\r\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\r\n     */\r\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\r\n\r\n    /**\r\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\r\n     without manual WETH wrapping or unwrapping.\r\n     */\r\n    struct UserBalanceOp {\r\n        UserBalanceOpKind kind;\r\n        IAsset asset;\r\n        uint256 amount;\r\n        address sender;\r\n        address payable recipient;\r\n    }\r\n\r\n    // There are four possible operations in `manageUserBalance`:\r\n    //\r\n    // - DEPOSIT_INTERNAL\r\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\r\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\r\n    //\r\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\r\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\r\n    // relevant for relayers).\r\n    //\r\n    // Emits an `InternalBalanceChanged` event.\r\n    //\r\n    //\r\n    // - WITHDRAW_INTERNAL\r\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\r\n    //\r\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\r\n    // it to the recipient as ETH.\r\n    //\r\n    // Emits an `InternalBalanceChanged` event.\r\n    //\r\n    //\r\n    // - TRANSFER_INTERNAL\r\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\r\n    //\r\n    // Reverts if the ETH sentinel value is passed.\r\n    //\r\n    // Emits an `InternalBalanceChanged` event.\r\n    //\r\n    //\r\n    // - TRANSFER_EXTERNAL\r\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\r\n    // relayers, as it lets them reuse a user's Vault allowance.\r\n    //\r\n    // Reverts if the ETH sentinel value is passed.\r\n    //\r\n    // Emits an `ExternalBalanceTransfer` event.\r\n\r\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\r\n\r\n    /**\r\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\r\n     * interacting with Pools using Internal Balance.\r\n     *\r\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\r\n     * address.\r\n     */\r\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\r\n\r\n    /**\r\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\r\n     */\r\n    event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\r\n\r\n    // Pools\r\n    //\r\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\r\n    // functionality:\r\n    //\r\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\r\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\r\n    // which increase with the number of registered tokens.\r\n    //\r\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\r\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\r\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\r\n    // independent of the number of registered tokens.\r\n    //\r\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\r\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\r\n\r\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\r\n\r\n    /**\r\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\r\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\r\n     * changed.\r\n     *\r\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\r\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\r\n     *\r\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\r\n     * multiple Pools may share the same contract.\r\n     *\r\n     * Emits a `PoolRegistered` event.\r\n     */\r\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\r\n\r\n    /**\r\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\r\n     */\r\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\r\n\r\n    /**\r\n     * @dev Returns a Pool's contract address and specialization setting.\r\n     */\r\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\r\n\r\n    /**\r\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\r\n     *\r\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\r\n     * exit by receiving registered tokens, and can only swap registered tokens.\r\n     *\r\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\r\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\r\n     * ascending order.\r\n     *\r\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\r\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\r\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\r\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\r\n     * Asset Manager should not be made lightly.\r\n     *\r\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\r\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\r\n     * different Asset Manager.\r\n     *\r\n     * Emits a `TokensRegistered` event.\r\n     */\r\n    function registerTokens(\r\n        bytes32 poolId,\r\n        IERC20[] memory tokens,\r\n        address[] memory assetManagers\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\r\n     */\r\n    event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\r\n\r\n    /**\r\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\r\n     *\r\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\r\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\r\n     * must be deregistered in the same `deregisterTokens` call.\r\n     *\r\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\r\n     *\r\n     * Emits a `TokensDeregistered` event.\r\n     */\r\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\r\n\r\n    /**\r\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\r\n     */\r\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\r\n\r\n    /**\r\n     * @dev Returns detailed information for a Pool's registered token.\r\n     *\r\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\r\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\r\n     * equals the sum of `cash` and `managed`.\r\n     *\r\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\r\n     * `managed` or `total` balance to be greater than 2^112 - 1.\r\n     *\r\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\r\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\r\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\r\n     * change for this purpose, and will update `lastChangeBlock`.\r\n     *\r\n     * `assetManager` is the Pool's token Asset Manager.\r\n     */\r\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 cash,\r\n            uint256 managed,\r\n            uint256 lastChangeBlock,\r\n            address assetManager\r\n        );\r\n\r\n    /**\r\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\r\n     * the tokens' `balances` changed.\r\n     *\r\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\r\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\r\n     *\r\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\r\n     * order as passed to `registerTokens`.\r\n     *\r\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\r\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\r\n     * instead.\r\n     */\r\n    function getPoolTokens(bytes32 poolId)\r\n        external\r\n        view\r\n        returns (\r\n            IERC20[] memory tokens,\r\n            uint256[] memory balances,\r\n            uint256 lastChangeBlock\r\n        );\r\n\r\n    /**\r\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\r\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\r\n     * Pool shares.\r\n     *\r\n     * If the caller is not `sender`, it must be an authorized relayer for them.\r\n     *\r\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\r\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\r\n     * these maximums.\r\n     *\r\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\r\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\r\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\r\n     * back to the caller (not the sender, which is important for relayers).\r\n     *\r\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\r\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\r\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\r\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\r\n     *\r\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\r\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\r\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\r\n     *\r\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\r\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\r\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\r\n     * directly to the Pool's contract, as is `recipient`.\r\n     *\r\n     * Emits a `PoolBalanceChanged` event.\r\n     */\r\n    function joinPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address recipient,\r\n        JoinPoolRequest memory request\r\n    ) external payable;\r\n\r\n    struct JoinPoolRequest {\r\n        IAsset[] assets;\r\n        uint256[] maxAmountsIn;\r\n        bytes userData;\r\n        bool fromInternalBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\r\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\r\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\r\n     * `getPoolTokenInfo`).\r\n     *\r\n     * If the caller is not `sender`, it must be an authorized relayer for them.\r\n     *\r\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\r\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\r\n     * it just enforces these minimums.\r\n     *\r\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\r\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\r\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\r\n     *\r\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\r\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\r\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\r\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\r\n     *\r\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\r\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\r\n     * do so will trigger a revert.\r\n     *\r\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\r\n     * `tokens` array. This array must match the Pool's registered tokens.\r\n     *\r\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\r\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\r\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\r\n     * passed directly to the Pool's contract.\r\n     *\r\n     * Emits a `PoolBalanceChanged` event.\r\n     */\r\n    function exitPool(\r\n        bytes32 poolId,\r\n        address sender,\r\n        address payable recipient,\r\n        ExitPoolRequest memory request\r\n    ) external;\r\n\r\n    struct ExitPoolRequest {\r\n        IAsset[] assets;\r\n        uint256[] minAmountsOut;\r\n        bytes userData;\r\n        bool toInternalBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\r\n     */\r\n    event PoolBalanceChanged(\r\n        bytes32 indexed poolId,\r\n        address indexed liquidityProvider,\r\n        IERC20[] tokens,\r\n        int256[] deltas,\r\n        uint256[] protocolFeeAmounts\r\n    );\r\n\r\n    enum PoolBalanceChangeKind { JOIN, EXIT }\r\n\r\n    // Swaps\r\n    //\r\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\r\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\r\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\r\n    //\r\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\r\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\r\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\r\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\r\n    // individual swaps.\r\n    //\r\n    // There are two swap kinds:\r\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\r\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\r\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\r\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\r\n    //\r\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\r\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\r\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\r\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\r\n    // the final intended token.\r\n    //\r\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\r\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\r\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\r\n    // much less gas than they would otherwise.\r\n    //\r\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\r\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\r\n    // updating the Pool's internal accounting).\r\n    //\r\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\r\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\r\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\r\n    //\r\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\r\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\r\n    //\r\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\r\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\r\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\r\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\r\n    //\r\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\r\n\r\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\r\n\r\n    /**\r\n     * @dev Performs a swap with a single Pool.\r\n     *\r\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\r\n     * taken from the Pool, which must be greater than or equal to `limit`.\r\n     *\r\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\r\n     * sent to the Pool, which must be less than or equal to `limit`.\r\n     *\r\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\r\n     *\r\n     * Emits a `Swap` event.\r\n     */\r\n    function swap(\r\n        SingleSwap memory singleSwap,\r\n        FundManagement memory funds,\r\n        uint256 limit,\r\n        uint256 deadline\r\n    ) external payable returns (uint256);\r\n\r\n    /**\r\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\r\n     * the `kind` value.\r\n     *\r\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\r\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\r\n     *\r\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\r\n     * used to extend swap behavior.\r\n     */\r\n    struct SingleSwap {\r\n        bytes32 poolId;\r\n        SwapKind kind;\r\n        IAsset assetIn;\r\n        IAsset assetOut;\r\n        uint256 amount;\r\n        bytes userData;\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\r\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\r\n     *\r\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\r\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\r\n     * the same index in the `assets` array.\r\n     *\r\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\r\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\r\n     * `amountOut` depending on the swap kind.\r\n     *\r\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\r\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\r\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\r\n     *\r\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\r\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\r\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\r\n     * or unwrapped from WETH by the Vault.\r\n     *\r\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\r\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\r\n     *\r\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\r\n     * equivalent `swap` call.\r\n     *\r\n     * Emits `Swap` events.\r\n     */\r\n    function batchSwap(\r\n        SwapKind kind,\r\n        BatchSwapStep[] memory swaps,\r\n        IAsset[] memory assets,\r\n        FundManagement memory funds,\r\n        int256[] memory limits,\r\n        uint256 deadline\r\n    ) external payable returns (int256[] memory);\r\n\r\n    /**\r\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\r\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\r\n     *\r\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\r\n     * from the previous swap, depending on the swap kind.\r\n     *\r\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\r\n     * used to extend swap behavior.\r\n     */\r\n    struct BatchSwapStep {\r\n        bytes32 poolId;\r\n        uint256 assetInIndex;\r\n        uint256 assetOutIndex;\r\n        uint256 amount;\r\n        bytes userData;\r\n    }\r\n\r\n    /**\r\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\r\n     */\r\n    event Swap(\r\n        bytes32 indexed poolId,\r\n        IERC20 indexed tokenIn,\r\n        IERC20 indexed tokenOut,\r\n        uint256 amountIn,\r\n        uint256 amountOut\r\n    );\r\n\r\n    /**\r\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\r\n     * `recipient` account.\r\n     *\r\n     * If the caller is not `sender`, it must be an authorized relayer for them.\r\n     *\r\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\r\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\r\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\r\n     * `joinPool`.\r\n     *\r\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\r\n     * transferred. This matches the behavior of `exitPool`.\r\n     *\r\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\r\n     * revert.\r\n     */\r\n    struct FundManagement {\r\n        address sender;\r\n        bool fromInternalBalance;\r\n        address payable recipient;\r\n        bool toInternalBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\r\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\r\n     *\r\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\r\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\r\n     * receives are the same that an equivalent `batchSwap` call would receive.\r\n     *\r\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\r\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\r\n     * approve them for the Vault, or even know a user's address.\r\n     *\r\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\r\n     * eth_call instead of eth_sendTransaction.\r\n     */\r\n    function queryBatchSwap(\r\n        SwapKind kind,\r\n        BatchSwapStep[] memory swaps,\r\n        IAsset[] memory assets,\r\n        FundManagement memory funds\r\n    ) external returns (int256[] memory assetDeltas);\r\n\r\n    // Flash Loans\r\n\r\n    /**\r\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\r\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\r\n     *\r\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\r\n     * for each token contract. `tokens` must be sorted in ascending order.\r\n     *\r\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\r\n     * `receiveFlashLoan` call.\r\n     *\r\n     * Emits `FlashLoan` events.\r\n     */\r\n    function flashLoan(\r\n        IFlashLoanRecipient recipient,\r\n        IERC20[] memory tokens,\r\n        uint256[] memory amounts,\r\n        bytes memory userData\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\r\n     */\r\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\r\n\r\n    // Asset Management\r\n    //\r\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\r\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\r\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\r\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\r\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\r\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\r\n    //\r\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\r\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\r\n    //\r\n    // This concept is unrelated to the IAsset interface.\r\n\r\n    /**\r\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\r\n     *\r\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\r\n     * operations of different kinds, with different Pools and tokens, at once.\r\n     *\r\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\r\n     */\r\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\r\n\r\n    struct PoolBalanceOp {\r\n        PoolBalanceOpKind kind;\r\n        bytes32 poolId;\r\n        IERC20 token;\r\n        uint256 amount;\r\n    }\r\n\r\n    /**\r\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\r\n     *\r\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\r\n     *\r\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\r\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\r\n     */\r\n    enum PoolBalanceOpKind { WITHDRAW, DEPOSIT, UPDATE }\r\n\r\n    /**\r\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\r\n     */\r\n    event PoolBalanceManaged(\r\n        bytes32 indexed poolId,\r\n        address indexed assetManager,\r\n        IERC20 indexed token,\r\n        int256 cashDelta,\r\n        int256 managedDelta\r\n    );\r\n\r\n    // Protocol Fees\r\n    //\r\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\r\n    // permissioned accounts.\r\n    //\r\n    // There are two kinds of protocol fees:\r\n    //\r\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\r\n    //\r\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\r\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\r\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\r\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\r\n    // exiting a Pool in debt without first paying their share.\r\n\r\n    /**\r\n     * @dev Returns the current protocol fee module.\r\n     */\r\n    function getProtocolFeesCollector() external view returns (ProtocolFeesCollector);\r\n\r\n    /**\r\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\r\n     * error in some part of the system.\r\n     *\r\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\r\n     *\r\n     * While the contract is paused, the following features are disabled:\r\n     * - depositing and transferring internal balance\r\n     * - transferring external balance (using the Vault's allowance)\r\n     * - swaps\r\n     * - joining Pools\r\n     * - Asset Manager interactions\r\n     *\r\n     * Internal Balance can still be withdrawn, and Pools exited.\r\n     */\r\n    function setPaused(bool paused) external;\r\n\r\n    /**\r\n     * @dev Returns the Vault's WETH instance.\r\n     */\r\n    function WETH() external view returns (IWETH);\r\n    // solhint-disable-previous-line func-name-mixedcase\r\n}\r\n\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n/**\r\n * @dev This an auxiliary contract to the Vault, deployed by it during construction. It offloads some of the tasks the\r\n * Vault performs to reduce its overall bytecode size.\r\n *\r\n * The current values for all protocol fee percentages are stored here, and any tokens charged as protocol fees are\r\n * sent to this contract, where they may be withdrawn by authorized entities. All authorization tasks are delegated\r\n * to the Vault's own authorizer.\r\n */\r\ncontract ProtocolFeesCollector is Authentication, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Absolute maximum fee percentages (1e18 = 100%, 1e16 = 1%).\r\n    uint256 private constant _MAX_PROTOCOL_SWAP_FEE_PERCENTAGE = 50e16; // 50%\r\n    uint256 private constant _MAX_PROTOCOL_FLASH_LOAN_FEE_PERCENTAGE = 1e16; // 1%\r\n\r\n    IVault public immutable vault;\r\n\r\n    // All fee percentages are 18-decimal fixed point numbers.\r\n\r\n    // The swap fee is charged whenever a swap occurs, as a percentage of the fee charged by the Pool. These are not\r\n    // actually charged on each individual swap: the `Vault` relies on the Pools being honest and reporting fees due\r\n    // when users join and exit them.\r\n    uint256 private _swapFeePercentage;\r\n\r\n    // The flash loan fee is charged whenever a flash loan occurs, as a percentage of the tokens lent.\r\n    uint256 private _flashLoanFeePercentage;\r\n\r\n    event SwapFeePercentageChanged(uint256 newSwapFeePercentage);\r\n    event FlashLoanFeePercentageChanged(uint256 newFlashLoanFeePercentage);\r\n\r\n    constructor(IVault _vault)\r\n        // The ProtocolFeesCollector is a singleton, so it simply uses its own address to disambiguate action\r\n        // identifiers.\r\n        Authentication(bytes32(uint256(address(this))))\r\n    {\r\n        vault = _vault;\r\n    }\r\n\r\n    function withdrawCollectedFees(\r\n        IERC20[] calldata tokens,\r\n        uint256[] calldata amounts,\r\n        address recipient\r\n    ) external nonReentrant authenticate {\r\n        InputHelpers.ensureInputLengthMatch(tokens.length, amounts.length);\r\n\r\n        for (uint256 i = 0; i < tokens.length; ++i) {\r\n            IERC20 token = tokens[i];\r\n            uint256 amount = amounts[i];\r\n            token.safeTransfer(recipient, amount);\r\n        }\r\n    }\r\n\r\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external authenticate {\r\n        _require(newSwapFeePercentage <= _MAX_PROTOCOL_SWAP_FEE_PERCENTAGE, Errors.SWAP_FEE_PERCENTAGE_TOO_HIGH);\r\n        _swapFeePercentage = newSwapFeePercentage;\r\n        emit SwapFeePercentageChanged(newSwapFeePercentage);\r\n    }\r\n\r\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external authenticate {\r\n        _require(\r\n            newFlashLoanFeePercentage <= _MAX_PROTOCOL_FLASH_LOAN_FEE_PERCENTAGE,\r\n            Errors.FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH\r\n        );\r\n        _flashLoanFeePercentage = newFlashLoanFeePercentage;\r\n        emit FlashLoanFeePercentageChanged(newFlashLoanFeePercentage);\r\n    }\r\n\r\n    function getSwapFeePercentage() external view returns (uint256) {\r\n        return _swapFeePercentage;\r\n    }\r\n\r\n    function getFlashLoanFeePercentage() external view returns (uint256) {\r\n        return _flashLoanFeePercentage;\r\n    }\r\n\r\n    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts) {\r\n        feeAmounts = new uint256[](tokens.length);\r\n        for (uint256 i = 0; i < tokens.length; ++i) {\r\n            feeAmounts[i] = tokens[i].balanceOf(address(this));\r\n        }\r\n    }\r\n\r\n    function getAuthorizer() external view returns (IAuthorizer) {\r\n        return _getAuthorizer();\r\n    }\r\n\r\n    function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {\r\n        return _getAuthorizer().canPerform(actionId, account, address(this));\r\n    }\r\n\r\n    function _getAuthorizer() internal view returns (IAuthorizer) {\r\n        return vault.getAuthorizer();\r\n    }\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/ProtocolFeesCollector.sol": {
				"Authentication": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "selector",
									"type": "bytes4"
								}
							],
							"name": "getActionId",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Building block for performing access control on external functions. This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be applied to external functions to only make them callable by authorized accounts. Derived contracts must implement the `_canPerform` function, which holds the actual access control logic.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in multi contract systems. There are two main uses for it:  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers    unique. The contract's own address is a good option.  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier    shared by the entire family (and no other contract) should be used instead."
							},
							"getActionId(bytes4)": {
								"details": "Returns the action identifier associated with the external function described by `selector`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getActionId(bytes4)": "851c1bb3"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Building block for performing access control on external functions. This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be applied to external functions to only make them callable by authorized accounts. Derived contracts must implement the `_canPerform` function, which holds the actual access control logic.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in multi contract systems. There are two main uses for it:  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers    unique. The contract's own address is a good option.  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier    shared by the entire family (and no other contract) should be used instead.\"},\"getActionId(bytes4)\":{\"details\":\"Returns the action identifier associated with the external function described by `selector`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProtocolFeesCollector.sol\":\"Authentication\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ProtocolFeesCollector.sol\":{\"keccak256\":\"0xdac768c449ca40770f677384249d0369b00520fd0c653de739378905f68e59c4\",\"urls\":[\"bzz-raw://eb83977cbd8d17f167d17dbdc15fb51c8e26e3f56707a65f9fbaca22b6844fde\",\"dweb:/ipfs/QmSmoRqshLHPM2S66Si19a7Ly8oKsZ4kPqTPfEq5Kbq5ps\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"Errors": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/ProtocolFeesCollector.sol\":5315:11318  library Errors {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ProtocolFeesCollector.sol\":5315:11318  library Errors {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212209d6558c889365e621f20e475f435c65cb4787a64fec0feaa17dec84c17d89bd664736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209d6558c889365e621f20e475f435c65cb4787a64fec0feaa17dec84c17d89bd664736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP14 PUSH6 0x58C889365E62 0x1F KECCAK256 0xE4 PUSH22 0xF435C65CB4787A64FEC0FEAA17DEC84C17D89BD66473 PUSH16 0x6C634300070600330000000000000000 ",
							"sourceMap": "5315:6003:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209d6558c889365e621f20e475f435c65cb4787a64fec0feaa17dec84c17d89bd664736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP14 PUSH6 0x58C889365E62 0x1F KECCAK256 0xE4 PUSH22 0xF435C65CB4787A64FEC0FEAA17DEC84C17D89BD66473 PUSH16 0x6C634300070600330000000000000000 ",
							"sourceMap": "5315:6003:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 5315,
									"end": 11318,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "INVALID",
									"source": 0
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 5315,
									"end": 11318,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212209d6558c889365e621f20e475f435c65cb4787a64fec0feaa17dec84c17d89bd664736f6c63430007060033",
									".code": [
										{
											"begin": 5315,
											"end": 11318,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 5315,
											"end": 11318,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 5315,
											"end": 11318,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 5315,
											"end": 11318,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 5315,
											"end": 11318,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5315,
											"end": 11318,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5315,
											"end": 11318,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 5315,
											"end": 11318,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5315,
											"end": 11318,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProtocolFeesCollector.sol\":\"Errors\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ProtocolFeesCollector.sol\":{\"keccak256\":\"0xdac768c449ca40770f677384249d0369b00520fd0c653de739378905f68e59c4\",\"urls\":[\"bzz-raw://eb83977cbd8d17f167d17dbdc15fb51c8e26e3f56707a65f9fbaca22b6844fde\",\"dweb:/ipfs/QmSmoRqshLHPM2S66Si19a7Ly8oKsZ4kPqTPfEq5Kbq5ps\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IAsset": {
					"abi": [],
					"devdoc": {
						"details": "This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like types. This concept is unrelated to a Pool's Asset Managers.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like types. This concept is unrelated to a Pool's Asset Managers.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProtocolFeesCollector.sol\":\"IAsset\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ProtocolFeesCollector.sol\":{\"keccak256\":\"0xdac768c449ca40770f677384249d0369b00520fd0c653de739378905f68e59c4\",\"urls\":[\"bzz-raw://eb83977cbd8d17f167d17dbdc15fb51c8e26e3f56707a65f9fbaca22b6844fde\",\"dweb:/ipfs/QmSmoRqshLHPM2S66Si19a7Ly8oKsZ4kPqTPfEq5Kbq5ps\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IAuthentication": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "selector",
									"type": "bytes4"
								}
							],
							"name": "getActionId",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"getActionId(bytes4)": {
								"details": "Returns the action identifier associated with the external function described by `selector`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getActionId(bytes4)": "851c1bb3"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getActionId(bytes4)\":{\"details\":\"Returns the action identifier associated with the external function described by `selector`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProtocolFeesCollector.sol\":\"IAuthentication\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ProtocolFeesCollector.sol\":{\"keccak256\":\"0xdac768c449ca40770f677384249d0369b00520fd0c653de739378905f68e59c4\",\"urls\":[\"bzz-raw://eb83977cbd8d17f167d17dbdc15fb51c8e26e3f56707a65f9fbaca22b6844fde\",\"dweb:/ipfs/QmSmoRqshLHPM2S66Si19a7Ly8oKsZ4kPqTPfEq5Kbq5ps\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IAuthorizer": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "actionId",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "where",
									"type": "address"
								}
							],
							"name": "canPerform",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"canPerform(bytes32,address,address)": {
								"details": "Returns true if `account` can perform the action described by `actionId` in the contract `where`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"canPerform(bytes32,address,address)": "9be2a884"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"}],\"name\":\"canPerform\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"canPerform(bytes32,address,address)\":{\"details\":\"Returns true if `account` can perform the action described by `actionId` in the contract `where`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProtocolFeesCollector.sol\":\"IAuthorizer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ProtocolFeesCollector.sol\":{\"keccak256\":\"0xdac768c449ca40770f677384249d0369b00520fd0c653de739378905f68e59c4\",\"urls\":[\"bzz-raw://eb83977cbd8d17f167d17dbdc15fb51c8e26e3f56707a65f9fbaca22b6844fde\",\"dweb:/ipfs/QmSmoRqshLHPM2S66Si19a7Ly8oKsZ4kPqTPfEq5Kbq5ps\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProtocolFeesCollector.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ProtocolFeesCollector.sol\":{\"keccak256\":\"0xdac768c449ca40770f677384249d0369b00520fd0c653de739378905f68e59c4\",\"urls\":[\"bzz-raw://eb83977cbd8d17f167d17dbdc15fb51c8e26e3f56707a65f9fbaca22b6844fde\",\"dweb:/ipfs/QmSmoRqshLHPM2S66Si19a7Ly8oKsZ4kPqTPfEq5Kbq5ps\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IFlashLoanRecipient": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "contract IERC20[]",
									"name": "tokens",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "amounts",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256[]",
									"name": "feeAmounts",
									"type": "uint256[]"
								},
								{
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								}
							],
							"name": "receiveFlashLoan",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"receiveFlashLoan(address[],uint256[],uint256[],bytes)": {
								"details": "When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient. At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the Vault, or else the entire flash loan will revert. `userData` is the same value passed in the `IVault.flashLoan` call."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"receiveFlashLoan(address[],uint256[],uint256[],bytes)": "f04f2707"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveFlashLoan(address[],uint256[],uint256[],bytes)\":{\"details\":\"When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient. At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the Vault, or else the entire flash loan will revert. `userData` is the same value passed in the `IVault.flashLoan` call.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProtocolFeesCollector.sol\":\"IFlashLoanRecipient\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ProtocolFeesCollector.sol\":{\"keccak256\":\"0xdac768c449ca40770f677384249d0369b00520fd0c653de739378905f68e59c4\",\"urls\":[\"bzz-raw://eb83977cbd8d17f167d17dbdc15fb51c8e26e3f56707a65f9fbaca22b6844fde\",\"dweb:/ipfs/QmSmoRqshLHPM2S66Si19a7Ly8oKsZ4kPqTPfEq5Kbq5ps\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"ISignaturesValidator": {
					"abi": [
						{
							"inputs": [],
							"name": "getDomainSeparator",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "getNextNonce",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the SignatureValidator helper, used to support meta-transactions.",
						"kind": "dev",
						"methods": {
							"getDomainSeparator()": {
								"details": "Returns the EIP712 domain separator."
							},
							"getNextNonce(address)": {
								"details": "Returns the next nonce used by an address to sign messages."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getDomainSeparator()": "ed24911d",
							"getNextNonce(address)": "90193b7c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the SignatureValidator helper, used to support meta-transactions.\",\"kind\":\"dev\",\"methods\":{\"getDomainSeparator()\":{\"details\":\"Returns the EIP712 domain separator.\"},\"getNextNonce(address)\":{\"details\":\"Returns the next nonce used by an address to sign messages.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProtocolFeesCollector.sol\":\"ISignaturesValidator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ProtocolFeesCollector.sol\":{\"keccak256\":\"0xdac768c449ca40770f677384249d0369b00520fd0c653de739378905f68e59c4\",\"urls\":[\"bzz-raw://eb83977cbd8d17f167d17dbdc15fb51c8e26e3f56707a65f9fbaca22b6844fde\",\"dweb:/ipfs/QmSmoRqshLHPM2S66Si19a7Ly8oKsZ4kPqTPfEq5Kbq5ps\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"ITemporarilyPausable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bool",
									"name": "paused",
									"type": "bool"
								}
							],
							"name": "PausedStateChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "getPausedState",
							"outputs": [
								{
									"internalType": "bool",
									"name": "paused",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "pauseWindowEndTime",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "bufferPeriodEndTime",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the TemporarilyPausable helper.",
						"events": {
							"PausedStateChanged(bool)": {
								"details": "Emitted every time the pause state changes by `_setPaused`."
							}
						},
						"kind": "dev",
						"methods": {
							"getPausedState()": {
								"details": "Returns the current paused state."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getPausedState()": "1c0de051"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PausedStateChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the TemporarilyPausable helper.\",\"events\":{\"PausedStateChanged(bool)\":{\"details\":\"Emitted every time the pause state changes by `_setPaused`.\"}},\"kind\":\"dev\",\"methods\":{\"getPausedState()\":{\"details\":\"Returns the current paused state.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProtocolFeesCollector.sol\":\"ITemporarilyPausable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ProtocolFeesCollector.sol\":{\"keccak256\":\"0xdac768c449ca40770f677384249d0369b00520fd0c653de739378905f68e59c4\",\"urls\":[\"bzz-raw://eb83977cbd8d17f167d17dbdc15fb51c8e26e3f56707a65f9fbaca22b6844fde\",\"dweb:/ipfs/QmSmoRqshLHPM2S66Si19a7Ly8oKsZ4kPqTPfEq5Kbq5ps\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IVault": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IAuthorizer",
									"name": "newAuthorizer",
									"type": "address"
								}
							],
							"name": "AuthorizerChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IERC20",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "ExternalBalanceTransfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract IFlashLoanRecipient",
									"name": "recipient",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "contract IERC20",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "feeAmount",
									"type": "uint256"
								}
							],
							"name": "FlashLoan",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "contract IERC20",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "delta",
									"type": "int256"
								}
							],
							"name": "InternalBalanceChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "bool",
									"name": "paused",
									"type": "bool"
								}
							],
							"name": "PausedStateChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "liquidityProvider",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "contract IERC20[]",
									"name": "tokens",
									"type": "address[]"
								},
								{
									"indexed": false,
									"internalType": "int256[]",
									"name": "deltas",
									"type": "int256[]"
								},
								{
									"indexed": false,
									"internalType": "uint256[]",
									"name": "protocolFeeAmounts",
									"type": "uint256[]"
								}
							],
							"name": "PoolBalanceChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "assetManager",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "contract IERC20",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "cashDelta",
									"type": "int256"
								},
								{
									"indexed": false,
									"internalType": "int256",
									"name": "managedDelta",
									"type": "int256"
								}
							],
							"name": "PoolBalanceManaged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "poolAddress",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "enum IVault.PoolSpecialization",
									"name": "specialization",
									"type": "uint8"
								}
							],
							"name": "PoolRegistered",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "relayer",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "RelayerApprovalChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "contract IERC20",
									"name": "tokenIn",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "contract IERC20",
									"name": "tokenOut",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"name": "Swap",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "contract IERC20[]",
									"name": "tokens",
									"type": "address[]"
								}
							],
							"name": "TokensDeregistered",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "contract IERC20[]",
									"name": "tokens",
									"type": "address[]"
								},
								{
									"indexed": false,
									"internalType": "address[]",
									"name": "assetManagers",
									"type": "address[]"
								}
							],
							"name": "TokensRegistered",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "WETH",
							"outputs": [
								{
									"internalType": "contract IWETH",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "enum IVault.SwapKind",
									"name": "kind",
									"type": "uint8"
								},
								{
									"components": [
										{
											"internalType": "bytes32",
											"name": "poolId",
											"type": "bytes32"
										},
										{
											"internalType": "uint256",
											"name": "assetInIndex",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "assetOutIndex",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "userData",
											"type": "bytes"
										}
									],
									"internalType": "struct IVault.BatchSwapStep[]",
									"name": "swaps",
									"type": "tuple[]"
								},
								{
									"internalType": "contract IAsset[]",
									"name": "assets",
									"type": "address[]"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "bool",
											"name": "fromInternalBalance",
											"type": "bool"
										},
										{
											"internalType": "address payable",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "bool",
											"name": "toInternalBalance",
											"type": "bool"
										}
									],
									"internalType": "struct IVault.FundManagement",
									"name": "funds",
									"type": "tuple"
								},
								{
									"internalType": "int256[]",
									"name": "limits",
									"type": "int256[]"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "batchSwap",
							"outputs": [
								{
									"internalType": "int256[]",
									"name": "",
									"type": "int256[]"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								},
								{
									"internalType": "contract IERC20[]",
									"name": "tokens",
									"type": "address[]"
								}
							],
							"name": "deregisterTokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address payable",
									"name": "recipient",
									"type": "address"
								},
								{
									"components": [
										{
											"internalType": "contract IAsset[]",
											"name": "assets",
											"type": "address[]"
										},
										{
											"internalType": "uint256[]",
											"name": "minAmountsOut",
											"type": "uint256[]"
										},
										{
											"internalType": "bytes",
											"name": "userData",
											"type": "bytes"
										},
										{
											"internalType": "bool",
											"name": "toInternalBalance",
											"type": "bool"
										}
									],
									"internalType": "struct IVault.ExitPoolRequest",
									"name": "request",
									"type": "tuple"
								}
							],
							"name": "exitPool",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IFlashLoanRecipient",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "contract IERC20[]",
									"name": "tokens",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "amounts",
									"type": "uint256[]"
								},
								{
									"internalType": "bytes",
									"name": "userData",
									"type": "bytes"
								}
							],
							"name": "flashLoan",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getAuthorizer",
							"outputs": [
								{
									"internalType": "contract IAuthorizer",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getDomainSeparator",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "contract IERC20[]",
									"name": "tokens",
									"type": "address[]"
								}
							],
							"name": "getInternalBalance",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "getNextNonce",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getPausedState",
							"outputs": [
								{
									"internalType": "bool",
									"name": "paused",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "pauseWindowEndTime",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "bufferPeriodEndTime",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								}
							],
							"name": "getPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "enum IVault.PoolSpecialization",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								},
								{
									"internalType": "contract IERC20",
									"name": "token",
									"type": "address"
								}
							],
							"name": "getPoolTokenInfo",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "cash",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "managed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "lastChangeBlock",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "assetManager",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								}
							],
							"name": "getPoolTokens",
							"outputs": [
								{
									"internalType": "contract IERC20[]",
									"name": "tokens",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "balances",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256",
									"name": "lastChangeBlock",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getProtocolFeesCollector",
							"outputs": [
								{
									"internalType": "contract ProtocolFeesCollector",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "relayer",
									"type": "address"
								}
							],
							"name": "hasApprovedRelayer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"components": [
										{
											"internalType": "contract IAsset[]",
											"name": "assets",
											"type": "address[]"
										},
										{
											"internalType": "uint256[]",
											"name": "maxAmountsIn",
											"type": "uint256[]"
										},
										{
											"internalType": "bytes",
											"name": "userData",
											"type": "bytes"
										},
										{
											"internalType": "bool",
											"name": "fromInternalBalance",
											"type": "bool"
										}
									],
									"internalType": "struct IVault.JoinPoolRequest",
									"name": "request",
									"type": "tuple"
								}
							],
							"name": "joinPool",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "enum IVault.PoolBalanceOpKind",
											"name": "kind",
											"type": "uint8"
										},
										{
											"internalType": "bytes32",
											"name": "poolId",
											"type": "bytes32"
										},
										{
											"internalType": "contract IERC20",
											"name": "token",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amount",
											"type": "uint256"
										}
									],
									"internalType": "struct IVault.PoolBalanceOp[]",
									"name": "ops",
									"type": "tuple[]"
								}
							],
							"name": "managePoolBalance",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "enum IVault.UserBalanceOpKind",
											"name": "kind",
											"type": "uint8"
										},
										{
											"internalType": "contract IAsset",
											"name": "asset",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amount",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "address payable",
											"name": "recipient",
											"type": "address"
										}
									],
									"internalType": "struct IVault.UserBalanceOp[]",
									"name": "ops",
									"type": "tuple[]"
								}
							],
							"name": "manageUserBalance",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "enum IVault.SwapKind",
									"name": "kind",
									"type": "uint8"
								},
								{
									"components": [
										{
											"internalType": "bytes32",
											"name": "poolId",
											"type": "bytes32"
										},
										{
											"internalType": "uint256",
											"name": "assetInIndex",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "assetOutIndex",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "amount",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "userData",
											"type": "bytes"
										}
									],
									"internalType": "struct IVault.BatchSwapStep[]",
									"name": "swaps",
									"type": "tuple[]"
								},
								{
									"internalType": "contract IAsset[]",
									"name": "assets",
									"type": "address[]"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "bool",
											"name": "fromInternalBalance",
											"type": "bool"
										},
										{
											"internalType": "address payable",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "bool",
											"name": "toInternalBalance",
											"type": "bool"
										}
									],
									"internalType": "struct IVault.FundManagement",
									"name": "funds",
									"type": "tuple"
								}
							],
							"name": "queryBatchSwap",
							"outputs": [
								{
									"internalType": "int256[]",
									"name": "assetDeltas",
									"type": "int256[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "enum IVault.PoolSpecialization",
									"name": "specialization",
									"type": "uint8"
								}
							],
							"name": "registerPool",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "poolId",
									"type": "bytes32"
								},
								{
									"internalType": "contract IERC20[]",
									"name": "tokens",
									"type": "address[]"
								},
								{
									"internalType": "address[]",
									"name": "assetManagers",
									"type": "address[]"
								}
							],
							"name": "registerTokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IAuthorizer",
									"name": "newAuthorizer",
									"type": "address"
								}
							],
							"name": "setAuthorizer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "paused",
									"type": "bool"
								}
							],
							"name": "setPaused",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "relayer",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setRelayerApproval",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes32",
											"name": "poolId",
											"type": "bytes32"
										},
										{
											"internalType": "enum IVault.SwapKind",
											"name": "kind",
											"type": "uint8"
										},
										{
											"internalType": "contract IAsset",
											"name": "assetIn",
											"type": "address"
										},
										{
											"internalType": "contract IAsset",
											"name": "assetOut",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "amount",
											"type": "uint256"
										},
										{
											"internalType": "bytes",
											"name": "userData",
											"type": "bytes"
										}
									],
									"internalType": "struct IVault.SingleSwap",
									"name": "singleSwap",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "sender",
											"type": "address"
										},
										{
											"internalType": "bool",
											"name": "fromInternalBalance",
											"type": "bool"
										},
										{
											"internalType": "address payable",
											"name": "recipient",
											"type": "address"
										},
										{
											"internalType": "bool",
											"name": "toInternalBalance",
											"type": "bool"
										}
									],
									"internalType": "struct IVault.FundManagement",
									"name": "funds",
									"type": "tuple"
								},
								{
									"internalType": "uint256",
									"name": "limit",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "swap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Full external interface for the Vault core contract - no external or public methods exist in the contract that don't override one of these declarations.",
						"events": {
							"AuthorizerChanged(address)": {
								"details": "Emitted when a new authorizer is set by `setAuthorizer`."
							},
							"ExternalBalanceTransfer(address,address,address,uint256)": {
								"details": "Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account."
							},
							"FlashLoan(address,address,uint256,uint256)": {
								"details": "Emitted for each individual flash loan performed by `flashLoan`."
							},
							"InternalBalanceChanged(address,address,int256)": {
								"details": "Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through interacting with Pools using Internal Balance. Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH address."
							},
							"PoolBalanceChanged(bytes32,address,address[],int256[],uint256[])": {
								"details": "Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively."
							},
							"PoolBalanceManaged(bytes32,address,address,int256,int256)": {
								"details": "Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`."
							},
							"PoolRegistered(bytes32,address,uint8)": {
								"details": "Emitted when a Pool is registered by calling `registerPool`."
							},
							"RelayerApprovalChanged(address,address,bool)": {
								"details": "Emitted every time a relayer is approved or disapproved by `setRelayerApproval`."
							},
							"Swap(bytes32,address,address,uint256,uint256)": {
								"details": "Emitted for each individual swap performed by `swap` or `batchSwap`."
							},
							"TokensDeregistered(bytes32,address[])": {
								"details": "Emitted when a Pool deregisters tokens by calling `deregisterTokens`."
							},
							"TokensRegistered(bytes32,address[],address[])": {
								"details": "Emitted when a Pool registers tokens by calling `registerTokens`."
							}
						},
						"kind": "dev",
						"methods": {
							"WETH()": {
								"details": "Returns the Vault's WETH instance."
							},
							"batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)": {
								"details": "Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either the amount of tokens sent to or received from the Pool, depending on the `kind` value. Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array. Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or `amountOut` depending on the swap kind. Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`. The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses, or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault. Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies the minimum or maximum amount of each token the vault is allowed to transfer. `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the equivalent `swap` call. Emits `Swap` events."
							},
							"deregisterTokens(bytes32,address[])": {
								"details": "Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be deregistered in the same `deregisterTokens` call. A deregistered token can be re-registered later on, possibly with a different Asset Manager. Emits a `TokensDeregistered` event."
							},
							"exitPool(bytes32,address,address,(address[],uint256[],bytes,bool))": {
								"details": "Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see `getPoolTokenInfo`). If the caller is not `sender`, it must be an authorized relayer for them. The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault: it just enforces these minimums. If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit. `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be exited. If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise, an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to do so will trigger a revert. `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the `tokens` array. This array must match the Pool's registered tokens. This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract. Emits a `PoolBalanceChanged` event."
							},
							"flashLoan(address,address[],uint256[],bytes)": {
								"details": "Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it, and then reverting unless the tokens plus a proportional protocol fee have been returned. The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount for each token contract. `tokens` must be sorted in ascending order. The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the `receiveFlashLoan` call. Emits `FlashLoan` events."
							},
							"getAuthorizer()": {
								"details": "Returns the Vault's Authorizer."
							},
							"getDomainSeparator()": {
								"details": "Returns the EIP712 domain separator."
							},
							"getInternalBalance(address,address[])": {
								"details": "Returns `user`'s Internal Balance for a set of tokens."
							},
							"getNextNonce(address)": {
								"details": "Returns the next nonce used by an address to sign messages."
							},
							"getPausedState()": {
								"details": "Returns the current paused state."
							},
							"getPool(bytes32)": {
								"details": "Returns a Pool's contract address and specialization setting."
							},
							"getPoolTokenInfo(bytes32,address)": {
								"details": "Returns detailed information for a Pool's registered token. `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token` equals the sum of `cash` and `managed`. Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`, `managed` or `total` balance to be greater than 2^112 - 1. `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a change for this purpose, and will update `lastChangeBlock`. `assetManager` is the Pool's token Asset Manager."
							},
							"getPoolTokens(bytes32)": {
								"details": "Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of the tokens' `balances` changed. The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order. If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same order as passed to `registerTokens`. Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo` instead."
							},
							"getProtocolFeesCollector()": {
								"details": "Returns the current protocol fee module."
							},
							"hasApprovedRelayer(address,address)": {
								"details": "Returns true if `user` has approved `relayer` to act as a relayer for them."
							},
							"joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))": {
								"details": "Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized Pool shares. If the caller is not `sender`, it must be an authorized relayer for them. The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces these maximums. If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent back to the caller (not the sender, which is important for relayers). `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be joined. If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be withdrawn from Internal Balance: attempting to do so will trigger a revert. This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract, as is `recipient`. Emits a `PoolBalanceChanged` event."
							},
							"managePoolBalance((uint8,bytes32,address,uint256)[])": {
								"details": "Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates. Pool Balance management features batching, which means a single contract call can be used to perform multiple operations of different kinds, with different Pools and tokens, at once. For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`."
							},
							"manageUserBalance((uint8,address,uint256,address,address)[])": {
								"details": "Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer) and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as it lets integrators reuse a user's Vault allowance. For each operation, if the caller is not `sender`, it must be an authorized relayer for them."
							},
							"queryBatchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool))": {
								"details": "Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result. Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH) the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it receives are the same that an equivalent `batchSwap` call would receive. Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct. This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens, approve them for the Vault, or even know a user's address. Note that this function is not 'view' (due to implementation details): the client code must explicitly execute eth_call instead of eth_sendTransaction."
							},
							"registerPool(uint8)": {
								"details": "Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be changed. The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`, depending on the chosen specialization setting. This contract is known as the Pool's contract. Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words, multiple Pools may share the same contract. Emits a `PoolRegistered` event."
							},
							"registerTokens(bytes32,address[],address[])": {
								"details": "Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens, exit by receiving registered tokens, and can only swap registered tokens. Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in ascending order. The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`, depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore expected to be highly secured smart contracts with sound design principles, and the decision to register an Asset Manager should not be made lightly. Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset Manager is set, it cannot be changed except by deregistering the associated token and registering again with a different Asset Manager. Emits a `TokensRegistered` event."
							},
							"setAuthorizer(address)": {
								"details": "Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this. Emits an `AuthorizerChanged` event."
							},
							"setPaused(bool)": {
								"details": "Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an error in some part of the system. The Vault can only be paused during an initial time period, after which pausing is forever disabled. While the contract is paused, the following features are disabled: - depositing and transferring internal balance - transferring external balance (using the Vault's allowance) - swaps - joining Pools - Asset Manager interactions Internal Balance can still be withdrawn, and Pools exited."
							},
							"setRelayerApproval(address,address,bool)": {
								"details": "Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise. Emits a `RelayerApprovalChanged` event."
							},
							"swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)": {
								"details": "Performs a swap with a single Pool. If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens taken from the Pool, which must be greater than or equal to `limit`. If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens sent to the Pool, which must be less than or equal to `limit`. Internal Balance usage and the recipient are determined by the `funds` struct. Emits a `Swap` event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"WETH()": "ad5c4648",
							"batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)": "945bcec9",
							"deregisterTokens(bytes32,address[])": "7d3aeb96",
							"exitPool(bytes32,address,address,(address[],uint256[],bytes,bool))": "8bdb3913",
							"flashLoan(address,address[],uint256[],bytes)": "5c38449e",
							"getAuthorizer()": "aaabadc5",
							"getDomainSeparator()": "ed24911d",
							"getInternalBalance(address,address[])": "0f5a6efa",
							"getNextNonce(address)": "90193b7c",
							"getPausedState()": "1c0de051",
							"getPool(bytes32)": "f6c00927",
							"getPoolTokenInfo(bytes32,address)": "b05f8e48",
							"getPoolTokens(bytes32)": "f94d4668",
							"getProtocolFeesCollector()": "d2946c2b",
							"hasApprovedRelayer(address,address)": "fec90d72",
							"joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))": "b95cac28",
							"managePoolBalance((uint8,bytes32,address,uint256)[])": "e6c46092",
							"manageUserBalance((uint8,address,uint256,address,address)[])": "0e8e3e84",
							"queryBatchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool))": "f84d066e",
							"registerPool(uint8)": "09b2760f",
							"registerTokens(bytes32,address[],address[])": "66a9c7d2",
							"setAuthorizer(address)": "058a628f",
							"setPaused(bool)": "16c38b3c",
							"setRelayerApproval(address,address,bool)": "fa6e671d",
							"swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)": "52bbbe29"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"AuthorizerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExternalBalanceTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IFlashLoanRecipient\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"name\":\"InternalBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"deltas\",\"type\":\"int256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"protocolFeeAmounts\",\"type\":\"uint256[]\"}],\"name\":\"PoolBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cashDelta\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"managedDelta\",\"type\":\"int256\"}],\"name\":\"PoolBalanceManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IVault.PoolSpecialization\",\"name\":\"specialization\",\"type\":\"uint8\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"RelayerApprovalChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"TokensDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assetManagers\",\"type\":\"address[]\"}],\"name\":\"TokensRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"int256[]\",\"name\":\"limits\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"batchSwap\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"deregisterTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.ExitPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"exitPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFlashLoanRecipient\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getInternalBalance\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IVault.PoolSpecialization\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolTokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetManager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeesCollector\",\"outputs\":[{\"internalType\":\"contract ProtocolFeesCollector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"hasApprovedRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.JoinPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IVault.PoolBalanceOpKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.PoolBalanceOp[]\",\"name\":\"ops\",\"type\":\"tuple[]\"}],\"name\":\"managePoolBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IVault.UserBalanceOpKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IAsset\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct IVault.UserBalanceOp[]\",\"name\":\"ops\",\"type\":\"tuple[]\"}],\"name\":\"manageUserBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"}],\"name\":\"queryBatchSwap\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"assetDeltas\",\"type\":\"int256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IVault.PoolSpecialization\",\"name\":\"specialization\",\"type\":\"uint8\"}],\"name\":\"registerPool\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"assetManagers\",\"type\":\"address[]\"}],\"name\":\"registerTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"setAuthorizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setRelayerApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IAsset\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"contract IAsset\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.SingleSwap\",\"name\":\"singleSwap\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Full external interface for the Vault core contract - no external or public methods exist in the contract that don't override one of these declarations.\",\"events\":{\"AuthorizerChanged(address)\":{\"details\":\"Emitted when a new authorizer is set by `setAuthorizer`.\"},\"ExternalBalanceTransfer(address,address,address,uint256)\":{\"details\":\"Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\"},\"FlashLoan(address,address,uint256,uint256)\":{\"details\":\"Emitted for each individual flash loan performed by `flashLoan`.\"},\"InternalBalanceChanged(address,address,int256)\":{\"details\":\"Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through interacting with Pools using Internal Balance. Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH address.\"},\"PoolBalanceChanged(bytes32,address,address[],int256[],uint256[])\":{\"details\":\"Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\"},\"PoolBalanceManaged(bytes32,address,address,int256,int256)\":{\"details\":\"Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\"},\"PoolRegistered(bytes32,address,uint8)\":{\"details\":\"Emitted when a Pool is registered by calling `registerPool`.\"},\"RelayerApprovalChanged(address,address,bool)\":{\"details\":\"Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\"},\"Swap(bytes32,address,address,uint256,uint256)\":{\"details\":\"Emitted for each individual swap performed by `swap` or `batchSwap`.\"},\"TokensDeregistered(bytes32,address[])\":{\"details\":\"Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\"},\"TokensRegistered(bytes32,address[],address[])\":{\"details\":\"Emitted when a Pool registers tokens by calling `registerTokens`.\"}},\"kind\":\"dev\",\"methods\":{\"WETH()\":{\"details\":\"Returns the Vault's WETH instance.\"},\"batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)\":{\"details\":\"Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either the amount of tokens sent to or received from the Pool, depending on the `kind` value. Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array. Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or `amountOut` depending on the swap kind. Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`. The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses, or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault. Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies the minimum or maximum amount of each token the vault is allowed to transfer. `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the equivalent `swap` call. Emits `Swap` events.\"},\"deregisterTokens(bytes32,address[])\":{\"details\":\"Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be deregistered in the same `deregisterTokens` call. A deregistered token can be re-registered later on, possibly with a different Asset Manager. Emits a `TokensDeregistered` event.\"},\"exitPool(bytes32,address,address,(address[],uint256[],bytes,bool))\":{\"details\":\"Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see `getPoolTokenInfo`). If the caller is not `sender`, it must be an authorized relayer for them. The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault: it just enforces these minimums. If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit. `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be exited. If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise, an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to do so will trigger a revert. `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the `tokens` array. This array must match the Pool's registered tokens. This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract. Emits a `PoolBalanceChanged` event.\"},\"flashLoan(address,address[],uint256[],bytes)\":{\"details\":\"Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it, and then reverting unless the tokens plus a proportional protocol fee have been returned. The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount for each token contract. `tokens` must be sorted in ascending order. The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the `receiveFlashLoan` call. Emits `FlashLoan` events.\"},\"getAuthorizer()\":{\"details\":\"Returns the Vault's Authorizer.\"},\"getDomainSeparator()\":{\"details\":\"Returns the EIP712 domain separator.\"},\"getInternalBalance(address,address[])\":{\"details\":\"Returns `user`'s Internal Balance for a set of tokens.\"},\"getNextNonce(address)\":{\"details\":\"Returns the next nonce used by an address to sign messages.\"},\"getPausedState()\":{\"details\":\"Returns the current paused state.\"},\"getPool(bytes32)\":{\"details\":\"Returns a Pool's contract address and specialization setting.\"},\"getPoolTokenInfo(bytes32,address)\":{\"details\":\"Returns detailed information for a Pool's registered token. `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token` equals the sum of `cash` and `managed`. Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`, `managed` or `total` balance to be greater than 2^112 - 1. `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a change for this purpose, and will update `lastChangeBlock`. `assetManager` is the Pool's token Asset Manager.\"},\"getPoolTokens(bytes32)\":{\"details\":\"Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of the tokens' `balances` changed. The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order. If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same order as passed to `registerTokens`. Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo` instead.\"},\"getProtocolFeesCollector()\":{\"details\":\"Returns the current protocol fee module.\"},\"hasApprovedRelayer(address,address)\":{\"details\":\"Returns true if `user` has approved `relayer` to act as a relayer for them.\"},\"joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))\":{\"details\":\"Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized Pool shares. If the caller is not `sender`, it must be an authorized relayer for them. The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces these maximums. If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent back to the caller (not the sender, which is important for relayers). `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be joined. If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be withdrawn from Internal Balance: attempting to do so will trigger a revert. This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract, as is `recipient`. Emits a `PoolBalanceChanged` event.\"},\"managePoolBalance((uint8,bytes32,address,uint256)[])\":{\"details\":\"Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates. Pool Balance management features batching, which means a single contract call can be used to perform multiple operations of different kinds, with different Pools and tokens, at once. For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\"},\"manageUserBalance((uint8,address,uint256,address,address)[])\":{\"details\":\"Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer) and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as it lets integrators reuse a user's Vault allowance. For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\"},\"queryBatchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool))\":{\"details\":\"Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result. Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH) the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it receives are the same that an equivalent `batchSwap` call would receive. Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct. This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens, approve them for the Vault, or even know a user's address. Note that this function is not 'view' (due to implementation details): the client code must explicitly execute eth_call instead of eth_sendTransaction.\"},\"registerPool(uint8)\":{\"details\":\"Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be changed. The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`, depending on the chosen specialization setting. This contract is known as the Pool's contract. Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words, multiple Pools may share the same contract. Emits a `PoolRegistered` event.\"},\"registerTokens(bytes32,address[],address[])\":{\"details\":\"Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens, exit by receiving registered tokens, and can only swap registered tokens. Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in ascending order. The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`, depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore expected to be highly secured smart contracts with sound design principles, and the decision to register an Asset Manager should not be made lightly. Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset Manager is set, it cannot be changed except by deregistering the associated token and registering again with a different Asset Manager. Emits a `TokensRegistered` event.\"},\"setAuthorizer(address)\":{\"details\":\"Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this. Emits an `AuthorizerChanged` event.\"},\"setPaused(bool)\":{\"details\":\"Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an error in some part of the system. The Vault can only be paused during an initial time period, after which pausing is forever disabled. While the contract is paused, the following features are disabled: - depositing and transferring internal balance - transferring external balance (using the Vault's allowance) - swaps - joining Pools - Asset Manager interactions Internal Balance can still be withdrawn, and Pools exited.\"},\"setRelayerApproval(address,address,bool)\":{\"details\":\"Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise. Emits a `RelayerApprovalChanged` event.\"},\"swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)\":{\"details\":\"Performs a swap with a single Pool. If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens taken from the Pool, which must be greater than or equal to `limit`. If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens sent to the Pool, which must be less than or equal to `limit`. Internal Balance usage and the recipient are determined by the `funds` struct. Emits a `Swap` event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProtocolFeesCollector.sol\":\"IVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ProtocolFeesCollector.sol\":{\"keccak256\":\"0xdac768c449ca40770f677384249d0369b00520fd0c653de739378905f68e59c4\",\"urls\":[\"bzz-raw://eb83977cbd8d17f167d17dbdc15fb51c8e26e3f56707a65f9fbaca22b6844fde\",\"dweb:/ipfs/QmSmoRqshLHPM2S66Si19a7Ly8oKsZ4kPqTPfEq5Kbq5ps\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IWETH": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "deposit",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the WETH token contract used internally for wrapping and unwrapping, to support sending and receiving ETH in joins, swaps, and internal balance deposits and withdrawals.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"deposit()": "d0e30db0",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256)": "2e1a7d4d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the WETH token contract used internally for wrapping and unwrapping, to support sending and receiving ETH in joins, swaps, and internal balance deposits and withdrawals.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProtocolFeesCollector.sol\":\"IWETH\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ProtocolFeesCollector.sol\":{\"keccak256\":\"0xdac768c449ca40770f677384249d0369b00520fd0c653de739378905f68e59c4\",\"urls\":[\"bzz-raw://eb83977cbd8d17f167d17dbdc15fb51c8e26e3f56707a65f9fbaca22b6844fde\",\"dweb:/ipfs/QmSmoRqshLHPM2S66Si19a7Ly8oKsZ4kPqTPfEq5Kbq5ps\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"InputHelpers": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/ProtocolFeesCollector.sol\":22837:24168  library InputHelpers {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ProtocolFeesCollector.sol\":22837:24168  library InputHelpers {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212207032a2cec9dd2083f98a15baf3534bdccda689005d8416064e01b871c5ca196464736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207032a2cec9dd2083f98a15baf3534bdccda689005d8416064e01b871c5ca196464736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH17 0x32A2CEC9DD2083F98A15BAF3534BDCCDA6 DUP10 STOP 0x5D DUP5 AND MOD 0x4E ADD 0xB8 PUSH18 0xC5CA196464736F6C63430007060033000000 ",
							"sourceMap": "22837:1331:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207032a2cec9dd2083f98a15baf3534bdccda689005d8416064e01b871c5ca196464736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH17 0x32A2CEC9DD2083F98A15BAF3534BDCCDA6 DUP10 STOP 0x5D DUP5 AND MOD 0x4E ADD 0xB8 PUSH18 0xC5CA196464736F6C63430007060033000000 ",
							"sourceMap": "22837:1331:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"ensureArrayIsSorted(address[] memory)": "infinite",
								"ensureArrayIsSorted(contract IAsset[] memory)": "infinite",
								"ensureArrayIsSorted(contract IERC20[] memory)": "infinite",
								"ensureInputLengthMatch(uint256,uint256)": "infinite",
								"ensureInputLengthMatch(uint256,uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 22837,
									"end": 24168,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "INVALID",
									"source": 0
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 22837,
									"end": 24168,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212207032a2cec9dd2083f98a15baf3534bdccda689005d8416064e01b871c5ca196464736f6c63430007060033",
									".code": [
										{
											"begin": 22837,
											"end": 24168,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 22837,
											"end": 24168,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 22837,
											"end": 24168,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 22837,
											"end": 24168,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 22837,
											"end": 24168,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 22837,
											"end": 24168,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 22837,
											"end": 24168,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 22837,
											"end": 24168,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 22837,
											"end": 24168,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProtocolFeesCollector.sol\":\"InputHelpers\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ProtocolFeesCollector.sol\":{\"keccak256\":\"0xdac768c449ca40770f677384249d0369b00520fd0c653de739378905f68e59c4\",\"urls\":[\"bzz-raw://eb83977cbd8d17f167d17dbdc15fb51c8e26e3f56707a65f9fbaca22b6844fde\",\"dweb:/ipfs/QmSmoRqshLHPM2S66Si19a7Ly8oKsZ4kPqTPfEq5Kbq5ps\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"ProtocolFeesCollector": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "contract IVault",
									"name": "_vault",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "newFlashLoanFeePercentage",
									"type": "uint256"
								}
							],
							"name": "FlashLoanFeePercentageChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "newSwapFeePercentage",
									"type": "uint256"
								}
							],
							"name": "SwapFeePercentageChanged",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "selector",
									"type": "bytes4"
								}
							],
							"name": "getActionId",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getAuthorizer",
							"outputs": [
								{
									"internalType": "contract IAuthorizer",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC20[]",
									"name": "tokens",
									"type": "address[]"
								}
							],
							"name": "getCollectedFeeAmounts",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "feeAmounts",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getFlashLoanFeePercentage",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getSwapFeePercentage",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "newFlashLoanFeePercentage",
									"type": "uint256"
								}
							],
							"name": "setFlashLoanFeePercentage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "newSwapFeePercentage",
									"type": "uint256"
								}
							],
							"name": "setSwapFeePercentage",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "vault",
							"outputs": [
								{
									"internalType": "contract IVault",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC20[]",
									"name": "tokens",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "amounts",
									"type": "uint256[]"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								}
							],
							"name": "withdrawCollectedFees",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "This an auxiliary contract to the Vault, deployed by it during construction. It offloads some of the tasks the Vault performs to reduce its overall bytecode size. The current values for all protocol fee percentages are stored here, and any tokens charged as protocol fees are sent to this contract, where they may be withdrawn by authorized entities. All authorization tasks are delegated to the Vault's own authorizer.",
						"kind": "dev",
						"methods": {
							"getActionId(bytes4)": {
								"details": "Returns the action identifier associated with the external function described by `selector`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/ProtocolFeesCollector.sol\":62773:66266  contract ProtocolFeesCollector is Authentication, ReentrancyGuard {\r... */\n  mstore(0x40, 0xc0)\n    /* \"contracts/ProtocolFeesCollector.sol\":63834:64092  constructor(IVault _vault)\r... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"contracts/ProtocolFeesCollector.sol\":64045:64049  this */\n  address\n    /* \"contracts/ProtocolFeesCollector.sol\":21693:21739  _actionIdDisambiguator = actionIdDisambiguator */\n  0x80\n  mstore\n    /* \"contracts/ProtocolFeesCollector.sol\":19350:19351  1 */\n  0x01\n    /* \"contracts/ProtocolFeesCollector.sol\":64021:64052  bytes32(uint256(address(this))) */\n  0x00\n    /* \"contracts/ProtocolFeesCollector.sol\":19461:19483  _status = _NOT_ENTERED */\n  sstore\n    /* \"contracts/ProtocolFeesCollector.sol\":64070:64084  vault = _vault */\n  0x60\n  shl\n  not(sub(shl(0x60, 0x01), 0x01))\n  and\n  0xa0\n  mstore\n    /* \"contracts/ProtocolFeesCollector.sol\":62773:66266  contract ProtocolFeesCollector is Authentication, ReentrancyGuard {\r... */\n  jump(tag_11)\n    /* \"#utility.yul\":14:339   */\ntag_3:\n  0x00\n    /* \"#utility.yul\":152:154   */\n  0x20\n    /* \"#utility.yul\":140:149   */\n  dup3\n    /* \"#utility.yul\":131:138   */\n  dup5\n    /* \"#utility.yul\":127:150   */\n  sub\n    /* \"#utility.yul\":123:155   */\n  slt\n    /* \"#utility.yul\":120:122   */\n  iszero\n  tag_13\n  jumpi\n    /* \"#utility.yul\":173:179   */\n  dup1\n    /* \"#utility.yul\":165:171   */\n  dup2\n    /* \"#utility.yul\":158:180   */\n  revert\n    /* \"#utility.yul\":120:122   */\ntag_13:\n    /* \"#utility.yul\":204:220   */\n  dup2\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":249:280   */\n  dup2\n  and\n    /* \"#utility.yul\":239:281   */\n  dup2\n  eq\n    /* \"#utility.yul\":229:231   */\n  tag_14\n  jumpi\n    /* \"#utility.yul\":300:306   */\n  dup2\n    /* \"#utility.yul\":292:298   */\n  dup3\n    /* \"#utility.yul\":285:307   */\n  revert\n    /* \"#utility.yul\":229:231   */\ntag_14:\n    /* \"#utility.yul\":328:333   */\n  swap4\n    /* \"#utility.yul\":110:339   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\ntag_11:\n    /* \"contracts/ProtocolFeesCollector.sol\":62773:66266  contract ProtocolFeesCollector is Authentication, ReentrancyGuard {\r... */\n  mload(0x80)\n  shr(0x60, mload(0xa0))\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  assignImmutable(\"0x0996217b5bd56d5d4e65aa105bb02b59e7c2556b5b3d7f7f3baaee6777207758\")\n  assignImmutable(\"0xf38bdce81e91f313b4d1f0179658920986116b82d6e9b2b562ef1b7598dd1e51\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"contracts/ProtocolFeesCollector.sol\":62773:66266  contract ProtocolFeesCollector is Authentication, ReentrancyGuard {\r... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x851c1bb3\n      gt\n      tag_12\n      jumpi\n      dup1\n      0x851c1bb3\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xaaabadc5\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xd877845c\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xe42abf35\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xfbfa77cf\n      eq\n      tag_11\n      jumpi\n      jump(tag_2)\n    tag_12:\n      dup1\n      0x38e9922e\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x55c67628\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x6b6b9f69\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x6daefab6\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/ProtocolFeesCollector.sol\":64567:64886  function setSwapFeePercentage(uint256 newSwapFeePercentage) external authenticate {\r... */\n    tag_3:\n      tag_13\n      tag_14\n      calldatasize\n      0x04\n      tag_15\n      jump\t// in\n    tag_14:\n      tag_16\n      jump\t// in\n    tag_13:\n      stop\n        /* \"contracts/ProtocolFeesCollector.sol\":65305:65413  function getSwapFeePercentage() external view returns (uint256) {\r... */\n    tag_4:\n      tag_17\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      tag_19\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_19:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ProtocolFeesCollector.sol\":64894:65297  function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external authenticate {\r... */\n    tag_5:\n      tag_13\n      tag_22\n      calldatasize\n      0x04\n      tag_15\n      jump\t// in\n    tag_22:\n      tag_23\n      jump\t// in\n        /* \"contracts/ProtocolFeesCollector.sol\":64100:64559  function withdrawCollectedFees(\r... */\n    tag_6:\n      tag_13\n      tag_25\n      calldatasize\n      0x04\n      tag_26\n      jump\t// in\n    tag_25:\n      tag_27\n      jump\t// in\n        /* \"contracts/ProtocolFeesCollector.sol\":22270:22705  function getActionId(bytes4 selector) public view override returns (bytes32) {\r... */\n    tag_7:\n      tag_17\n      tag_29\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_29:\n      tag_31\n      jump\t// in\n        /* \"contracts/ProtocolFeesCollector.sol\":65854:65957  function getAuthorizer() external view returns (IAuthorizer) {\r... */\n    tag_8:\n      tag_34\n      tag_35\n      jump\t// in\n    tag_34:\n      mload(0x40)\n      tag_19\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n        /* \"contracts/ProtocolFeesCollector.sol\":65421:65539  function getFlashLoanFeePercentage() external view returns (uint256) {\r... */\n    tag_9:\n      tag_17\n      tag_39\n      jump\t// in\n        /* \"contracts/ProtocolFeesCollector.sol\":65547:65846  function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts) {\r... */\n    tag_10:\n      tag_41\n      tag_42\n      calldatasize\n      0x04\n      tag_43\n      jump\t// in\n    tag_42:\n      tag_44\n      jump\t// in\n    tag_41:\n      mload(0x40)\n      tag_19\n      swap2\n      swap1\n      tag_46\n      jump\t// in\n        /* \"contracts/ProtocolFeesCollector.sol\":63114:63143  IVault public immutable vault */\n    tag_11:\n      tag_34\n      tag_48\n      jump\t// in\n        /* \"contracts/ProtocolFeesCollector.sol\":64567:64886  function setSwapFeePercentage(uint256 newSwapFeePercentage) external authenticate {\r... */\n    tag_16:\n        /* \"contracts/ProtocolFeesCollector.sol\":21927:21948  _authenticateCaller() */\n      tag_52\n        /* \"contracts/ProtocolFeesCollector.sol\":21927:21946  _authenticateCaller */\n      tag_53\n        /* \"contracts/ProtocolFeesCollector.sol\":21927:21948  _authenticateCaller() */\n      jump\t// in\n    tag_52:\n        /* \"contracts/ProtocolFeesCollector.sol\":64660:64764  _require(newSwapFeePercentage <= _MAX_PROTOCOL_SWAP_FEE_PERCENTAGE, Errors.SWAP_FEE_PERCENTAGE_TOO_HIGH) */\n      tag_55\n        /* \"contracts/ProtocolFeesCollector.sol\":63009:63014  50e16 */\n      0x06f05b59d3b20000\n        /* \"contracts/ProtocolFeesCollector.sol\":64669:64689  newSwapFeePercentage */\n      dup3\n        /* \"contracts/ProtocolFeesCollector.sol\":64669:64726  newSwapFeePercentage <= _MAX_PROTOCOL_SWAP_FEE_PERCENTAGE */\n      gt\n      iszero\n        /* \"contracts/ProtocolFeesCollector.sol\":11165:11168  600 */\n      0x0258\n        /* \"contracts/ProtocolFeesCollector.sol\":64660:64668  _require */\n      tag_56\n        /* \"contracts/ProtocolFeesCollector.sol\":64660:64764  _require(newSwapFeePercentage <= _MAX_PROTOCOL_SWAP_FEE_PERCENTAGE, Errors.SWAP_FEE_PERCENTAGE_TOO_HIGH) */\n      jump\t// in\n    tag_55:\n        /* \"contracts/ProtocolFeesCollector.sol\":64775:64793  _swapFeePercentage */\n      0x01\n        /* \"contracts/ProtocolFeesCollector.sol\":64775:64816  _swapFeePercentage = newSwapFeePercentage */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/ProtocolFeesCollector.sol\":64832:64878  SwapFeePercentageChanged(newSwapFeePercentage) */\n      mload(0x40)\n      0xa9ba3ffe0b6c366b81232caab38605a0699ad5398d6cce76f91ee809e322dafc\n      swap1\n      tag_57\n      swap1\n        /* \"contracts/ProtocolFeesCollector.sol\":64796:64816  newSwapFeePercentage */\n      dup4\n      swap1\n        /* \"contracts/ProtocolFeesCollector.sol\":64832:64878  SwapFeePercentageChanged(newSwapFeePercentage) */\n      tag_33\n      jump\t// in\n    tag_57:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/ProtocolFeesCollector.sol\":64567:64886  function setSwapFeePercentage(uint256 newSwapFeePercentage) external authenticate {\r... */\n      pop\n      jump\t// out\n        /* \"contracts/ProtocolFeesCollector.sol\":65305:65413  function getSwapFeePercentage() external view returns (uint256) {\r... */\n    tag_18:\n        /* \"contracts/ProtocolFeesCollector.sol\":65387:65405  _swapFeePercentage */\n      sload(0x01)\n        /* \"contracts/ProtocolFeesCollector.sol\":65305:65413  function getSwapFeePercentage() external view returns (uint256) {\r... */\n      swap1\n      jump\t// out\n        /* \"contracts/ProtocolFeesCollector.sol\":64894:65297  function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external authenticate {\r... */\n    tag_23:\n        /* \"contracts/ProtocolFeesCollector.sol\":21927:21948  _authenticateCaller() */\n      tag_60\n        /* \"contracts/ProtocolFeesCollector.sol\":21927:21946  _authenticateCaller */\n      tag_53\n        /* \"contracts/ProtocolFeesCollector.sol\":21927:21948  _authenticateCaller() */\n      jump\t// in\n    tag_60:\n        /* \"contracts/ProtocolFeesCollector.sol\":64997:65155  _require(\r... */\n      tag_62\n        /* \"contracts/ProtocolFeesCollector.sol\":63095:63099  1e16 */\n      0x2386f26fc10000\n        /* \"contracts/ProtocolFeesCollector.sol\":65020:65045  newFlashLoanFeePercentage */\n      dup3\n        /* \"contracts/ProtocolFeesCollector.sol\":65020:65088  newFlashLoanFeePercentage <= _MAX_PROTOCOL_FLASH_LOAN_FEE_PERCENTAGE */\n      gt\n      iszero\n        /* \"contracts/ProtocolFeesCollector.sol\":11238:11241  601 */\n      0x0259\n        /* \"contracts/ProtocolFeesCollector.sol\":64997:65005  _require */\n      tag_56\n        /* \"contracts/ProtocolFeesCollector.sol\":64997:65155  _require(\r... */\n      jump\t// in\n    tag_62:\n        /* \"contracts/ProtocolFeesCollector.sol\":65166:65189  _flashLoanFeePercentage */\n      0x02\n        /* \"contracts/ProtocolFeesCollector.sol\":65166:65217  _flashLoanFeePercentage = newFlashLoanFeePercentage */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/ProtocolFeesCollector.sol\":65233:65289  FlashLoanFeePercentageChanged(newFlashLoanFeePercentage) */\n      mload(0x40)\n      0x5a0b7386237e7f07fa741efc64e59c9387d2cccafec760efed4d53387f20e19a\n      swap1\n      tag_57\n      swap1\n        /* \"contracts/ProtocolFeesCollector.sol\":65192:65217  newFlashLoanFeePercentage */\n      dup4\n      swap1\n        /* \"contracts/ProtocolFeesCollector.sol\":65233:65289  FlashLoanFeePercentageChanged(newFlashLoanFeePercentage) */\n      tag_33\n      jump\t// in\n        /* \"contracts/ProtocolFeesCollector.sol\":64100:64559  function withdrawCollectedFees(\r... */\n    tag_27:\n        /* \"contracts/ProtocolFeesCollector.sol\":19910:19930  _enterNonReentrant() */\n      tag_65\n        /* \"contracts/ProtocolFeesCollector.sol\":19910:19928  _enterNonReentrant */\n      tag_66\n        /* \"contracts/ProtocolFeesCollector.sol\":19910:19930  _enterNonReentrant() */\n      jump\t// in\n    tag_65:\n        /* \"contracts/ProtocolFeesCollector.sol\":21927:21948  _authenticateCaller() */\n      tag_68\n        /* \"contracts/ProtocolFeesCollector.sol\":21927:21946  _authenticateCaller */\n      tag_53\n        /* \"contracts/ProtocolFeesCollector.sol\":21927:21948  _authenticateCaller() */\n      jump\t// in\n    tag_68:\n        /* \"contracts/ProtocolFeesCollector.sol\":64284:64350  InputHelpers.ensureInputLengthMatch(tokens.length, amounts.length) */\n      tag_70\n        /* \"contracts/ProtocolFeesCollector.sol\":64320:64326  tokens */\n      dup5\n        /* \"contracts/ProtocolFeesCollector.sol\":64335:64342  amounts */\n      dup4\n        /* \"contracts/ProtocolFeesCollector.sol\":64284:64319  InputHelpers.ensureInputLengthMatch */\n      tag_71\n        /* \"contracts/ProtocolFeesCollector.sol\":64284:64350  InputHelpers.ensureInputLengthMatch(tokens.length, amounts.length) */\n      jump\t// in\n    tag_70:\n        /* \"contracts/ProtocolFeesCollector.sol\":64368:64377  uint256 i */\n      0x00\n        /* \"contracts/ProtocolFeesCollector.sol\":64363:64552  for (uint256 i = 0; i < tokens.length; ++i) {\r... */\n    tag_72:\n        /* \"contracts/ProtocolFeesCollector.sol\":64383:64400  i < tokens.length */\n      dup5\n      dup2\n      lt\n        /* \"contracts/ProtocolFeesCollector.sol\":64363:64552  for (uint256 i = 0; i < tokens.length; ++i) {\r... */\n      iszero\n      tag_73\n      jumpi\n        /* \"contracts/ProtocolFeesCollector.sol\":64422:64434  IERC20 token */\n      0x00\n        /* \"contracts/ProtocolFeesCollector.sol\":64437:64443  tokens */\n      dup7\n      dup7\n        /* \"contracts/ProtocolFeesCollector.sol\":64444:64445  i */\n      dup4\n        /* \"contracts/ProtocolFeesCollector.sol\":64437:64446  tokens[i] */\n      dup2\n      dup2\n      lt\n      tag_75\n      jumpi\n      invalid\n    tag_75:\n      swap1\n      pop\n      0x20\n      mul\n      add\n      0x20\n      dup2\n      add\n      swap1\n      tag_76\n      swap2\n      swap1\n      tag_77\n      jump\t// in\n    tag_76:\n        /* \"contracts/ProtocolFeesCollector.sol\":64422:64446  IERC20 token = tokens[i] */\n      swap1\n      pop\n        /* \"contracts/ProtocolFeesCollector.sol\":64461:64475  uint256 amount */\n      0x00\n        /* \"contracts/ProtocolFeesCollector.sol\":64478:64485  amounts */\n      dup6\n      dup6\n        /* \"contracts/ProtocolFeesCollector.sol\":64486:64487  i */\n      dup5\n        /* \"contracts/ProtocolFeesCollector.sol\":64478:64488  amounts[i] */\n      dup2\n      dup2\n      lt\n      tag_78\n      jumpi\n      invalid\n    tag_78:\n      0x20\n      mul\n      swap2\n      swap1\n      swap2\n      add\n      calldataload\n      swap2\n      pop\n        /* \"contracts/ProtocolFeesCollector.sol\":64503:64540  token.safeTransfer(recipient, amount) */\n      tag_79\n      swap1\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/ProtocolFeesCollector.sol\":64503:64521  token.safeTransfer */\n      dup4\n      and\n        /* \"contracts/ProtocolFeesCollector.sol\":64522:64531  recipient */\n      dup6\n        /* \"contracts/ProtocolFeesCollector.sol\":64478:64488  amounts[i] */\n      dup4\n        /* \"contracts/ProtocolFeesCollector.sol\":64503:64521  token.safeTransfer */\n      tag_80\n        /* \"contracts/ProtocolFeesCollector.sol\":64503:64540  token.safeTransfer(recipient, amount) */\n      jump\t// in\n    tag_79:\n      pop\n      pop\n        /* \"contracts/ProtocolFeesCollector.sol\":64402:64405  ++i */\n      0x01\n      add\n        /* \"contracts/ProtocolFeesCollector.sol\":64363:64552  for (uint256 i = 0; i < tokens.length; ++i) {\r... */\n      jump(tag_72)\n    tag_73:\n      pop\n        /* \"contracts/ProtocolFeesCollector.sol\":19953:19972  _exitNonReentrant() */\n      tag_81\n        /* \"contracts/ProtocolFeesCollector.sol\":19953:19970  _exitNonReentrant */\n      tag_82\n        /* \"contracts/ProtocolFeesCollector.sol\":19953:19972  _exitNonReentrant() */\n      jump\t// in\n    tag_81:\n        /* \"contracts/ProtocolFeesCollector.sol\":64100:64559  function withdrawCollectedFees(\r... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ProtocolFeesCollector.sol\":22270:22705  function getActionId(bytes4 selector) public view override returns (bytes32) {\r... */\n    tag_31:\n        /* \"contracts/ProtocolFeesCollector.sol\":22338:22345  bytes32 */\n      0x00\n        /* \"contracts/ProtocolFeesCollector.sol\":22663:22685  _actionIdDisambiguator */\n      immutable(\"0xf38bdce81e91f313b4d1f0179658920986116b82d6e9b2b562ef1b7598dd1e51\")\n        /* \"contracts/ProtocolFeesCollector.sol\":22687:22695  selector */\n      dup3\n        /* \"contracts/ProtocolFeesCollector.sol\":22646:22696  abi.encodePacked(_actionIdDisambiguator, selector) */\n      add(0x20, mload(0x40))\n      tag_84\n      swap3\n      swap2\n      swap1\n      tag_85\n      jump\t// in\n    tag_84:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contracts/ProtocolFeesCollector.sol\":22636:22697  keccak256(abi.encodePacked(_actionIdDisambiguator, selector)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"contracts/ProtocolFeesCollector.sol\":22629:22697  return keccak256(abi.encodePacked(_actionIdDisambiguator, selector)) */\n      swap1\n      pop\n        /* \"contracts/ProtocolFeesCollector.sol\":22270:22705  function getActionId(bytes4 selector) public view override returns (bytes32) {\r... */\n    tag_83:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ProtocolFeesCollector.sol\":65854:65957  function getAuthorizer() external view returns (IAuthorizer) {\r... */\n    tag_35:\n        /* \"contracts/ProtocolFeesCollector.sol\":65902:65913  IAuthorizer */\n      0x00\n        /* \"contracts/ProtocolFeesCollector.sol\":65933:65949  _getAuthorizer() */\n      tag_87\n        /* \"contracts/ProtocolFeesCollector.sol\":65933:65947  _getAuthorizer */\n      tag_88\n        /* \"contracts/ProtocolFeesCollector.sol\":65933:65949  _getAuthorizer() */\n      jump\t// in\n    tag_87:\n        /* \"contracts/ProtocolFeesCollector.sol\":65926:65949  return _getAuthorizer() */\n      swap1\n      pop\n        /* \"contracts/ProtocolFeesCollector.sol\":65854:65957  function getAuthorizer() external view returns (IAuthorizer) {\r... */\n      swap1\n      jump\t// out\n        /* \"contracts/ProtocolFeesCollector.sol\":65421:65539  function getFlashLoanFeePercentage() external view returns (uint256) {\r... */\n    tag_39:\n        /* \"contracts/ProtocolFeesCollector.sol\":65508:65531  _flashLoanFeePercentage */\n      sload(0x02)\n        /* \"contracts/ProtocolFeesCollector.sol\":65421:65539  function getFlashLoanFeePercentage() external view returns (uint256) {\r... */\n      swap1\n      jump\t// out\n        /* \"contracts/ProtocolFeesCollector.sol\":65547:65846  function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts) {\r... */\n    tag_44:\n        /* \"contracts/ProtocolFeesCollector.sol\":65626:65653  uint256[] memory feeAmounts */\n      0x60\n        /* \"contracts/ProtocolFeesCollector.sol\":65693:65699  tokens */\n      dup2\n        /* \"contracts/ProtocolFeesCollector.sol\":65693:65706  tokens.length */\n      mload\n        /* \"contracts/ProtocolFeesCollector.sol\":65679:65707  new uint256[](tokens.length) */\n      0xffffffffffffffff\n      dup2\n      gt\n      dup1\n      iszero\n      tag_91\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_91:\n      pop\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_92\n      jumpi\n      dup2\n      0x20\n      add\n      0x20\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      add\n      swap1\n      pop\n    tag_92:\n      pop\n        /* \"contracts/ProtocolFeesCollector.sol\":65666:65707  feeAmounts = new uint256[](tokens.length) */\n      swap1\n      pop\n        /* \"contracts/ProtocolFeesCollector.sol\":65723:65732  uint256 i */\n      0x00\n        /* \"contracts/ProtocolFeesCollector.sol\":65718:65839  for (uint256 i = 0; i < tokens.length; ++i) {\r... */\n    tag_93:\n        /* \"contracts/ProtocolFeesCollector.sol\":65742:65748  tokens */\n      dup3\n        /* \"contracts/ProtocolFeesCollector.sol\":65742:65755  tokens.length */\n      mload\n        /* \"contracts/ProtocolFeesCollector.sol\":65738:65739  i */\n      dup2\n        /* \"contracts/ProtocolFeesCollector.sol\":65738:65755  i < tokens.length */\n      lt\n        /* \"contracts/ProtocolFeesCollector.sol\":65718:65839  for (uint256 i = 0; i < tokens.length; ++i) {\r... */\n      iszero\n      tag_94\n      jumpi\n        /* \"contracts/ProtocolFeesCollector.sol\":65793:65799  tokens */\n      dup3\n        /* \"contracts/ProtocolFeesCollector.sol\":65800:65801  i */\n      dup2\n        /* \"contracts/ProtocolFeesCollector.sol\":65793:65802  tokens[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_96\n      jumpi\n      invalid\n    tag_96:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/ProtocolFeesCollector.sol\":65793:65812  tokens[i].balanceOf */\n      and\n      0x70a08231\n        /* \"contracts/ProtocolFeesCollector.sol\":65821:65825  this */\n      address\n        /* \"contracts/ProtocolFeesCollector.sol\":65793:65827  tokens[i].balanceOf(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_97\n      swap2\n      swap1\n      tag_98\n      jump\t// in\n    tag_97:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_99\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_99:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_101\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_101:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_102\n      swap2\n      swap1\n      tag_103\n      jump\t// in\n    tag_102:\n        /* \"contracts/ProtocolFeesCollector.sol\":65777:65787  feeAmounts */\n      dup3\n        /* \"contracts/ProtocolFeesCollector.sol\":65788:65789  i */\n      dup3\n        /* \"contracts/ProtocolFeesCollector.sol\":65777:65790  feeAmounts[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_104\n      jumpi\n      invalid\n    tag_104:\n      0x20\n      swap1\n      dup2\n      mul\n      swap2\n      swap1\n      swap2\n      add\n      add\n        /* \"contracts/ProtocolFeesCollector.sol\":65777:65827  feeAmounts[i] = tokens[i].balanceOf(address(this)) */\n      mstore\n        /* \"contracts/ProtocolFeesCollector.sol\":65757:65760  ++i */\n      0x01\n      add\n        /* \"contracts/ProtocolFeesCollector.sol\":65718:65839  for (uint256 i = 0; i < tokens.length; ++i) {\r... */\n      jump(tag_93)\n    tag_94:\n      pop\n        /* \"contracts/ProtocolFeesCollector.sol\":65547:65846  function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts) {\r... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ProtocolFeesCollector.sol\":63114:63143  IVault public immutable vault */\n    tag_48:\n      immutable(\"0x0996217b5bd56d5d4e65aa105bb02b59e7c2556b5b3d7f7f3baaee6777207758\")\n      dup2\n      jump\t// out\n        /* \"contracts/ProtocolFeesCollector.sol\":22078:22262  function _authenticateCaller() internal view {\r... */\n    tag_53:\n        /* \"contracts/ProtocolFeesCollector.sol\":22134:22150  bytes32 actionId */\n      0x00\n        /* \"contracts/ProtocolFeesCollector.sol\":22153:22173  getActionId(msg.sig) */\n      tag_106\n        /* \"contracts/ProtocolFeesCollector.sol\":22165:22172  msg.sig */\n      and(not(sub(shl(0xe0, 0x01), 0x01)), calldataload(0x00))\n        /* \"contracts/ProtocolFeesCollector.sol\":22153:22164  getActionId */\n      tag_31\n        /* \"contracts/ProtocolFeesCollector.sol\":22153:22173  getActionId(msg.sig) */\n      jump\t// in\n    tag_106:\n        /* \"contracts/ProtocolFeesCollector.sol\":22134:22173  bytes32 actionId = getActionId(msg.sig) */\n      swap1\n      pop\n        /* \"contracts/ProtocolFeesCollector.sol\":22184:22254  _require(_canPerform(actionId, msg.sender), Errors.SENDER_NOT_ALLOWED) */\n      tag_107\n        /* \"contracts/ProtocolFeesCollector.sol\":22193:22226  _canPerform(actionId, msg.sender) */\n      tag_108\n        /* \"contracts/ProtocolFeesCollector.sol\":22205:22213  actionId */\n      dup3\n        /* \"contracts/ProtocolFeesCollector.sol\":22215:22225  msg.sender */\n      caller\n        /* \"contracts/ProtocolFeesCollector.sol\":22193:22204  _canPerform */\n      tag_109\n        /* \"contracts/ProtocolFeesCollector.sol\":22193:22226  _canPerform(actionId, msg.sender) */\n      jump\t// in\n    tag_108:\n        /* \"contracts/ProtocolFeesCollector.sol\":7794:7797  401 */\n      0x0191\n        /* \"contracts/ProtocolFeesCollector.sol\":22184:22192  _require */\n      tag_56\n        /* \"contracts/ProtocolFeesCollector.sol\":22184:22254  _require(_canPerform(actionId, msg.sender), Errors.SENDER_NOT_ALLOWED) */\n      jump\t// in\n    tag_107:\n        /* \"contracts/ProtocolFeesCollector.sol\":22078:22262  function _authenticateCaller() internal view {\r... */\n      pop\n      jump\t// out\n        /* \"contracts/ProtocolFeesCollector.sol\":1873:1976  function _require(bool condition, uint256 errorCode) pure {\r... */\n    tag_56:\n        /* \"contracts/ProtocolFeesCollector.sol\":1943:1952  condition */\n      dup2\n        /* \"contracts/ProtocolFeesCollector.sol\":1938:1972  if (!condition) _revert(errorCode) */\n      tag_112\n      jumpi\n        /* \"contracts/ProtocolFeesCollector.sol\":1954:1972  _revert(errorCode) */\n      tag_112\n        /* \"contracts/ProtocolFeesCollector.sol\":1962:1971  errorCode */\n      dup2\n        /* \"contracts/ProtocolFeesCollector.sol\":1954:1961  _revert */\n      tag_113\n        /* \"contracts/ProtocolFeesCollector.sol\":1954:1972  _revert(errorCode) */\n      jump\t// in\n    tag_112:\n        /* \"contracts/ProtocolFeesCollector.sol\":1873:1976  function _require(bool condition, uint256 errorCode) pure {\r... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ProtocolFeesCollector.sol\":19988:20265  function _enterNonReentrant() private {\r... */\n    tag_66:\n        /* \"contracts/ProtocolFeesCollector.sol\":20113:20161  _require(_status != _ENTERED, Errors.REENTRANCY) */\n      tag_115\n        /* \"contracts/ProtocolFeesCollector.sol\":19394:19395  2 */\n      0x02\n        /* \"contracts/ProtocolFeesCollector.sol\":20122:20129  _status */\n      sload(0x00)\n        /* \"contracts/ProtocolFeesCollector.sol\":20122:20141  _status != _ENTERED */\n      eq\n      iszero\n        /* \"contracts/ProtocolFeesCollector.sol\":7737:7740  400 */\n      0x0190\n        /* \"contracts/ProtocolFeesCollector.sol\":20113:20121  _require */\n      tag_56\n        /* \"contracts/ProtocolFeesCollector.sol\":20113:20161  _require(_status != _ENTERED, Errors.REENTRANCY) */\n      jump\t// in\n    tag_115:\n        /* \"contracts/ProtocolFeesCollector.sol\":19394:19395  2 */\n      0x02\n        /* \"contracts/ProtocolFeesCollector.sol\":20239:20246  _status */\n      0x00\n        /* \"contracts/ProtocolFeesCollector.sol\":20239:20257  _status = _ENTERED */\n      sstore\n        /* \"contracts/ProtocolFeesCollector.sol\":19988:20265  function _enterNonReentrant() private {\r... */\n      jump\t// out\n        /* \"contracts/ProtocolFeesCollector.sol\":22865:22998  function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {\r... */\n    tag_71:\n        /* \"contracts/ProtocolFeesCollector.sol\":22944:22990  _require(a == b, Errors.INPUT_LENGTH_MISMATCH) */\n      tag_112\n        /* \"contracts/ProtocolFeesCollector.sol\":22958:22959  b */\n      dup2\n        /* \"contracts/ProtocolFeesCollector.sol\":22953:22954  a */\n      dup4\n        /* \"contracts/ProtocolFeesCollector.sol\":22953:22959  a == b */\n      eq\n        /* \"contracts/ProtocolFeesCollector.sol\":6086:6089  103 */\n      0x67\n        /* \"contracts/ProtocolFeesCollector.sol\":22944:22952  _require */\n      tag_56\n        /* \"contracts/ProtocolFeesCollector.sol\":22944:22990  _require(a == b, Errors.INPUT_LENGTH_MISMATCH) */\n      jump\t// in\n        /* \"contracts/ProtocolFeesCollector.sol\":16062:16282  function safeTransfer(\r... */\n    tag_80:\n        /* \"contracts/ProtocolFeesCollector.sol\":16179:16274  _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_119\n        /* \"contracts/ProtocolFeesCollector.sol\":16207:16212  token */\n      dup4\n        /* \"contracts/ProtocolFeesCollector.sol\":16238:16261  token.transfer.selector */\n      shl(0xe0, 0xa9059cbb)\n        /* \"contracts/ProtocolFeesCollector.sol\":16263:16265  to */\n      dup5\n        /* \"contracts/ProtocolFeesCollector.sol\":16267:16272  value */\n      dup5\n        /* \"contracts/ProtocolFeesCollector.sol\":16215:16273  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      add(0x24, mload(0x40))\n      tag_120\n      swap3\n      swap2\n      swap1\n      tag_121\n      jump\t// in\n    tag_120:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap2\n      swap1\n      mstore\n      0x20\n      dup2\n      add\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      not(sub(shl(0xe0, 0x01), 0x01))\n      swap1\n      swap4\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap1\n      swap2\n      mstore\n        /* \"contracts/ProtocolFeesCollector.sol\":16179:16198  _callOptionalReturn */\n      tag_122\n        /* \"contracts/ProtocolFeesCollector.sol\":16179:16274  _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      jump\t// in\n    tag_119:\n        /* \"contracts/ProtocolFeesCollector.sol\":16062:16282  function safeTransfer(\r... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ProtocolFeesCollector.sol\":20273:20485  function _exitNonReentrant() private {\r... */\n    tag_82:\n        /* \"contracts/ProtocolFeesCollector.sol\":19350:19351  1 */\n      0x01\n        /* \"contracts/ProtocolFeesCollector.sol\":20455:20462  _status */\n      0x00\n        /* \"contracts/ProtocolFeesCollector.sol\":20455:20477  _status = _NOT_ENTERED */\n      sstore\n        /* \"contracts/ProtocolFeesCollector.sol\":20273:20485  function _exitNonReentrant() private {\r... */\n      jump\t// out\n        /* \"contracts/ProtocolFeesCollector.sol\":66154:66263  function _getAuthorizer() internal view returns (IAuthorizer) {\r... */\n    tag_88:\n        /* \"contracts/ProtocolFeesCollector.sol\":66203:66214  IAuthorizer */\n      0x00\n        /* \"contracts/ProtocolFeesCollector.sol\":66234:66239  vault */\n      immutable(\"0x0996217b5bd56d5d4e65aa105bb02b59e7c2556b5b3d7f7f3baaee6777207758\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/ProtocolFeesCollector.sol\":66234:66253  vault.getAuthorizer */\n      and\n      0xaaabadc5\n        /* \"contracts/ProtocolFeesCollector.sol\":66234:66255  vault.getAuthorizer() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_125\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_125:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_127\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_127:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_87\n      swap2\n      swap1\n      tag_129\n      jump\t// in\n        /* \"contracts/ProtocolFeesCollector.sol\":65965:66146  function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {\r... */\n    tag_109:\n        /* \"contracts/ProtocolFeesCollector.sol\":66053:66057  bool */\n      0x00\n        /* \"contracts/ProtocolFeesCollector.sol\":66077:66093  _getAuthorizer() */\n      tag_131\n        /* \"contracts/ProtocolFeesCollector.sol\":66077:66091  _getAuthorizer */\n      tag_88\n        /* \"contracts/ProtocolFeesCollector.sol\":66077:66093  _getAuthorizer() */\n      jump\t// in\n    tag_131:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/ProtocolFeesCollector.sol\":66077:66104  _getAuthorizer().canPerform */\n      and\n      0x9be2a884\n        /* \"contracts/ProtocolFeesCollector.sol\":66105:66113  actionId */\n      dup5\n        /* \"contracts/ProtocolFeesCollector.sol\":66115:66122  account */\n      dup5\n        /* \"contracts/ProtocolFeesCollector.sol\":66132:66136  this */\n      address\n        /* \"contracts/ProtocolFeesCollector.sol\":66077:66138  _getAuthorizer().canPerform(actionId, account, address(this)) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_132\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_133\n      jump\t// in\n    tag_132:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_134\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_134:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_136\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_136:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_137\n      swap2\n      swap1\n      tag_138\n      jump\t// in\n    tag_137:\n        /* \"contracts/ProtocolFeesCollector.sol\":66070:66138  return _getAuthorizer().canPerform(actionId, account, address(this)) */\n      swap4\n        /* \"contracts/ProtocolFeesCollector.sol\":65965:66146  function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {\r... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ProtocolFeesCollector.sol\":2088:5311  function _revert(uint256 errorCode) pure {\r... */\n    tag_113:\n      shl(0xe5, 0x461bcd)\n        /* \"contracts/ProtocolFeesCollector.sol\":4641:4644  0x0 */\n      0x00\n        /* \"contracts/ProtocolFeesCollector.sol\":4634:4713  mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000) */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/ProtocolFeesCollector.sol\":4854:4920  0x0000000000000000000000000000000000000000000000000000000000000020 */\n      0x20\n        /* \"contracts/ProtocolFeesCollector.sol\":4848:4852  0x04 */\n      0x04\n        /* \"contracts/ProtocolFeesCollector.sol\":4841:4921  mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020) */\n      mstore\n        /* \"contracts/ProtocolFeesCollector.sol\":4998:4999  7 */\n      0x07\n        /* \"contracts/ProtocolFeesCollector.sol\":4992:4996  0x24 */\n      0x24\n        /* \"contracts/ProtocolFeesCollector.sol\":4985:5000  mstore(0x24, 7) */\n      mstore\n        /* \"contracts/ProtocolFeesCollector.sol\":4044:4117  add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))) */\n      0x42414c23000030\n        /* \"contracts/ProtocolFeesCollector.sol\":3240:3242  10 */\n      0x0a\n        /* \"contracts/ProtocolFeesCollector.sol\":3275:3293  div(errorCode, 10) */\n      dup1\n      dup5\n      div\n        /* \"contracts/ProtocolFeesCollector.sol\":3321:3339  mod(errorCode, 10) */\n      dup2\n      dup2\n      mod\n        /* \"contracts/ProtocolFeesCollector.sol\":3245:3249  0x30 */\n      0x30\n        /* \"contracts/ProtocolFeesCollector.sol\":3317:3346  add(mod(errorCode, 10), 0x30) */\n      swap1\n      dup2\n      add\n        /* \"contracts/ProtocolFeesCollector.sol\":4085:4086  8 */\n      0x08\n        /* \"contracts/ProtocolFeesCollector.sol\":4081:4095  shl(8, tenths) */\n      shl\n        /* \"contracts/ProtocolFeesCollector.sol\":3225:3243  mod(errorCode, 10) */\n      swap6\n      dup4\n      swap1\n      mod\n        /* \"contracts/ProtocolFeesCollector.sol\":4070:4096  add(units, shl(8, tenths)) */\n      swap6\n      swap1\n      swap6\n      add\n        /* \"contracts/ProtocolFeesCollector.sol\":3371:3389  div(errorCode, 10) */\n      swap1\n      dup3\n      swap1\n      div\n        /* \"contracts/ProtocolFeesCollector.sol\":3419:3437  mod(errorCode, 10) */\n      swap2\n      dup3\n      mod\n        /* \"contracts/ProtocolFeesCollector.sol\":3415:3444  add(mod(errorCode, 10), 0x30) */\n      swap1\n      swap5\n      add\n        /* \"contracts/ProtocolFeesCollector.sol\":4102:4104  16 */\n      0x10\n        /* \"contracts/ProtocolFeesCollector.sol\":4098:4115  shl(16, hundreds) */\n      shl\n        /* \"contracts/ProtocolFeesCollector.sol\":4066:4116  add(add(units, shl(8, tenths)), shl(16, hundreds)) */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"contracts/ProtocolFeesCollector.sol\":4044:4117  add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))) */\n      add\n        /* \"contracts/ProtocolFeesCollector.sol\":4039:4042  200 */\n      0xc8\n        /* \"contracts/ProtocolFeesCollector.sol\":4035:4118  shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds)))) */\n      shl\n        /* \"contracts/ProtocolFeesCollector.sol\":5067:5071  0x44 */\n      0x44\n        /* \"contracts/ProtocolFeesCollector.sol\":5060:5086  mstore(0x44, revertReason) */\n      mstore\n        /* \"contracts/ProtocolFeesCollector.sol\":5297:5300  100 */\n      0x64\n      swap1\n        /* \"contracts/ProtocolFeesCollector.sol\":5287:5301  revert(0, 100) */\n      revert\n        /* \"contracts/ProtocolFeesCollector.sol\":16895:17709  function _callOptionalReturn(address token, bytes memory data) private {\r... */\n    tag_122:\n        /* \"contracts/ProtocolFeesCollector.sol\":17141:17153  bool success */\n      0x00\n        /* \"contracts/ProtocolFeesCollector.sol\":17155:17178  bytes memory returndata */\n      dup1\n        /* \"contracts/ProtocolFeesCollector.sol\":17182:17187  token */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/ProtocolFeesCollector.sol\":17182:17192  token.call */\n      and\n        /* \"contracts/ProtocolFeesCollector.sol\":17193:17197  data */\n      dup4\n        /* \"contracts/ProtocolFeesCollector.sol\":17182:17198  token.call(data) */\n      mload(0x40)\n      tag_141\n      swap2\n      swap1\n      tag_142\n      jump\t// in\n    tag_141:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup7\n      gas\n      call\n      swap2\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_145\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_144)\n    tag_145:\n      0x60\n      swap2\n      pop\n    tag_144:\n      pop\n        /* \"contracts/ProtocolFeesCollector.sol\":17140:17198  (bool success, bytes memory returndata) = token.call(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/ProtocolFeesCollector.sol\":17340:17341  0 */\n      0x00\n        /* \"contracts/ProtocolFeesCollector.sol\":17331:17338  success */\n      dup3\n        /* \"contracts/ProtocolFeesCollector.sol\":17328:17342  eq(success, 0) */\n      eq\n        /* \"contracts/ProtocolFeesCollector.sol\":17325:17327  if */\n      iszero\n      tag_146\n      jumpi\n        /* \"contracts/ProtocolFeesCollector.sol\":17383:17399  returndatasize() */\n      returndatasize\n        /* \"contracts/ProtocolFeesCollector.sol\":17380:17381  0 */\n      0x00\n        /* \"contracts/ProtocolFeesCollector.sol\":17377:17378  0 */\n      dup1\n        /* \"contracts/ProtocolFeesCollector.sol\":17362:17400  returndatacopy(0, 0, returndatasize()) */\n      returndatacopy\n        /* \"contracts/ProtocolFeesCollector.sol\":17428:17444  returndatasize() */\n      returndatasize\n        /* \"contracts/ProtocolFeesCollector.sol\":17425:17426  0 */\n      0x00\n        /* \"contracts/ProtocolFeesCollector.sol\":17418:17445  revert(0, returndatasize()) */\n      revert\n        /* \"contracts/ProtocolFeesCollector.sol\":17325:17327  if */\n    tag_146:\n        /* \"contracts/ProtocolFeesCollector.sol\":17604:17701  _require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED) */\n      tag_147\n        /* \"contracts/ProtocolFeesCollector.sol\":17613:17623  returndata */\n      dup2\n        /* \"contracts/ProtocolFeesCollector.sol\":17613:17630  returndata.length */\n      mload\n        /* \"contracts/ProtocolFeesCollector.sol\":17634:17635  0 */\n      0x00\n        /* \"contracts/ProtocolFeesCollector.sol\":17613:17635  returndata.length == 0 */\n      eq\n        /* \"contracts/ProtocolFeesCollector.sol\":17613:17669  returndata.length == 0 || abi.decode(returndata, (bool)) */\n      dup1\n      tag_149\n      jumpi\n      pop\n        /* \"contracts/ProtocolFeesCollector.sol\":17650:17660  returndata */\n      dup2\n        /* \"contracts/ProtocolFeesCollector.sol\":17639:17669  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_149\n      swap2\n      swap1\n      tag_138\n      jump\t// in\n    tag_149:\n        /* \"contracts/ProtocolFeesCollector.sol\":8900:8903  418 */\n      0x01a2\n        /* \"contracts/ProtocolFeesCollector.sol\":17604:17612  _require */\n      tag_56\n        /* \"contracts/ProtocolFeesCollector.sol\":17604:17701  _require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED) */\n      jump\t// in\n    tag_147:\n        /* \"contracts/ProtocolFeesCollector.sol\":16895:17709  function _callOptionalReturn(address token, bytes memory data) private {\r... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:411   */\n    tag_151:\n      0x00\n      dup1\n        /* \"#utility.yul\":144:147   */\n      dup4\n        /* \"#utility.yul\":137:141   */\n      0x1f\n        /* \"#utility.yul\":129:135   */\n      dup5\n        /* \"#utility.yul\":125:142   */\n      add\n        /* \"#utility.yul\":121:148   */\n      slt\n        /* \"#utility.yul\":111:113   */\n      tag_153\n      jumpi\n        /* \"#utility.yul\":167:173   */\n      dup1\n        /* \"#utility.yul\":159:165   */\n      dup2\n        /* \"#utility.yul\":152:174   */\n      revert\n        /* \"#utility.yul\":111:113   */\n    tag_153:\n      pop\n        /* \"#utility.yul\":195:215   */\n      dup2\n      calldataload\n        /* \"#utility.yul\":238:256   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":227:257   */\n      dup2\n      gt\n        /* \"#utility.yul\":224:226   */\n      iszero\n      tag_154\n      jumpi\n        /* \"#utility.yul\":277:285   */\n      dup2\n        /* \"#utility.yul\":267:275   */\n      dup3\n        /* \"#utility.yul\":260:286   */\n      revert\n        /* \"#utility.yul\":224:226   */\n    tag_154:\n        /* \"#utility.yul\":321:325   */\n      0x20\n        /* \"#utility.yul\":313:319   */\n      dup4\n        /* \"#utility.yul\":309:326   */\n      add\n        /* \"#utility.yul\":297:326   */\n      swap2\n      pop\n        /* \"#utility.yul\":384:387   */\n      dup4\n        /* \"#utility.yul\":377:381   */\n      0x20\n        /* \"#utility.yul\":369:373   */\n      dup1\n        /* \"#utility.yul\":361:367   */\n      dup4\n        /* \"#utility.yul\":357:374   */\n      mul\n        /* \"#utility.yul\":349:355   */\n      dup6\n        /* \"#utility.yul\":345:375   */\n      add\n        /* \"#utility.yul\":341:382   */\n      add\n        /* \"#utility.yul\":338:388   */\n      gt\n        /* \"#utility.yul\":335:337   */\n      iszero\n      tag_155\n      jumpi\n        /* \"#utility.yul\":401:402   */\n      0x00\n        /* \"#utility.yul\":398:399   */\n      dup1\n        /* \"#utility.yul\":391:403   */\n      revert\n        /* \"#utility.yul\":335:337   */\n    tag_155:\n        /* \"#utility.yul\":101:411   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":416:563   */\n    tag_156:\n        /* \"#utility.yul\":495:515   */\n      dup1\n      calldataload\n        /* \"#utility.yul\":524:557   */\n      tag_83\n        /* \"#utility.yul\":495:515   */\n      dup2\n        /* \"#utility.yul\":524:557   */\n      tag_159\n      jump\t// in\n        /* \"#utility.yul\":568:1528   */\n    tag_26:\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n        /* \"#utility.yul\":798:800   */\n      0x60\n        /* \"#utility.yul\":786:795   */\n      dup7\n        /* \"#utility.yul\":777:784   */\n      dup9\n        /* \"#utility.yul\":773:796   */\n      sub\n        /* \"#utility.yul\":769:801   */\n      slt\n        /* \"#utility.yul\":766:768   */\n      iszero\n      tag_161\n      jumpi\n        /* \"#utility.yul\":819:825   */\n      dup1\n        /* \"#utility.yul\":811:817   */\n      dup2\n        /* \"#utility.yul\":804:826   */\n      revert\n        /* \"#utility.yul\":766:768   */\n    tag_161:\n        /* \"#utility.yul\":864:873   */\n      dup6\n        /* \"#utility.yul\":851:874   */\n      calldataload\n        /* \"#utility.yul\":893:911   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":934:936   */\n      dup1\n        /* \"#utility.yul\":926:932   */\n      dup3\n        /* \"#utility.yul\":923:937   */\n      gt\n        /* \"#utility.yul\":920:922   */\n      iszero\n      tag_162\n      jumpi\n        /* \"#utility.yul\":955:961   */\n      dup3\n        /* \"#utility.yul\":947:953   */\n      dup4\n        /* \"#utility.yul\":940:962   */\n      revert\n        /* \"#utility.yul\":920:922   */\n    tag_162:\n        /* \"#utility.yul\":999:1072   */\n      tag_163\n        /* \"#utility.yul\":1064:1071   */\n      dup10\n        /* \"#utility.yul\":1055:1061   */\n      dup4\n        /* \"#utility.yul\":1044:1053   */\n      dup11\n        /* \"#utility.yul\":1040:1062   */\n      add\n        /* \"#utility.yul\":999:1072   */\n      tag_151\n      jump\t// in\n    tag_163:\n        /* \"#utility.yul\":1091:1099   */\n      swap1\n      swap8\n      pop\n        /* \"#utility.yul\":973:1072   */\n      swap6\n      pop\n        /* \"#utility.yul\":1179:1181   */\n      0x20\n        /* \"#utility.yul\":1164:1182   */\n      dup9\n      add\n        /* \"#utility.yul\":1151:1183   */\n      calldataload\n      swap2\n      pop\n        /* \"#utility.yul\":1195:1211   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":1192:1194   */\n      iszero\n      tag_164\n      jumpi\n        /* \"#utility.yul\":1229:1235   */\n      dup3\n        /* \"#utility.yul\":1221:1227   */\n      dup4\n        /* \"#utility.yul\":1214:1236   */\n      revert\n        /* \"#utility.yul\":1192:1194   */\n    tag_164:\n      pop\n        /* \"#utility.yul\":1273:1348   */\n      tag_165\n        /* \"#utility.yul\":1340:1347   */\n      dup9\n        /* \"#utility.yul\":1329:1337   */\n      dup3\n        /* \"#utility.yul\":1318:1327   */\n      dup10\n        /* \"#utility.yul\":1314:1338   */\n      add\n        /* \"#utility.yul\":1273:1348   */\n      tag_151\n      jump\t// in\n    tag_165:\n        /* \"#utility.yul\":1367:1375   */\n      swap1\n      swap5\n      pop\n        /* \"#utility.yul\":1247:1348   */\n      swap3\n      pop\n      pop\n        /* \"#utility.yul\":1452:1454   */\n      0x40\n        /* \"#utility.yul\":1437:1455   */\n      dup7\n      add\n        /* \"#utility.yul\":1424:1456   */\n      calldataload\n        /* \"#utility.yul\":1465:1498   */\n      tag_166\n        /* \"#utility.yul\":1424:1456   */\n      dup2\n        /* \"#utility.yul\":1465:1498   */\n      tag_159\n      jump\t// in\n    tag_166:\n        /* \"#utility.yul\":1517:1522   */\n      dup1\n        /* \"#utility.yul\":1507:1522   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":756:1528   */\n      swap3\n      swap6\n      pop\n      swap3\n      swap6\n      swap1\n      swap4\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1533:2704   */\n    tag_43:\n      0x00\n        /* \"#utility.yul\":1662:1664   */\n      0x20\n        /* \"#utility.yul\":1705:1707   */\n      dup1\n        /* \"#utility.yul\":1693:1702   */\n      dup4\n        /* \"#utility.yul\":1684:1691   */\n      dup6\n        /* \"#utility.yul\":1680:1703   */\n      sub\n        /* \"#utility.yul\":1676:1708   */\n      slt\n        /* \"#utility.yul\":1673:1675   */\n      iszero\n      tag_168\n      jumpi\n        /* \"#utility.yul\":1726:1732   */\n      dup2\n        /* \"#utility.yul\":1718:1724   */\n      dup3\n        /* \"#utility.yul\":1711:1733   */\n      revert\n        /* \"#utility.yul\":1673:1675   */\n    tag_168:\n        /* \"#utility.yul\":1771:1780   */\n      dup3\n        /* \"#utility.yul\":1758:1781   */\n      calldataload\n        /* \"#utility.yul\":1800:1818   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":1841:1843   */\n      dup1\n        /* \"#utility.yul\":1833:1839   */\n      dup3\n        /* \"#utility.yul\":1830:1844   */\n      gt\n        /* \"#utility.yul\":1827:1829   */\n      iszero\n      tag_169\n      jumpi\n        /* \"#utility.yul\":1862:1868   */\n      dup4\n        /* \"#utility.yul\":1854:1860   */\n      dup5\n        /* \"#utility.yul\":1847:1869   */\n      revert\n        /* \"#utility.yul\":1827:1829   */\n    tag_169:\n        /* \"#utility.yul\":1905:1911   */\n      dup2\n        /* \"#utility.yul\":1894:1903   */\n      dup6\n        /* \"#utility.yul\":1890:1912   */\n      add\n        /* \"#utility.yul\":1880:1912   */\n      swap2\n      pop\n        /* \"#utility.yul\":1950:1957   */\n      dup6\n        /* \"#utility.yul\":1943:1947   */\n      0x1f\n        /* \"#utility.yul\":1939:1941   */\n      dup4\n        /* \"#utility.yul\":1935:1948   */\n      add\n        /* \"#utility.yul\":1931:1958   */\n      slt\n        /* \"#utility.yul\":1921:1923   */\n      tag_170\n      jumpi\n        /* \"#utility.yul\":1977:1983   */\n      dup4\n        /* \"#utility.yul\":1969:1975   */\n      dup5\n        /* \"#utility.yul\":1962:1984   */\n      revert\n        /* \"#utility.yul\":1921:1923   */\n    tag_170:\n        /* \"#utility.yul\":2018:2020   */\n      dup2\n        /* \"#utility.yul\":2005:2021   */\n      calldataload\n        /* \"#utility.yul\":2040:2042   */\n      dup2\n        /* \"#utility.yul\":2036:2038   */\n      dup2\n        /* \"#utility.yul\":2033:2043   */\n      gt\n        /* \"#utility.yul\":2030:2032   */\n      iszero\n      tag_171\n      jumpi\n        /* \"#utility.yul\":2046:2055   */\n      invalid\n        /* \"#utility.yul\":2030:2032   */\n    tag_171:\n        /* \"#utility.yul\":2084:2086   */\n      dup4\n        /* \"#utility.yul\":2080:2082   */\n      dup2\n        /* \"#utility.yul\":2076:2087   */\n      mul\n        /* \"#utility.yul\":2116:2118   */\n      0x40\n        /* \"#utility.yul\":2110:2119   */\n      mload\n        /* \"#utility.yul\":2167:2169   */\n      dup6\n        /* \"#utility.yul\":2162:2164   */\n      dup3\n        /* \"#utility.yul\":2154:2160   */\n      dup3\n        /* \"#utility.yul\":2150:2165   */\n      add\n        /* \"#utility.yul\":2146:2170   */\n      add\n        /* \"#utility.yul\":2220:2226   */\n      dup2\n        /* \"#utility.yul\":2208:2218   */\n      dup2\n        /* \"#utility.yul\":2205:2227   */\n      lt\n        /* \"#utility.yul\":2200:2202   */\n      dup6\n        /* \"#utility.yul\":2188:2198   */\n      dup3\n        /* \"#utility.yul\":2185:2203   */\n      gt\n        /* \"#utility.yul\":2182:2228   */\n      or\n        /* \"#utility.yul\":2179:2181   */\n      iszero\n      tag_172\n      jumpi\n        /* \"#utility.yul\":2231:2240   */\n      invalid\n        /* \"#utility.yul\":2179:2181   */\n    tag_172:\n        /* \"#utility.yul\":2258:2260   */\n      0x40\n        /* \"#utility.yul\":2251:2273   */\n      mstore\n        /* \"#utility.yul\":2308:2326   */\n      dup3\n      dup2\n      mstore\n        /* \"#utility.yul\":2342:2357   */\n      dup6\n      dup2\n      add\n      swap4\n      pop\n        /* \"#utility.yul\":2377:2388   */\n      dup5\n      dup7\n      add\n        /* \"#utility.yul\":2407:2418   */\n      dup3\n      dup7\n      add\n        /* \"#utility.yul\":2403:2423   */\n      dup8\n      add\n        /* \"#utility.yul\":2400:2433   */\n      dup11\n      lt\n        /* \"#utility.yul\":2397:2399   */\n      iszero\n      tag_173\n      jumpi\n        /* \"#utility.yul\":2451:2457   */\n      dup8\n        /* \"#utility.yul\":2443:2449   */\n      dup9\n        /* \"#utility.yul\":2436:2458   */\n      revert\n        /* \"#utility.yul\":2397:2399   */\n    tag_173:\n        /* \"#utility.yul\":2478:2484   */\n      dup8\n        /* \"#utility.yul\":2469:2484   */\n      swap6\n      pop\n        /* \"#utility.yul\":2493:2673   */\n    tag_174:\n        /* \"#utility.yul\":2507:2509   */\n      dup4\n        /* \"#utility.yul\":2504:2505   */\n      dup7\n        /* \"#utility.yul\":2501:2510   */\n      lt\n        /* \"#utility.yul\":2493:2673   */\n      iszero\n      tag_176\n      jumpi\n        /* \"#utility.yul\":2564:2598   */\n      tag_177\n        /* \"#utility.yul\":2594:2597   */\n      dup2\n        /* \"#utility.yul\":2564:2598   */\n      tag_156\n      jump\t// in\n    tag_177:\n        /* \"#utility.yul\":2552:2599   */\n      dup6\n      mstore\n        /* \"#utility.yul\":2525:2526   */\n      0x01\n        /* \"#utility.yul\":2518:2527   */\n      swap6\n      swap1\n      swap6\n      add\n      swap5\n        /* \"#utility.yul\":2619:2631   */\n      swap4\n      dup7\n      add\n      swap4\n        /* \"#utility.yul\":2651:2663   */\n      dup7\n      add\n        /* \"#utility.yul\":2493:2673   */\n      jump(tag_174)\n    tag_176:\n      pop\n        /* \"#utility.yul\":2692:2698   */\n      swap9\n        /* \"#utility.yul\":1642:2704   */\n      swap8\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2709:3006   */\n    tag_138:\n      0x00\n        /* \"#utility.yul\":2829:2831   */\n      0x20\n        /* \"#utility.yul\":2817:2826   */\n      dup3\n        /* \"#utility.yul\":2808:2815   */\n      dup5\n        /* \"#utility.yul\":2804:2827   */\n      sub\n        /* \"#utility.yul\":2800:2832   */\n      slt\n        /* \"#utility.yul\":2797:2799   */\n      iszero\n      tag_179\n      jumpi\n        /* \"#utility.yul\":2850:2856   */\n      dup1\n        /* \"#utility.yul\":2842:2848   */\n      dup2\n        /* \"#utility.yul\":2835:2857   */\n      revert\n        /* \"#utility.yul\":2797:2799   */\n    tag_179:\n        /* \"#utility.yul\":2887:2896   */\n      dup2\n        /* \"#utility.yul\":2881:2897   */\n      mload\n        /* \"#utility.yul\":2940:2945   */\n      dup1\n        /* \"#utility.yul\":2933:2946   */\n      iszero\n        /* \"#utility.yul\":2926:2947   */\n      iszero\n        /* \"#utility.yul\":2919:2924   */\n      dup2\n        /* \"#utility.yul\":2916:2948   */\n      eq\n        /* \"#utility.yul\":2906:2908   */\n      tag_137\n      jumpi\n        /* \"#utility.yul\":2967:2973   */\n      dup2\n        /* \"#utility.yul\":2959:2965   */\n      dup3\n        /* \"#utility.yul\":2952:2974   */\n      revert\n        /* \"#utility.yul\":3011:3317   */\n    tag_30:\n      0x00\n        /* \"#utility.yul\":3122:3124   */\n      0x20\n        /* \"#utility.yul\":3110:3119   */\n      dup3\n        /* \"#utility.yul\":3101:3108   */\n      dup5\n        /* \"#utility.yul\":3097:3120   */\n      sub\n        /* \"#utility.yul\":3093:3125   */\n      slt\n        /* \"#utility.yul\":3090:3092   */\n      iszero\n      tag_182\n      jumpi\n        /* \"#utility.yul\":3143:3149   */\n      dup1\n        /* \"#utility.yul\":3135:3141   */\n      dup2\n        /* \"#utility.yul\":3128:3150   */\n      revert\n        /* \"#utility.yul\":3090:3092   */\n    tag_182:\n        /* \"#utility.yul\":3174:3197   */\n      dup2\n      calldataload\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"#utility.yul\":3226:3258   */\n      dup2\n      and\n        /* \"#utility.yul\":3216:3259   */\n      dup2\n      eq\n        /* \"#utility.yul\":3206:3208   */\n      tag_137\n      jumpi\n        /* \"#utility.yul\":3278:3284   */\n      dup2\n        /* \"#utility.yul\":3270:3276   */\n      dup3\n        /* \"#utility.yul\":3263:3285   */\n      revert\n        /* \"#utility.yul\":3322:3604   */\n    tag_129:\n      0x00\n        /* \"#utility.yul\":3464:3466   */\n      0x20\n        /* \"#utility.yul\":3452:3461   */\n      dup3\n        /* \"#utility.yul\":3443:3450   */\n      dup5\n        /* \"#utility.yul\":3439:3462   */\n      sub\n        /* \"#utility.yul\":3435:3467   */\n      slt\n        /* \"#utility.yul\":3432:3434   */\n      iszero\n      tag_185\n      jumpi\n        /* \"#utility.yul\":3485:3491   */\n      dup1\n        /* \"#utility.yul\":3477:3483   */\n      dup2\n        /* \"#utility.yul\":3470:3492   */\n      revert\n        /* \"#utility.yul\":3432:3434   */\n    tag_185:\n        /* \"#utility.yul\":3522:3531   */\n      dup2\n        /* \"#utility.yul\":3516:3532   */\n      mload\n        /* \"#utility.yul\":3541:3574   */\n      tag_137\n        /* \"#utility.yul\":3568:3573   */\n      dup2\n        /* \"#utility.yul\":3541:3574   */\n      tag_159\n      jump\t// in\n        /* \"#utility.yul\":3609:3882   */\n    tag_77:\n      0x00\n        /* \"#utility.yul\":3735:3737   */\n      0x20\n        /* \"#utility.yul\":3723:3732   */\n      dup3\n        /* \"#utility.yul\":3714:3721   */\n      dup5\n        /* \"#utility.yul\":3710:3733   */\n      sub\n        /* \"#utility.yul\":3706:3738   */\n      slt\n        /* \"#utility.yul\":3703:3705   */\n      iszero\n      tag_188\n      jumpi\n        /* \"#utility.yul\":3756:3762   */\n      dup1\n        /* \"#utility.yul\":3748:3754   */\n      dup2\n        /* \"#utility.yul\":3741:3763   */\n      revert\n        /* \"#utility.yul\":3703:3705   */\n    tag_188:\n        /* \"#utility.yul\":3800:3809   */\n      dup2\n        /* \"#utility.yul\":3787:3810   */\n      calldataload\n        /* \"#utility.yul\":3819:3852   */\n      tag_137\n        /* \"#utility.yul\":3846:3851   */\n      dup2\n        /* \"#utility.yul\":3819:3852   */\n      tag_159\n      jump\t// in\n        /* \"#utility.yul\":3887:4077   */\n    tag_15:\n      0x00\n        /* \"#utility.yul\":3999:4001   */\n      0x20\n        /* \"#utility.yul\":3987:3996   */\n      dup3\n        /* \"#utility.yul\":3978:3985   */\n      dup5\n        /* \"#utility.yul\":3974:3997   */\n      sub\n        /* \"#utility.yul\":3970:4002   */\n      slt\n        /* \"#utility.yul\":3967:3969   */\n      iszero\n      tag_191\n      jumpi\n        /* \"#utility.yul\":4020:4026   */\n      dup1\n        /* \"#utility.yul\":4012:4018   */\n      dup2\n        /* \"#utility.yul\":4005:4027   */\n      revert\n        /* \"#utility.yul\":3967:3969   */\n    tag_191:\n      pop\n        /* \"#utility.yul\":4048:4071   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":3957:4077   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4082:4276   */\n    tag_103:\n      0x00\n        /* \"#utility.yul\":4205:4207   */\n      0x20\n        /* \"#utility.yul\":4193:4202   */\n      dup3\n        /* \"#utility.yul\":4184:4191   */\n      dup5\n        /* \"#utility.yul\":4180:4203   */\n      sub\n        /* \"#utility.yul\":4176:4208   */\n      slt\n        /* \"#utility.yul\":4173:4175   */\n      iszero\n      tag_193\n      jumpi\n        /* \"#utility.yul\":4226:4232   */\n      dup1\n        /* \"#utility.yul\":4218:4224   */\n      dup2\n        /* \"#utility.yul\":4211:4233   */\n      revert\n        /* \"#utility.yul\":4173:4175   */\n    tag_193:\n      pop\n        /* \"#utility.yul\":4254:4270   */\n      mload\n      swap2\n        /* \"#utility.yul\":4163:4276   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4281:4553   */\n    tag_85:\n        /* \"#utility.yul\":4436:4455   */\n      swap2\n      dup3\n      mstore\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"#utility.yul\":4485:4518   */\n      and\n        /* \"#utility.yul\":4480:4482   */\n      0x20\n        /* \"#utility.yul\":4471:4483   */\n      dup3\n      add\n        /* \"#utility.yul\":4464:4519   */\n      mstore\n        /* \"#utility.yul\":4544:4546   */\n      0x24\n        /* \"#utility.yul\":4535:4547   */\n      add\n      swap1\n        /* \"#utility.yul\":4426:4553   */\n      jump\t// out\n        /* \"#utility.yul\":4558:4988   */\n    tag_142:\n      0x00\n        /* \"#utility.yul\":4725:4731   */\n      dup3\n        /* \"#utility.yul\":4719:4732   */\n      mload\n        /* \"#utility.yul\":4750:4753   */\n      dup2\n        /* \"#utility.yul\":4762:4891   */\n    tag_196:\n        /* \"#utility.yul\":4776:4782   */\n      dup2\n        /* \"#utility.yul\":4773:4774   */\n      dup2\n        /* \"#utility.yul\":4770:4783   */\n      lt\n        /* \"#utility.yul\":4762:4891   */\n      iszero\n      tag_198\n      jumpi\n        /* \"#utility.yul\":4874:4878   */\n      0x20\n        /* \"#utility.yul\":4858:4872   */\n      dup2\n      dup7\n      add\n        /* \"#utility.yul\":4854:4879   */\n      dup2\n      add\n        /* \"#utility.yul\":4848:4880   */\n      mload\n        /* \"#utility.yul\":4835:4846   */\n      dup6\n      dup4\n      add\n        /* \"#utility.yul\":4828:4881   */\n      mstore\n        /* \"#utility.yul\":4791:4803   */\n      add\n        /* \"#utility.yul\":4762:4891   */\n      jump(tag_196)\n    tag_198:\n        /* \"#utility.yul\":4909:4915   */\n      dup2\n        /* \"#utility.yul\":4906:4907   */\n      dup2\n        /* \"#utility.yul\":4903:4916   */\n      gt\n        /* \"#utility.yul\":4900:4902   */\n      iszero\n      tag_199\n      jumpi\n        /* \"#utility.yul\":4944:4947   */\n      dup3\n        /* \"#utility.yul\":4935:4941   */\n      dup3\n        /* \"#utility.yul\":4930:4933   */\n      dup6\n        /* \"#utility.yul\":4926:4942   */\n      add\n        /* \"#utility.yul\":4919:4948   */\n      mstore\n        /* \"#utility.yul\":4900:4902   */\n    tag_199:\n      pop\n        /* \"#utility.yul\":4966:4982   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":4695:4988   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4993:5196   */\n    tag_98:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5157:5189   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":5139:5190   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5127:5129   */\n      0x20\n        /* \"#utility.yul\":5112:5130   */\n      add\n      swap1\n        /* \"#utility.yul\":5094:5196   */\n      jump\t// out\n        /* \"#utility.yul\":5201:5475   */\n    tag_121:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5393:5425   */\n      swap3\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":5375:5426   */\n      dup3\n      mstore\n        /* \"#utility.yul\":5457:5459   */\n      0x20\n        /* \"#utility.yul\":5442:5460   */\n      dup3\n      add\n        /* \"#utility.yul\":5435:5469   */\n      mstore\n        /* \"#utility.yul\":5363:5365   */\n      0x40\n        /* \"#utility.yul\":5348:5366   */\n      add\n      swap1\n        /* \"#utility.yul\":5330:5475   */\n      jump\t// out\n        /* \"#utility.yul\":5480:6115   */\n    tag_46:\n        /* \"#utility.yul\":5651:5653   */\n      0x20\n        /* \"#utility.yul\":5703:5724   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":5773:5786   */\n      dup3\n      mload\n        /* \"#utility.yul\":5676:5694   */\n      dup3\n      dup3\n      add\n        /* \"#utility.yul\":5795:5817   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":5480:6115   */\n      0x00\n      swap2\n        /* \"#utility.yul\":5651:5653   */\n      swap1\n        /* \"#utility.yul\":5874:5889   */\n      dup5\n      dup3\n      add\n      swap1\n        /* \"#utility.yul\":5848:5850   */\n      0x40\n        /* \"#utility.yul\":5833:5851   */\n      dup6\n      add\n      swap1\n        /* \"#utility.yul\":5480:6115   */\n      dup5\n        /* \"#utility.yul\":5920:6089   */\n    tag_203:\n        /* \"#utility.yul\":5934:5940   */\n      dup2\n        /* \"#utility.yul\":5931:5932   */\n      dup2\n        /* \"#utility.yul\":5928:5941   */\n      lt\n        /* \"#utility.yul\":5920:6089   */\n      iszero\n      tag_205\n      jumpi\n        /* \"#utility.yul\":5995:6008   */\n      dup4\n      mload\n        /* \"#utility.yul\":5983:6009   */\n      dup4\n      mstore\n        /* \"#utility.yul\":6064:6079   */\n      swap3\n      dup5\n      add\n      swap3\n        /* \"#utility.yul\":6029:6041   */\n      swap2\n      dup5\n      add\n      swap2\n        /* \"#utility.yul\":5956:5957   */\n      0x01\n        /* \"#utility.yul\":5949:5958   */\n      add\n        /* \"#utility.yul\":5920:6089   */\n      jump(tag_203)\n    tag_205:\n      pop\n        /* \"#utility.yul\":6106:6109   */\n      swap1\n      swap7\n        /* \"#utility.yul\":5631:6115   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6120:6297   */\n    tag_33:\n        /* \"#utility.yul\":6266:6291   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":6254:6256   */\n      0x20\n        /* \"#utility.yul\":6239:6257   */\n      add\n      swap1\n        /* \"#utility.yul\":6221:6297   */\n      jump\t// out\n        /* \"#utility.yul\":6302:6677   */\n    tag_133:\n        /* \"#utility.yul\":6504:6529   */\n      swap3\n      dup4\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":6603:6618   */\n      swap2\n      dup3\n      and\n        /* \"#utility.yul\":6598:6600   */\n      0x20\n        /* \"#utility.yul\":6583:6601   */\n      dup5\n      add\n        /* \"#utility.yul\":6576:6619   */\n      mstore\n        /* \"#utility.yul\":6655:6670   */\n      and\n        /* \"#utility.yul\":6650:6652   */\n      0x40\n        /* \"#utility.yul\":6635:6653   */\n      dup3\n      add\n        /* \"#utility.yul\":6628:6671   */\n      mstore\n        /* \"#utility.yul\":6492:6494   */\n      0x60\n        /* \"#utility.yul\":6477:6495   */\n      add\n      swap1\n        /* \"#utility.yul\":6459:6677   */\n      jump\t// out\n        /* \"#utility.yul\":7314:7447   */\n    tag_159:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":7391:7422   */\n      dup2\n      and\n        /* \"#utility.yul\":7381:7423   */\n      dup2\n      eq\n        /* \"#utility.yul\":7371:7373   */\n      tag_107\n      jumpi\n        /* \"#utility.yul\":7437:7438   */\n      0x00\n        /* \"#utility.yul\":7434:7435   */\n      dup1\n        /* \"#utility.yul\":7427:7439   */\n      revert\n\n    auxdata: 0xa26469706673582212206d600768879291aa1c00820dd8b1094d072a10fd84e8bf5b83533c6447ad6abf64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:341:1",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:1",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "110:229:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "156:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "165:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "173:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "158:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "158:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "158:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "131:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "140:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "127:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "127:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "152:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "123:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "123:32:1"
															},
															"nodeType": "YulIf",
															"src": "120:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "191:29:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "210:9:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "204:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "204:16:1"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "195:5:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "283:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "292:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "300:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "285:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "285:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "285:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "242:5:1"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "253:5:1"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "268:3:1",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "273:1:1",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "264:3:1"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "264:11:1"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "277:1:1",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "260:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "260:19:1"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "249:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "249:31:1"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "239:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "239:42:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "232:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:50:1"
															},
															"nodeType": "YulIf",
															"src": "229:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "318:15:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "328:5:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "318:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_contract$_IVault_$1294_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "76:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "87:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "99:6:1",
														"type": ""
													}
												],
												"src": "14:325:1"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_contract$_IVault_$1294_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(value0, value0) }\n        value0 := value\n    }\n}",
									"id": 1,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60c060405234801561001057600080fd5b50604051610b21380380610b2183398101604081905261002f9161004d565b30608052600160005560601b6001600160601b03191660a05261007b565b60006020828403121561005e578081fd5b81516001600160a01b0381168114610074578182fd5b9392505050565b60805160a05160601c610a7b6100a66000398061040452806104f55250806102975250610a7b6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063851c1bb311610066578063851c1bb3146100f1578063aaabadc514610104578063d877845c14610119578063e42abf3514610121578063fbfa77cf1461014157610093565b806338e9922e1461009857806355c67628146100ad5780636b6b9f69146100cb5780636daefab6146100de575b600080fd5b6100ab6100a6366004610916565b610149565b005b6100b56101a8565b6040516100c29190610a08565b60405180910390f35b6100ab6100d9366004610916565b6101ae565b6100ab6100ec366004610760565b610201565b6100b56100ff3660046108b6565b610293565b61010c6102e6565b6040516100c29190610997565b6100b56102f5565b61013461012f3660046107e1565b6102fb565b6040516100c291906109c4565b61010c610402565b610151610426565b6101686706f05b59d3b20000821115610258610457565b60018190556040517fa9ba3ffe0b6c366b81232caab38605a0699ad5398d6cce76f91ee809e322dafc9061019d908390610a08565b60405180910390a150565b60015490565b6101b6610426565b6101cc662386f26fc10000821115610259610457565b60028190556040517f5a0b7386237e7f07fa741efc64e59c9387d2cccafec760efed4d53387f20e19a9061019d908390610a08565b610209610469565b610211610426565b61021b8483610482565b60005b8481101561028357600086868381811061023457fe5b905060200201602081019061024991906108fa565b9050600085858481811061025957fe5b6020029190910135915061027990506001600160a01b038316858361048f565b505060010161021e565b5061028c6104ea565b5050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000826040516020016102c8929190610946565b6040516020818303038152906040528051906020012090505b919050565b60006102f06104f1565b905090565b60025490565b6060815167ffffffffffffffff8111801561031557600080fd5b5060405190808252806020026020018201604052801561033f578160200160208202803683370190505b50905060005b82518110156103fc5782818151811061035a57fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161038d9190610997565b60206040518083038186803b1580156103a557600080fd5b505afa1580156103b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103dd919061092e565b8282815181106103e957fe5b6020908102919091010152600101610345565b50919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061043d6000356001600160e01b031916610293565b905061045461044c8233610584565b610191610457565b50565b816104655761046581610614565b5050565b61047b60026000541415610190610457565b6002600055565b6104658183146067610457565b6104e58363a9059cbb60e01b84846040516024016104ae9291906109ab565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610667565b505050565b6001600055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663aaabadc56040518163ffffffff1660e01b815260040160206040518083038186803b15801561054c57600080fd5b505afa158015610560573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f091906108de565b600061058e6104f1565b6001600160a01b0316639be2a8848484306040518463ffffffff1660e01b81526004016105bd93929190610a11565b60206040518083038186803b1580156105d557600080fd5b505afa1580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060d9190610896565b9392505050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b600080836001600160a01b031683604051610682919061095e565b6000604051808303816000865af19150503d80600081146106bf576040519150601f19603f3d011682016040523d82523d6000602084013e6106c4565b606091505b509150915060008214156106dc573d6000803e3d6000fd5b6107068151600014806106fe5750818060200190518101906106fe9190610896565b6101a2610457565b50505050565b60008083601f84011261071d578081fd5b50813567ffffffffffffffff811115610734578182fd5b602083019150836020808302850101111561074e57600080fd5b9250929050565b80356102e181610a30565b600080600080600060608688031215610777578081fd5b853567ffffffffffffffff8082111561078e578283fd5b61079a89838a0161070c565b909750955060208801359150808211156107b2578283fd5b506107bf8882890161070c565b90945092505060408601356107d381610a30565b809150509295509295909350565b600060208083850312156107f3578182fd5b823567ffffffffffffffff8082111561080a578384fd5b818501915085601f83011261081d578384fd5b81358181111561082957fe5b8381026040518582820101818110858211171561084257fe5b604052828152858101935084860182860187018a1015610860578788fd5b8795505b838610156108895761087581610755565b855260019590950194938601938601610864565b5098975050505050505050565b6000602082840312156108a7578081fd5b8151801515811461060d578182fd5b6000602082840312156108c7578081fd5b81356001600160e01b03198116811461060d578182fd5b6000602082840312156108ef578081fd5b815161060d81610a30565b60006020828403121561090b578081fd5b813561060d81610a30565b600060208284031215610927578081fd5b5035919050565b60006020828403121561093f578081fd5b5051919050565b9182526001600160e01b031916602082015260240190565b60008251815b8181101561097e5760208186018101518583015201610964565b8181111561098c5782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156109fc578351835292840192918401916001016109e0565b50909695505050505050565b90815260200190565b9283526001600160a01b03918216602084015216604082015260600190565b6001600160a01b038116811461045457600080fdfea26469706673582212206d600768879291aa1c00820dd8b1094d072a10fd84e8bf5b83533c6447ad6abf64736f6c63430007060033",
							"opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xB21 CODESIZE SUB DUP1 PUSH2 0xB21 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x4D JUMP JUMPDEST ADDRESS PUSH1 0x80 MSTORE PUSH1 0x1 PUSH1 0x0 SSTORE PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0xA0 MSTORE PUSH2 0x7B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x74 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH2 0xA7B PUSH2 0xA6 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x404 MSTORE DUP1 PUSH2 0x4F5 MSTORE POP DUP1 PUSH2 0x297 MSTORE POP PUSH2 0xA7B PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x93 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x851C1BB3 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x851C1BB3 EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0xAAABADC5 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0xD877845C EQ PUSH2 0x119 JUMPI DUP1 PUSH4 0xE42ABF35 EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0xFBFA77CF EQ PUSH2 0x141 JUMPI PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH4 0x38E9922E EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x55C67628 EQ PUSH2 0xAD JUMPI DUP1 PUSH4 0x6B6B9F69 EQ PUSH2 0xCB JUMPI DUP1 PUSH4 0x6DAEFAB6 EQ PUSH2 0xDE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB PUSH2 0xA6 CALLDATASIZE PUSH1 0x4 PUSH2 0x916 JUMP JUMPDEST PUSH2 0x149 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB5 PUSH2 0x1A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC2 SWAP2 SWAP1 PUSH2 0xA08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAB PUSH2 0xD9 CALLDATASIZE PUSH1 0x4 PUSH2 0x916 JUMP JUMPDEST PUSH2 0x1AE JUMP JUMPDEST PUSH2 0xAB PUSH2 0xEC CALLDATASIZE PUSH1 0x4 PUSH2 0x760 JUMP JUMPDEST PUSH2 0x201 JUMP JUMPDEST PUSH2 0xB5 PUSH2 0xFF CALLDATASIZE PUSH1 0x4 PUSH2 0x8B6 JUMP JUMPDEST PUSH2 0x293 JUMP JUMPDEST PUSH2 0x10C PUSH2 0x2E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC2 SWAP2 SWAP1 PUSH2 0x997 JUMP JUMPDEST PUSH2 0xB5 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0x134 PUSH2 0x12F CALLDATASIZE PUSH1 0x4 PUSH2 0x7E1 JUMP JUMPDEST PUSH2 0x2FB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC2 SWAP2 SWAP1 PUSH2 0x9C4 JUMP JUMPDEST PUSH2 0x10C PUSH2 0x402 JUMP JUMPDEST PUSH2 0x151 PUSH2 0x426 JUMP JUMPDEST PUSH2 0x168 PUSH8 0x6F05B59D3B20000 DUP3 GT ISZERO PUSH2 0x258 PUSH2 0x457 JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xA9BA3FFE0B6C366B81232CAAB38605A0699AD5398D6CCE76F91EE809E322DAFC SWAP1 PUSH2 0x19D SWAP1 DUP4 SWAP1 PUSH2 0xA08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1B6 PUSH2 0x426 JUMP JUMPDEST PUSH2 0x1CC PUSH7 0x2386F26FC10000 DUP3 GT ISZERO PUSH2 0x259 PUSH2 0x457 JUMP JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x5A0B7386237E7F07FA741EFC64E59C9387D2CCCAFEC760EFED4D53387F20E19A SWAP1 PUSH2 0x19D SWAP1 DUP4 SWAP1 PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x209 PUSH2 0x469 JUMP JUMPDEST PUSH2 0x211 PUSH2 0x426 JUMP JUMPDEST PUSH2 0x21B DUP5 DUP4 PUSH2 0x482 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x283 JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x234 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x249 SWAP2 SWAP1 PUSH2 0x8FA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x259 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP PUSH2 0x279 SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP6 DUP4 PUSH2 0x48F JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x21E JUMP JUMPDEST POP PUSH2 0x28C PUSH2 0x4EA JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2C8 SWAP3 SWAP2 SWAP1 PUSH2 0x946 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F0 PUSH2 0x4F1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x315 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x33F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x3FC JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x35A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x38D SWAP2 SWAP1 PUSH2 0x997 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3DD SWAP2 SWAP1 PUSH2 0x92E JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3E9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x345 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43D PUSH1 0x0 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x293 JUMP JUMPDEST SWAP1 POP PUSH2 0x454 PUSH2 0x44C DUP3 CALLER PUSH2 0x584 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x457 JUMP JUMPDEST POP JUMP JUMPDEST DUP2 PUSH2 0x465 JUMPI PUSH2 0x465 DUP2 PUSH2 0x614 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x47B PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x190 PUSH2 0x457 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x465 DUP2 DUP4 EQ PUSH1 0x67 PUSH2 0x457 JUMP JUMPDEST PUSH2 0x4E5 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4AE SWAP3 SWAP2 SWAP1 PUSH2 0x9AB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x667 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xAAABADC5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x54C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x560 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2F0 SWAP2 SWAP1 PUSH2 0x8DE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58E PUSH2 0x4F1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9BE2A884 DUP5 DUP5 ADDRESS PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5BD SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA11 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5E9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x60D SWAP2 SWAP1 PUSH2 0x896 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 MSTORE PUSH1 0x7 PUSH1 0x24 MSTORE PUSH7 0x42414C23000030 PUSH1 0xA DUP1 DUP5 DIV DUP2 DUP2 MOD PUSH1 0x30 SWAP1 DUP2 ADD PUSH1 0x8 SHL SWAP6 DUP4 SWAP1 MOD SWAP6 SWAP1 SWAP6 ADD SWAP1 DUP3 SWAP1 DIV SWAP2 DUP3 MOD SWAP1 SWAP5 ADD PUSH1 0x10 SHL SWAP4 SWAP1 SWAP4 ADD ADD PUSH1 0xC8 SHL PUSH1 0x44 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x682 SWAP2 SWAP1 PUSH2 0x95E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6BF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6C4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 EQ ISZERO PUSH2 0x6DC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH2 0x706 DUP2 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x6FE JUMPI POP DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6FE SWAP2 SWAP1 PUSH2 0x896 JUMP JUMPDEST PUSH2 0x1A2 PUSH2 0x457 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x71D JUMPI DUP1 DUP2 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x734 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x74E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x2E1 DUP2 PUSH2 0xA30 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x777 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x78E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x79A DUP10 DUP4 DUP11 ADD PUSH2 0x70C JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x7B2 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x7BF DUP9 DUP3 DUP10 ADD PUSH2 0x70C JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x7D3 DUP2 PUSH2 0xA30 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7F3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x80A JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x81D JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x829 JUMPI INVALID JUMPDEST DUP4 DUP2 MUL PUSH1 0x40 MLOAD DUP6 DUP3 DUP3 ADD ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x842 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP6 DUP2 ADD SWAP4 POP DUP5 DUP7 ADD DUP3 DUP7 ADD DUP8 ADD DUP11 LT ISZERO PUSH2 0x860 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x889 JUMPI PUSH2 0x875 DUP2 PUSH2 0x755 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP7 ADD SWAP4 DUP7 ADD PUSH2 0x864 JUMP JUMPDEST POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8A7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x60D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8C7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x60D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8EF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x60D DUP2 PUSH2 0xA30 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x90B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x60D DUP2 PUSH2 0xA30 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x927 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x93F JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x24 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x97E JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x964 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x98C JUMPI DUP3 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9FC JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x9E0 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x454 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0x600768879291AA1C00820DD8B109 0x4D SMOD 0x2A LT REVERT DUP5 0xE8 0xBF JUMPDEST DUP4 MSTORE8 EXTCODECOPY PUSH5 0x47AD6ABF64 PUSH20 0x6F6C634300070600330000000000000000000000 ",
							"sourceMap": "62773:3493:0:-:0;;;63834:258;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;64045:4;21693:46;;19350:1;64021:31;19461:22;64070:14:::1;::::0;-1:-1:-1;;;;;;64070:14:0;::::1;::::0;62773:3493;;14:325:1;;152:2;140:9;131:7;127:23;123:32;120:2;;;173:6;165;158:22;120:2;204:16;;-1:-1:-1;;;;;249:31:1;;239:42;;229:2;;300:6;292;285:22;229:2;328:5;110:229;-1:-1:-1;;;110:229:1:o;:::-;62773:3493:0;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:7449:1",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:1",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "101:310:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "150:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "159:6:1"
																				},
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "167:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "152:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "152:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "152:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "129:6:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "137:4:1",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "125:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "125:17:1"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "144:3:1"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "121:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "121:27:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "114:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "114:35:1"
															},
															"nodeType": "YulIf",
															"src": "111:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "185:30:1",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "208:6:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "195:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "195:20:1"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "185:6:1"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "258:30:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "arrayPos",
																					"nodeType": "YulIdentifier",
																					"src": "267:8:1"
																				},
																				{
																					"name": "arrayPos",
																					"nodeType": "YulIdentifier",
																					"src": "277:8:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "260:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "260:26:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "260:26:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "230:6:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "238:18:1",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "227:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "227:30:1"
															},
															"nodeType": "YulIf",
															"src": "224:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "297:29:1",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "313:6:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "321:4:1",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "309:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "309:17:1"
															},
															"variableNames": [
																{
																	"name": "arrayPos",
																	"nodeType": "YulIdentifier",
																	"src": "297:8:1"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "389:16:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "398:1:1",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "401:1:1",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "391:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "391:12:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "391:12:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "349:6:1"
																					},
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "361:6:1"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "369:4:1",
																								"type": "",
																								"value": "0x20"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nodeType": "YulIdentifier",
																							"src": "357:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "357:17:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "345:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "345:30:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "377:4:1",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "341:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "341:41:1"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "384:3:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "338:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "338:50:1"
															},
															"nodeType": "YulIf",
															"src": "335:2:1"
														}
													]
												},
												"name": "abi_decode_t_array$_IERC20_$dyn_calldata",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "64:6:1",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "72:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "arrayPos",
														"nodeType": "YulTypedName",
														"src": "80:8:1",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "90:6:1",
														"type": ""
													}
												],
												"src": "14:397:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "476:87:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "486:29:1",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "508:6:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "495:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "495:20:1"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "486:5:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "551:5:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "524:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "524:33:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "524:33:1"
														}
													]
												},
												"name": "abi_decode_t_contract$_IERC20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "455:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "466:5:1",
														"type": ""
													}
												],
												"src": "416:147:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "756:772:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "802:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "811:6:1"
																				},
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "819:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "804:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "804:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "804:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "777:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "786:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "773:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "773:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "798:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "769:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "769:32:1"
															},
															"nodeType": "YulIf",
															"src": "766:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "837:37:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "864:9:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "851:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "851:23:1"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "841:6:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "883:28:1",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "893:18:1",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "887:2:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "938:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "947:6:1"
																				},
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "955:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "940:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "940:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "940:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "926:6:1"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "934:2:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "923:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "923:14:1"
															},
															"nodeType": "YulIf",
															"src": "920:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "973:99:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1044:9:1"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1055:6:1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1040:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1040:22:1"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1064:7:1"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_array$_IERC20_$dyn_calldata",
																	"nodeType": "YulIdentifier",
																	"src": "999:40:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "999:73:1"
															},
															"variables": [
																{
																	"name": "value0_1",
																	"nodeType": "YulTypedName",
																	"src": "977:8:1",
																	"type": ""
																},
																{
																	"name": "value1_1",
																	"nodeType": "YulTypedName",
																	"src": "987:8:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1081:18:1",
															"value": {
																"name": "value0_1",
																"nodeType": "YulIdentifier",
																"src": "1091:8:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1081:6:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1108:18:1",
															"value": {
																"name": "value1_1",
																"nodeType": "YulIdentifier",
																"src": "1118:8:1"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1108:6:1"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1135:48:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1168:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1179:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1164:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1164:18:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1151:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1151:32:1"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "1139:8:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1212:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "1221:6:1"
																				},
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "1229:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1214:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1214:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1214:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "1198:8:1"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1208:2:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1195:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1195:16:1"
															},
															"nodeType": "YulIf",
															"src": "1192:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1247:101:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1318:9:1"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "1329:8:1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1314:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1314:24:1"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1340:7:1"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_array$_IERC20_$dyn_calldata",
																	"nodeType": "YulIdentifier",
																	"src": "1273:40:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1273:75:1"
															},
															"variables": [
																{
																	"name": "value2_1",
																	"nodeType": "YulTypedName",
																	"src": "1251:8:1",
																	"type": ""
																},
																{
																	"name": "value3_1",
																	"nodeType": "YulTypedName",
																	"src": "1261:8:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1357:18:1",
															"value": {
																"name": "value2_1",
																"nodeType": "YulIdentifier",
																"src": "1367:8:1"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1357:6:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1384:18:1",
															"value": {
																"name": "value3_1",
																"nodeType": "YulIdentifier",
																"src": "1394:8:1"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "1384:6:1"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1411:45:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1441:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1452:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1437:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1437:18:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1424:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1424:32:1"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1415:5:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1492:5:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1465:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1465:33:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1465:33:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1507:15:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1517:5:1"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "1507:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_contract$_IERC20_$451_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "690:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "701:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "713:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "721:6:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "729:6:1",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "737:6:1",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "745:6:1",
														"type": ""
													}
												],
												"src": "568:960:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1642:1062:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1652:12:1",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1662:2:1",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1656:2:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1709:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1718:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1726:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1711:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1711:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1711:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1684:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1693:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1680:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1680:23:1"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1705:2:1"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1676:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1676:32:1"
															},
															"nodeType": "YulIf",
															"src": "1673:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1744:37:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1771:9:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1758:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1758:23:1"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1748:6:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1790:28:1",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1800:18:1",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "1794:2:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1845:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1854:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1862:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1847:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1847:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1847:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1833:6:1"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "1841:2:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1830:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1830:14:1"
															},
															"nodeType": "YulIf",
															"src": "1827:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1880:32:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1894:9:1"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1905:6:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1890:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1890:22:1"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "1884:2:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1960:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1969:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1977:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1962:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1962:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1962:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "1939:2:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1943:4:1",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1935:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1935:13:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1950:7:1"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "1931:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1931:27:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1924:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1924:35:1"
															},
															"nodeType": "YulIf",
															"src": "1921:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1995:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "2018:2:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2005:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2005:16:1"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "1999:2:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2044:13:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "invalid",
																				"nodeType": "YulIdentifier",
																				"src": "2046:7:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2046:9:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2046:9:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "2036:2:1"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "2040:2:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2033:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2033:10:1"
															},
															"nodeType": "YulIf",
															"src": "2030:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2066:21:1",
															"value": {
																"arguments": [
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "2080:2:1"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2084:2:1"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "2076:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2076:11:1"
															},
															"variables": [
																{
																	"name": "_5",
																	"nodeType": "YulTypedName",
																	"src": "2070:2:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2096:23:1",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2116:2:1",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2110:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2110:9:1"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "2100:6:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2128:42:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "2154:6:1"
																			},
																			{
																				"name": "_5",
																				"nodeType": "YulIdentifier",
																				"src": "2162:2:1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2150:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2150:15:1"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2167:2:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2146:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2146:24:1"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "2132:10:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2229:13:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "invalid",
																				"nodeType": "YulIdentifier",
																				"src": "2231:7:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2231:9:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2231:9:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "2188:10:1"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "2200:2:1"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "2185:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2185:18:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "2208:10:1"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "2220:6:1"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "2205:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2205:22:1"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "2182:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2182:46:1"
															},
															"nodeType": "YulIf",
															"src": "2179:2:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2258:2:1",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "2262:10:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2251:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2251:22:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2251:22:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2282:17:1",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "2293:6:1"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "2286:3:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "2315:6:1"
																	},
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "2323:2:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2308:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2308:18:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2308:18:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2335:22:1",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "2346:6:1"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2354:2:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2342:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2342:15:1"
															},
															"variableNames": [
																{
																	"name": "dst",
																	"nodeType": "YulIdentifier",
																	"src": "2335:3:1"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2366:22:1",
															"value": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "2381:2:1"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2385:2:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2377:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2377:11:1"
															},
															"variables": [
																{
																	"name": "src",
																	"nodeType": "YulTypedName",
																	"src": "2370:3:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2434:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2443:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2451:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2436:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2436:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2436:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "2411:2:1"
																					},
																					{
																						"name": "_5",
																						"nodeType": "YulIdentifier",
																						"src": "2415:2:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2407:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2407:11:1"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "2420:2:1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2403:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2403:20:1"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "2425:7:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2400:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2400:33:1"
															},
															"nodeType": "YulIf",
															"src": "2397:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2469:15:1",
															"value": {
																"name": "value0",
																"nodeType": "YulIdentifier",
																"src": "2478:6:1"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "2473:1:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2538:135:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "2559:3:1"
																				},
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nodeType": "YulIdentifier",
																							"src": "2594:3:1"
																						}
																					],
																					"functionName": {
																						"name": "abi_decode_t_contract$_IERC20",
																						"nodeType": "YulIdentifier",
																						"src": "2564:29:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2564:34:1"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2552:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2552:47:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2552:47:1"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "2612:19:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "2623:3:1"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "2628:2:1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2619:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2619:12:1"
																		},
																		"variableNames": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "2612:3:1"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "2644:19:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "src",
																					"nodeType": "YulIdentifier",
																					"src": "2655:3:1"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "2660:2:1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2651:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2651:12:1"
																		},
																		"variableNames": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "2644:3:1"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "2504:1:1"
																	},
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "2507:2:1"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "2501:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2501:9:1"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "2511:18:1",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2513:14:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "2522:1:1"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2525:1:1",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2518:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2518:9:1"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "2513:1:1"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "2497:3:1",
																"statements": []
															},
															"src": "2493:180:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2682:16:1",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "2692:6:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2682:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_contract$_IERC20_$451_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1608:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1619:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1631:6:1",
														"type": ""
													}
												],
												"src": "1533:1171:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2787:219:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2833:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2842:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2850:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2835:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2835:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2835:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2808:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2817:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2804:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2804:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2829:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2800:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2800:32:1"
															},
															"nodeType": "YulIf",
															"src": "2797:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2868:29:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2887:9:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2881:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2881:16:1"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2872:5:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2950:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2959:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2967:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2952:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2952:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2952:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2919:5:1"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "2940:5:1"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "2933:6:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2933:13:1"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2926:6:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2926:21:1"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2916:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2916:32:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2909:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2909:40:1"
															},
															"nodeType": "YulIf",
															"src": "2906:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2985:15:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2995:5:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2985:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2753:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2764:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2776:6:1",
														"type": ""
													}
												],
												"src": "2709:297:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3080:237:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3126:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3135:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3143:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3128:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3128:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3128:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3101:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3110:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3097:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3097:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3122:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3093:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3093:32:1"
															},
															"nodeType": "YulIf",
															"src": "3090:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3161:36:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3187:9:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3174:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3174:23:1"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "3165:5:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3261:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3270:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3278:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3263:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3263:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3263:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3219:5:1"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3230:5:1"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3241:3:1",
																								"type": "",
																								"value": "224"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3246:10:1",
																								"type": "",
																								"value": "0xffffffff"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "3237:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3237:20:1"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "3226:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3226:32:1"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3216:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3216:43:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3209:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3209:51:1"
															},
															"nodeType": "YulIf",
															"src": "3206:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3296:15:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3306:5:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3296:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3046:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3057:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3069:6:1",
														"type": ""
													}
												],
												"src": "3011:306:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3422:182:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3468:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3477:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3485:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3470:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3470:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3470:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3443:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3452:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3439:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3439:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3464:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3435:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3435:32:1"
															},
															"nodeType": "YulIf",
															"src": "3432:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3503:29:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3522:9:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3516:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3516:16:1"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "3507:5:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3568:5:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "3541:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3541:33:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3541:33:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3583:15:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3593:5:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3583:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_contract$_IAuthorizer_$495_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3388:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3399:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3411:6:1",
														"type": ""
													}
												],
												"src": "3322:282:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3693:189:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3739:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3748:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3756:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3741:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3741:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3741:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3714:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3723:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3710:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3710:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3735:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3706:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3706:32:1"
															},
															"nodeType": "YulIf",
															"src": "3703:2:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3774:36:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3800:9:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3787:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3787:23:1"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "3778:5:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3846:5:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "3819:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3819:33:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3819:33:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3861:15:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3871:5:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3861:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_contract$_IERC20_$451",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3659:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3670:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3682:6:1",
														"type": ""
													}
												],
												"src": "3609:273:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3957:120:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4003:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4012:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4020:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4005:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4005:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4005:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3978:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3987:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3974:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3974:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3999:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3970:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3970:32:1"
															},
															"nodeType": "YulIf",
															"src": "3967:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4038:33:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4061:9:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4048:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4048:23:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4038:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3923:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3934:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3946:6:1",
														"type": ""
													}
												],
												"src": "3887:190:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4163:113:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4209:26:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4218:6:1"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "4226:6:1"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4211:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4211:22:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4211:22:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4184:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4193:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4180:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4180:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4205:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4176:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4176:32:1"
															},
															"nodeType": "YulIf",
															"src": "4173:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4244:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4260:9:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4254:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4254:16:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4244:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4129:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4140:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4152:6:1",
														"type": ""
													}
												],
												"src": "4082:194:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4426:127:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4443:3:1"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4448:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4436:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4436:19:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4436:19:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "4475:3:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4480:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4471:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4471:12:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "4489:6:1"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4501:3:1",
																						"type": "",
																						"value": "224"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4506:10:1",
																						"type": "",
																						"value": "0xffffffff"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "4497:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4497:20:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4485:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4485:33:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4464:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4464:55:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4464:55:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4528:19:1",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4539:3:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4544:2:1",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4535:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4535:12:1"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4528:3:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes32_t_bytes4__to_t_bytes32_t_bytes4__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4394:3:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4399:6:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4407:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4418:3:1",
														"type": ""
													}
												],
												"src": "4281:272:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4695:293:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4705:27:1",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4725:6:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4719:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4719:13:1"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "4709:6:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4741:12:1",
															"value": {
																"name": "end",
																"nodeType": "YulIdentifier",
																"src": "4750:3:1"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "4745:1:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4814:77:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "4839:3:1"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "4844:1:1"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "4835:3:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4835:11:1"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "4862:6:1"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "4870:1:1"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "4858:3:1"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "4858:14:1"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "4874:4:1",
																									"type": "",
																									"value": "0x20"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "4854:3:1"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "4854:25:1"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "4848:5:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4848:32:1"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "4828:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4828:53:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4828:53:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "4773:1:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4776:6:1"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "4770:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4770:13:1"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "4784:21:1",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "4786:17:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "4795:1:1"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4798:4:1",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "4791:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4791:12:1"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "4786:1:1"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "4766:3:1",
																"statements": []
															},
															"src": "4762:129:1"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4917:33:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "4930:3:1"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "4935:6:1"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "4926:3:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4926:16:1"
																				},
																				{
																					"name": "end",
																					"nodeType": "YulIdentifier",
																					"src": "4944:3:1"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "4919:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4919:29:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4919:29:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "4906:1:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4909:6:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4903:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4903:13:1"
															},
															"nodeType": "YulIf",
															"src": "4900:2:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4959:23:1",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4970:3:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4975:6:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4966:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4966:16:1"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "4959:3:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4671:3:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4676:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4687:3:1",
														"type": ""
													}
												],
												"src": "4558:430:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5094:102:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5104:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5116:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5127:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5112:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5112:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5104:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5146:9:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5161:6:1"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5177:3:1",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5182:1:1",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "5173:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5173:11:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5186:1:1",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "5169:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5169:19:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5157:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5157:32:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5139:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5139:51:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5139:51:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5063:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5074:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5085:4:1",
														"type": ""
													}
												],
												"src": "4993:203:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5330:145:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5340:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5352:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5363:2:1",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5348:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5348:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5340:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5382:9:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5397:6:1"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5413:3:1",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5418:1:1",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "5409:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5409:11:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5422:1:1",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "5405:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5405:19:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5393:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5393:32:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5375:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5375:51:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5375:51:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5446:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5457:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5442:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5442:18:1"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "5462:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5435:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5435:34:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5435:34:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5291:9:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5302:6:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5310:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5321:4:1",
														"type": ""
													}
												],
												"src": "5201:274:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5631:484:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5641:12:1",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5651:2:1",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "5645:2:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5662:32:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5680:9:1"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "5691:2:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5676:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5676:18:1"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nodeType": "YulTypedName",
																	"src": "5666:6:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5710:9:1"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "5721:2:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5703:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5703:21:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5703:21:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5733:17:1",
															"value": {
																"name": "tail_1",
																"nodeType": "YulIdentifier",
																"src": "5744:6:1"
															},
															"variables": [
																{
																	"name": "pos",
																	"nodeType": "YulTypedName",
																	"src": "5737:3:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5759:27:1",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5779:6:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5773:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5773:13:1"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "5763:6:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "tail_1",
																		"nodeType": "YulIdentifier",
																		"src": "5802:6:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5810:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5795:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5795:22:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5795:22:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5826:25:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5837:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5848:2:1",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5833:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5833:18:1"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "5826:3:1"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5860:29:1",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5878:6:1"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "5886:2:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5874:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5874:15:1"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulTypedName",
																	"src": "5864:6:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5898:13:1",
															"value": {
																"name": "tail",
																"nodeType": "YulIdentifier",
																"src": "5907:4:1"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "5902:1:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5969:120:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "5990:3:1"
																				},
																				{
																					"arguments": [
																						{
																							"name": "srcPtr",
																							"nodeType": "YulIdentifier",
																							"src": "6001:6:1"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "5995:5:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5995:13:1"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5983:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5983:26:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5983:26:1"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "6022:19:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "6033:3:1"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "6038:2:1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "6029:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6029:12:1"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "6022:3:1"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "6054:25:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "6068:6:1"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "6076:2:1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "6064:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6064:15:1"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nodeType": "YulIdentifier",
																				"src": "6054:6:1"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "5931:1:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5934:6:1"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "5928:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5928:13:1"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "5942:18:1",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "5944:14:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "5953:1:1"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5956:1:1",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "5949:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5949:9:1"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "5944:1:1"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "5924:3:1",
																"statements": []
															},
															"src": "5920:169:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6098:11:1",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "6106:3:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6098:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5600:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5611:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5622:4:1",
														"type": ""
													}
												],
												"src": "5480:635:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6221:76:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6231:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6243:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6254:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6239:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6239:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6231:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6273:9:1"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6284:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6266:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6266:25:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6266:25:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6190:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6201:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6212:4:1",
														"type": ""
													}
												],
												"src": "6120:177:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6459:218:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6469:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6481:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6492:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6477:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6477:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6469:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6511:9:1"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6522:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6504:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6504:25:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6504:25:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6538:29:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6556:3:1",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6561:1:1",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6552:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6552:11:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6565:1:1",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "6548:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6548:19:1"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "6542:2:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6587:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6598:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6583:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6583:18:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "6607:6:1"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "6615:2:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6603:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6603:15:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6576:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6576:43:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6576:43:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6639:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6650:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6635:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6635:18:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value2",
																				"nodeType": "YulIdentifier",
																				"src": "6659:6:1"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "6667:2:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6655:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6655:15:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6628:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6628:43:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6628:43:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6412:9:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "6423:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6431:6:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6439:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6450:4:1",
														"type": ""
													}
												],
												"src": "6302:375:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6802:102:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6812:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6824:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6835:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6820:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6820:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6812:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6854:9:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "6869:6:1"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6885:3:1",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6890:1:1",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "6881:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6881:11:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "6894:1:1",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "6877:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6877:19:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6865:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6865:32:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6847:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6847:51:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6847:51:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IAuthorizer_$495__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6771:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6782:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6793:4:1",
														"type": ""
													}
												],
												"src": "6682:222:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7025:102:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7035:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7047:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7058:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7043:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "7043:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7035:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7077:9:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "7092:6:1"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "7108:3:1",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "7113:1:1",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "7104:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7104:11:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7117:1:1",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "7100:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7100:19:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7088:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7088:32:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7070:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "7070:51:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7070:51:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IVault_$1294__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6994:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7005:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7016:4:1",
														"type": ""
													}
												],
												"src": "6909:218:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7233:76:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7243:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7255:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7266:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7251:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "7251:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7243:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7285:9:1"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7296:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7278:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "7278:25:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7278:25:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7202:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7213:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7224:4:1",
														"type": ""
													}
												],
												"src": "7132:177:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7361:86:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7425:16:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7434:1:1",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7437:1:1",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7427:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7427:12:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7427:12:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "7384:5:1"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "7395:5:1"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "7410:3:1",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "7415:1:1",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "7406:3:1"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "7406:11:1"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "7419:1:1",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "7402:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7402:19:1"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "7391:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7391:31:1"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "7381:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7381:42:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "7374:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "7374:50:1"
															},
															"nodeType": "YulIf",
															"src": "7371:2:1"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7350:5:1",
														"type": ""
													}
												],
												"src": "7314:133:1"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_t_array$_IERC20_$dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(length, length) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(arrayPos, arrayPos) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, mul(length, 0x20)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_t_contract$_IERC20(offset) -> value\n    {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n    function abi_decode_tuple_t_array$_t_contract$_IERC20_$451_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_address(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value4, value4) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value4, value4) }\n        let value0_1, value1_1 := abi_decode_t_array$_IERC20_$dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(value4, value4) }\n        let value2_1, value3_1 := abi_decode_t_array$_IERC20_$dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let value := calldataload(add(headStart, 64))\n        validator_revert_t_address(value)\n        value4 := value\n    }\n    function abi_decode_tuple_t_array$_t_contract$_IERC20_$451_$dyn_memory_ptr(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(value0, value0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(value0, value0) }\n        let _4 := calldataload(_3)\n        if gt(_4, _2) { invalid() }\n        let _5 := mul(_4, _1)\n        let memPtr := mload(64)\n        let newFreePtr := add(add(memPtr, _5), _1)\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { invalid() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _4)\n        dst := add(memPtr, _1)\n        let src := add(_3, _1)\n        if gt(add(add(_3, _5), _1), dataEnd) { revert(value0, value0) }\n        let i := value0\n        for { } lt(i, _4) { i := add(i, 1) }\n        {\n            mstore(dst, abi_decode_t_contract$_IERC20(src))\n            dst := add(dst, _1)\n            src := add(src, _1)\n        }\n        value0 := memPtr\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IAuthorizer_$495_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$451(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_packed_t_bytes32_t_bytes4__to_t_bytes32_t_bytes4__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), and(value1, shl(224, 0xffffffff)))\n        end := add(pos, 36)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        let i := end\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            mstore(add(pos, i), mload(add(add(value0, i), 0x20)))\n        }\n        if gt(i, length) { mstore(add(pos, length), end) }\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := tail\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_encode_tuple_t_contract$_IAuthorizer_$495__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_contract$_IVault_$1294__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_t_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}",
									"id": 1,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"647": [
									{
										"length": 32,
										"start": 663
									}
								],
								"1312": [
									{
										"length": 32,
										"start": 1028
									},
									{
										"length": 32,
										"start": 1269
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100935760003560e01c8063851c1bb311610066578063851c1bb3146100f1578063aaabadc514610104578063d877845c14610119578063e42abf3514610121578063fbfa77cf1461014157610093565b806338e9922e1461009857806355c67628146100ad5780636b6b9f69146100cb5780636daefab6146100de575b600080fd5b6100ab6100a6366004610916565b610149565b005b6100b56101a8565b6040516100c29190610a08565b60405180910390f35b6100ab6100d9366004610916565b6101ae565b6100ab6100ec366004610760565b610201565b6100b56100ff3660046108b6565b610293565b61010c6102e6565b6040516100c29190610997565b6100b56102f5565b61013461012f3660046107e1565b6102fb565b6040516100c291906109c4565b61010c610402565b610151610426565b6101686706f05b59d3b20000821115610258610457565b60018190556040517fa9ba3ffe0b6c366b81232caab38605a0699ad5398d6cce76f91ee809e322dafc9061019d908390610a08565b60405180910390a150565b60015490565b6101b6610426565b6101cc662386f26fc10000821115610259610457565b60028190556040517f5a0b7386237e7f07fa741efc64e59c9387d2cccafec760efed4d53387f20e19a9061019d908390610a08565b610209610469565b610211610426565b61021b8483610482565b60005b8481101561028357600086868381811061023457fe5b905060200201602081019061024991906108fa565b9050600085858481811061025957fe5b6020029190910135915061027990506001600160a01b038316858361048f565b505060010161021e565b5061028c6104ea565b5050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000826040516020016102c8929190610946565b6040516020818303038152906040528051906020012090505b919050565b60006102f06104f1565b905090565b60025490565b6060815167ffffffffffffffff8111801561031557600080fd5b5060405190808252806020026020018201604052801561033f578160200160208202803683370190505b50905060005b82518110156103fc5782818151811061035a57fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161038d9190610997565b60206040518083038186803b1580156103a557600080fd5b505afa1580156103b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103dd919061092e565b8282815181106103e957fe5b6020908102919091010152600101610345565b50919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061043d6000356001600160e01b031916610293565b905061045461044c8233610584565b610191610457565b50565b816104655761046581610614565b5050565b61047b60026000541415610190610457565b6002600055565b6104658183146067610457565b6104e58363a9059cbb60e01b84846040516024016104ae9291906109ab565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610667565b505050565b6001600055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663aaabadc56040518163ffffffff1660e01b815260040160206040518083038186803b15801561054c57600080fd5b505afa158015610560573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f091906108de565b600061058e6104f1565b6001600160a01b0316639be2a8848484306040518463ffffffff1660e01b81526004016105bd93929190610a11565b60206040518083038186803b1580156105d557600080fd5b505afa1580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060d9190610896565b9392505050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b600080836001600160a01b031683604051610682919061095e565b6000604051808303816000865af19150503d80600081146106bf576040519150601f19603f3d011682016040523d82523d6000602084013e6106c4565b606091505b509150915060008214156106dc573d6000803e3d6000fd5b6107068151600014806106fe5750818060200190518101906106fe9190610896565b6101a2610457565b50505050565b60008083601f84011261071d578081fd5b50813567ffffffffffffffff811115610734578182fd5b602083019150836020808302850101111561074e57600080fd5b9250929050565b80356102e181610a30565b600080600080600060608688031215610777578081fd5b853567ffffffffffffffff8082111561078e578283fd5b61079a89838a0161070c565b909750955060208801359150808211156107b2578283fd5b506107bf8882890161070c565b90945092505060408601356107d381610a30565b809150509295509295909350565b600060208083850312156107f3578182fd5b823567ffffffffffffffff8082111561080a578384fd5b818501915085601f83011261081d578384fd5b81358181111561082957fe5b8381026040518582820101818110858211171561084257fe5b604052828152858101935084860182860187018a1015610860578788fd5b8795505b838610156108895761087581610755565b855260019590950194938601938601610864565b5098975050505050505050565b6000602082840312156108a7578081fd5b8151801515811461060d578182fd5b6000602082840312156108c7578081fd5b81356001600160e01b03198116811461060d578182fd5b6000602082840312156108ef578081fd5b815161060d81610a30565b60006020828403121561090b578081fd5b813561060d81610a30565b600060208284031215610927578081fd5b5035919050565b60006020828403121561093f578081fd5b5051919050565b9182526001600160e01b031916602082015260240190565b60008251815b8181101561097e5760208186018101518583015201610964565b8181111561098c5782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156109fc578351835292840192918401916001016109e0565b50909695505050505050565b90815260200190565b9283526001600160a01b03918216602084015216604082015260600190565b6001600160a01b038116811461045457600080fdfea26469706673582212206d600768879291aa1c00820dd8b1094d072a10fd84e8bf5b83533c6447ad6abf64736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x93 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x851C1BB3 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x851C1BB3 EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0xAAABADC5 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0xD877845C EQ PUSH2 0x119 JUMPI DUP1 PUSH4 0xE42ABF35 EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0xFBFA77CF EQ PUSH2 0x141 JUMPI PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH4 0x38E9922E EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x55C67628 EQ PUSH2 0xAD JUMPI DUP1 PUSH4 0x6B6B9F69 EQ PUSH2 0xCB JUMPI DUP1 PUSH4 0x6DAEFAB6 EQ PUSH2 0xDE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAB PUSH2 0xA6 CALLDATASIZE PUSH1 0x4 PUSH2 0x916 JUMP JUMPDEST PUSH2 0x149 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xB5 PUSH2 0x1A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC2 SWAP2 SWAP1 PUSH2 0xA08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAB PUSH2 0xD9 CALLDATASIZE PUSH1 0x4 PUSH2 0x916 JUMP JUMPDEST PUSH2 0x1AE JUMP JUMPDEST PUSH2 0xAB PUSH2 0xEC CALLDATASIZE PUSH1 0x4 PUSH2 0x760 JUMP JUMPDEST PUSH2 0x201 JUMP JUMPDEST PUSH2 0xB5 PUSH2 0xFF CALLDATASIZE PUSH1 0x4 PUSH2 0x8B6 JUMP JUMPDEST PUSH2 0x293 JUMP JUMPDEST PUSH2 0x10C PUSH2 0x2E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC2 SWAP2 SWAP1 PUSH2 0x997 JUMP JUMPDEST PUSH2 0xB5 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0x134 PUSH2 0x12F CALLDATASIZE PUSH1 0x4 PUSH2 0x7E1 JUMP JUMPDEST PUSH2 0x2FB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC2 SWAP2 SWAP1 PUSH2 0x9C4 JUMP JUMPDEST PUSH2 0x10C PUSH2 0x402 JUMP JUMPDEST PUSH2 0x151 PUSH2 0x426 JUMP JUMPDEST PUSH2 0x168 PUSH8 0x6F05B59D3B20000 DUP3 GT ISZERO PUSH2 0x258 PUSH2 0x457 JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xA9BA3FFE0B6C366B81232CAAB38605A0699AD5398D6CCE76F91EE809E322DAFC SWAP1 PUSH2 0x19D SWAP1 DUP4 SWAP1 PUSH2 0xA08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1B6 PUSH2 0x426 JUMP JUMPDEST PUSH2 0x1CC PUSH7 0x2386F26FC10000 DUP3 GT ISZERO PUSH2 0x259 PUSH2 0x457 JUMP JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x5A0B7386237E7F07FA741EFC64E59C9387D2CCCAFEC760EFED4D53387F20E19A SWAP1 PUSH2 0x19D SWAP1 DUP4 SWAP1 PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x209 PUSH2 0x469 JUMP JUMPDEST PUSH2 0x211 PUSH2 0x426 JUMP JUMPDEST PUSH2 0x21B DUP5 DUP4 PUSH2 0x482 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x283 JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x234 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x249 SWAP2 SWAP1 PUSH2 0x8FA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x259 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP PUSH2 0x279 SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP6 DUP4 PUSH2 0x48F JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x21E JUMP JUMPDEST POP PUSH2 0x28C PUSH2 0x4EA JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2C8 SWAP3 SWAP2 SWAP1 PUSH2 0x946 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F0 PUSH2 0x4F1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x315 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x33F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x3FC JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x35A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x38D SWAP2 SWAP1 PUSH2 0x997 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3DD SWAP2 SWAP1 PUSH2 0x92E JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3E9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x345 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43D PUSH1 0x0 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x293 JUMP JUMPDEST SWAP1 POP PUSH2 0x454 PUSH2 0x44C DUP3 CALLER PUSH2 0x584 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x457 JUMP JUMPDEST POP JUMP JUMPDEST DUP2 PUSH2 0x465 JUMPI PUSH2 0x465 DUP2 PUSH2 0x614 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x47B PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x190 PUSH2 0x457 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x465 DUP2 DUP4 EQ PUSH1 0x67 PUSH2 0x457 JUMP JUMPDEST PUSH2 0x4E5 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4AE SWAP3 SWAP2 SWAP1 PUSH2 0x9AB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x667 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xAAABADC5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x54C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x560 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2F0 SWAP2 SWAP1 PUSH2 0x8DE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58E PUSH2 0x4F1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9BE2A884 DUP5 DUP5 ADDRESS PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5BD SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA11 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5E9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x60D SWAP2 SWAP1 PUSH2 0x896 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 MSTORE PUSH1 0x7 PUSH1 0x24 MSTORE PUSH7 0x42414C23000030 PUSH1 0xA DUP1 DUP5 DIV DUP2 DUP2 MOD PUSH1 0x30 SWAP1 DUP2 ADD PUSH1 0x8 SHL SWAP6 DUP4 SWAP1 MOD SWAP6 SWAP1 SWAP6 ADD SWAP1 DUP3 SWAP1 DIV SWAP2 DUP3 MOD SWAP1 SWAP5 ADD PUSH1 0x10 SHL SWAP4 SWAP1 SWAP4 ADD ADD PUSH1 0xC8 SHL PUSH1 0x44 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x682 SWAP2 SWAP1 PUSH2 0x95E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6BF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6C4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 EQ ISZERO PUSH2 0x6DC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH2 0x706 DUP2 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x6FE JUMPI POP DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6FE SWAP2 SWAP1 PUSH2 0x896 JUMP JUMPDEST PUSH2 0x1A2 PUSH2 0x457 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x71D JUMPI DUP1 DUP2 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x734 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x74E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x2E1 DUP2 PUSH2 0xA30 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x777 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x78E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x79A DUP10 DUP4 DUP11 ADD PUSH2 0x70C JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x7B2 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x7BF DUP9 DUP3 DUP10 ADD PUSH2 0x70C JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x7D3 DUP2 PUSH2 0xA30 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7F3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x80A JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x81D JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x829 JUMPI INVALID JUMPDEST DUP4 DUP2 MUL PUSH1 0x40 MLOAD DUP6 DUP3 DUP3 ADD ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x842 JUMPI INVALID JUMPDEST PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP6 DUP2 ADD SWAP4 POP DUP5 DUP7 ADD DUP3 DUP7 ADD DUP8 ADD DUP11 LT ISZERO PUSH2 0x860 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x889 JUMPI PUSH2 0x875 DUP2 PUSH2 0x755 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP7 ADD SWAP4 DUP7 ADD PUSH2 0x864 JUMP JUMPDEST POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8A7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x60D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8C7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x60D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8EF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x60D DUP2 PUSH2 0xA30 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x90B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x60D DUP2 PUSH2 0xA30 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x927 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x93F JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x24 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x97E JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x964 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x98C JUMPI DUP3 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9FC JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x9E0 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x454 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH14 0x600768879291AA1C00820DD8B109 0x4D SMOD 0x2A LT REVERT DUP5 0xE8 0xBF JUMPDEST DUP4 MSTORE8 EXTCODECOPY PUSH5 0x47AD6ABF64 PUSH20 0x6F6C634300070600330000000000000000000000 ",
							"sourceMap": "62773:3493:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;64567:319;;;;;;:::i;:::-;;:::i;:::-;;65305:108;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;64894:403;;;;;;:::i;:::-;;:::i;64100:459::-;;;;;;:::i;:::-;;:::i;22270:435::-;;;;;;:::i;:::-;;:::i;65854:103::-;;;:::i;:::-;;;;;;;:::i;65421:118::-;;;:::i;65547:299::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;63114:29::-;;;:::i;64567:319::-;21927:21;:19;:21::i;:::-;64660:104:::1;63009:5;64669:20;:57;;11165:3;64660:8;:104::i;:::-;64775:18;:41:::0;;;64832:46:::1;::::0;::::1;::::0;::::1;::::0;64796:20;;64832:46:::1;:::i;:::-;;;;;;;;64567:319:::0;:::o;65305:108::-;65387:18;;65305:108;:::o;64894:403::-;21927:21;:19;:21::i;:::-;64997:158:::1;63095:4;65020:25;:68;;11238:3;64997:8;:158::i;:::-;65166:23;:51:::0;;;65233:56:::1;::::0;::::1;::::0;::::1;::::0;65192:25;;65233:56:::1;:::i;64100:459::-:0;19910:20;:18;:20::i;:::-;21927:21:::1;:19;:21::i;:::-;64284:66:::2;64320:6:::0;64335:7;64284:35:::2;:66::i;:::-;64368:9;64363:189;64383:17:::0;;::::2;64363:189;;;64422:12;64437:6;;64444:1;64437:9;;;;;;;;;;;;;;;;;;;;:::i;:::-;64422:24;;64461:14;64478:7;;64486:1;64478:10;;;;;;;;;::::0;;;::::2;;::::0;-1:-1:-1;64503:37:0::2;::::0;-1:-1:-1;;;;;;64503:18:0;::::2;64522:9:::0;64478:10;64503:18:::2;:37::i;:::-;-1:-1:-1::0;;64402:3:0::2;;64363:189;;;;19953:19:::0;:17;:19::i;:::-;64100:459;;;;;:::o;22270:435::-;22338:7;22663:22;22687:8;22646:50;;;;;;;;;:::i;:::-;;;;;;;;;;;;;22636:61;;;;;;22629:68;;22270:435;;;;:::o;65854:103::-;65902:11;65933:16;:14;:16::i;:::-;65926:23;;65854:103;:::o;65421:118::-;65508:23;;65421:118;:::o;65547:299::-;65626:27;65693:6;:13;65679:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;65679:28:0;;65666:41;;65723:9;65718:121;65742:6;:13;65738:1;:17;65718:121;;;65793:6;65800:1;65793:9;;;;;;;;;;;;;;-1:-1:-1;;;;;65793:19:0;;65821:4;65793:34;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;65777:10;65788:1;65777:13;;;;;;;;;;;;;;;;;:50;65757:3;;65718:121;;;;65547:299;;;:::o;63114:29::-;;;:::o;22078:184::-;22134:16;22153:20;22165:7;;-1:-1:-1;;;;;;22165:7:0;22153:11;:20::i;:::-;22134:39;;22184:70;22193:33;22205:8;22215:10;22193:11;:33::i;:::-;7794:3;22184:8;:70::i;:::-;22078:184;:::o;1873:103::-;1943:9;1938:34;;1954:18;1962:9;1954:7;:18::i;:::-;1873:103;;:::o;19988:277::-;20113:48;19394:1;20122:7;;:19;;7737:3;20113:8;:48::i;:::-;19394:1;20239:7;:18;19988:277::o;22865:133::-;22944:46;22958:1;22953;:6;6086:3;22944:8;:46::i;16062:220::-;16179:95;16207:5;16238:23;;;16263:2;16267:5;16215:58;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;16215:58:0;;;;;;;;;;;;;;-1:-1:-1;;;;;16215:58:0;-1:-1:-1;;;;;;16215:58:0;;;;;;;;;;16179:19;:95::i;:::-;16062:220;;;:::o;20273:212::-;19350:1;20455:7;:22;20273:212::o;66154:109::-;66203:11;66234:5;-1:-1:-1;;;;;66234:19:0;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;65965:181::-;66053:4;66077:16;:14;:16::i;:::-;-1:-1:-1;;;;;66077:27:0;;66105:8;66115:7;66132:4;66077:61;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;66070:68;65965:181;-1:-1:-1;;;65965:181:0:o;2088:3223::-;-1:-1:-1;;;4641:3:0;4634:79;;;4854:66;4848:4;4841:80;4998:1;4992:4;4985:15;4044:73;3240:2;3275:18;;;3321;;;3245:4;3317:29;;;4085:1;4081:14;3225:18;;;;4070:26;;;;3371:18;;;;3419;;;3415:29;;;4102:2;4098:17;4066:50;;;;4044:73;4039:3;4035:83;5067:4;5060:26;5297:3;;5287:14;16895:814;17141:12;17155:23;17182:5;-1:-1:-1;;;;;17182:10:0;17193:4;17182:16;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17140:58;;;;17340:1;17331:7;17328:14;17325:2;;;17383:16;17380:1;17377;17362:38;17428:16;17425:1;17418:27;17325:2;17604:97;17613:10;:17;17634:1;17613:22;:56;;;;17650:10;17639:30;;;;;;;;;;;;:::i;:::-;8900:3;17604:8;:97::i;:::-;16895:814;;;;:::o;14:397:1:-;;;144:3;137:4;129:6;125:17;121:27;111:2;;167:6;159;152:22;111:2;-1:-1:-1;195:20:1;;238:18;227:30;;224:2;;;277:8;267;260:26;224:2;321:4;313:6;309:17;297:29;;384:3;377:4;369;361:6;357:17;349:6;345:30;341:41;338:50;335:2;;;401:1;398;391:12;335:2;101:310;;;;;:::o;416:147::-;495:20;;524:33;495:20;524:33;:::i;568:960::-;;;;;;798:2;786:9;777:7;773:23;769:32;766:2;;;819:6;811;804:22;766:2;864:9;851:23;893:18;934:2;926:6;923:14;920:2;;;955:6;947;940:22;920:2;999:73;1064:7;1055:6;1044:9;1040:22;999:73;:::i;:::-;1091:8;;-1:-1:-1;973:99:1;-1:-1:-1;1179:2:1;1164:18;;1151:32;;-1:-1:-1;1195:16:1;;;1192:2;;;1229:6;1221;1214:22;1192:2;;1273:75;1340:7;1329:8;1318:9;1314:24;1273:75;:::i;:::-;1367:8;;-1:-1:-1;1247:101:1;-1:-1:-1;;1452:2:1;1437:18;;1424:32;1465:33;1424:32;1465:33;:::i;:::-;1517:5;1507:15;;;756:772;;;;;;;;:::o;1533:1171::-;;1662:2;1705;1693:9;1684:7;1680:23;1676:32;1673:2;;;1726:6;1718;1711:22;1673:2;1771:9;1758:23;1800:18;1841:2;1833:6;1830:14;1827:2;;;1862:6;1854;1847:22;1827:2;1905:6;1894:9;1890:22;1880:32;;1950:7;1943:4;1939:2;1935:13;1931:27;1921:2;;1977:6;1969;1962:22;1921:2;2018;2005:16;2040:2;2036;2033:10;2030:2;;;2046:9;2030:2;2084;2080;2076:11;2116:2;2110:9;2167:2;2162;2154:6;2150:15;2146:24;2220:6;2208:10;2205:22;2200:2;2188:10;2185:18;2182:46;2179:2;;;2231:9;2179:2;2258;2251:22;2308:18;;;2342:15;;;;-1:-1:-1;2377:11:1;;;2407;;;2403:20;;2400:33;-1:-1:-1;2397:2:1;;;2451:6;2443;2436:22;2397:2;2478:6;2469:15;;2493:180;2507:2;2504:1;2501:9;2493:180;;;2564:34;2594:3;2564:34;:::i;:::-;2552:47;;2525:1;2518:9;;;;;2619:12;;;;2651;;2493:180;;;-1:-1:-1;2692:6:1;1642:1062;-1:-1:-1;;;;;;;;1642:1062:1:o;2709:297::-;;2829:2;2817:9;2808:7;2804:23;2800:32;2797:2;;;2850:6;2842;2835:22;2797:2;2887:9;2881:16;2940:5;2933:13;2926:21;2919:5;2916:32;2906:2;;2967:6;2959;2952:22;3011:306;;3122:2;3110:9;3101:7;3097:23;3093:32;3090:2;;;3143:6;3135;3128:22;3090:2;3174:23;;-1:-1:-1;;;;;;3226:32:1;;3216:43;;3206:2;;3278:6;3270;3263:22;3322:282;;3464:2;3452:9;3443:7;3439:23;3435:32;3432:2;;;3485:6;3477;3470:22;3432:2;3522:9;3516:16;3541:33;3568:5;3541:33;:::i;3609:273::-;;3735:2;3723:9;3714:7;3710:23;3706:32;3703:2;;;3756:6;3748;3741:22;3703:2;3800:9;3787:23;3819:33;3846:5;3819:33;:::i;3887:190::-;;3999:2;3987:9;3978:7;3974:23;3970:32;3967:2;;;4020:6;4012;4005:22;3967:2;-1:-1:-1;4048:23:1;;3957:120;-1:-1:-1;3957:120:1:o;4082:194::-;;4205:2;4193:9;4184:7;4180:23;4176:32;4173:2;;;4226:6;4218;4211:22;4173:2;-1:-1:-1;4254:16:1;;4163:113;-1:-1:-1;4163:113:1:o;4281:272::-;4436:19;;;-1:-1:-1;;;;;;4485:33:1;4480:2;4471:12;;4464:55;4544:2;4535:12;;4426:127::o;4558:430::-;;4725:6;4719:13;4750:3;4762:129;4776:6;4773:1;4770:13;4762:129;;;4874:4;4858:14;;;4854:25;;4848:32;4835:11;;;4828:53;4791:12;4762:129;;;4909:6;4906:1;4903:13;4900:2;;;4944:3;4935:6;4930:3;4926:16;4919:29;4900:2;-1:-1:-1;4966:16:1;;;;;4695:293;-1:-1:-1;;4695:293:1:o;4993:203::-;-1:-1:-1;;;;;5157:32:1;;;;5139:51;;5127:2;5112:18;;5094:102::o;5201:274::-;-1:-1:-1;;;;;5393:32:1;;;;5375:51;;5457:2;5442:18;;5435:34;5363:2;5348:18;;5330:145::o;5480:635::-;5651:2;5703:21;;;5773:13;;5676:18;;;5795:22;;;5480:635;;5651:2;5874:15;;;;5848:2;5833:18;;;5480:635;5920:169;5934:6;5931:1;5928:13;5920:169;;;5995:13;;5983:26;;6064:15;;;;6029:12;;;;5956:1;5949:9;5920:169;;;-1:-1:-1;6106:3:1;;5631:484;-1:-1:-1;;;;;;5631:484:1:o;6120:177::-;6266:25;;;6254:2;6239:18;;6221:76::o;6302:375::-;6504:25;;;-1:-1:-1;;;;;6603:15:1;;;6598:2;6583:18;;6576:43;6655:15;6650:2;6635:18;;6628:43;6492:2;6477:18;;6459:218::o;7314:133::-;-1:-1:-1;;;;;7391:31:1;;7381:42;;7371:2;;7437:1;7434;7427:12"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "536600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"getActionId(bytes4)": "infinite",
								"getAuthorizer()": "infinite",
								"getCollectedFeeAmounts(address[])": "infinite",
								"getFlashLoanFeePercentage()": "1072",
								"getSwapFeePercentage()": "1051",
								"setFlashLoanFeePercentage(uint256)": "infinite",
								"setSwapFeePercentage(uint256)": "infinite",
								"vault()": "infinite",
								"withdrawCollectedFees(address[],uint256[],address)": "infinite"
							},
							"internal": {
								"_canPerform(bytes32,address)": "infinite",
								"_getAuthorizer()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 62773,
									"end": 66266,
									"name": "PUSH",
									"source": 0,
									"value": "C0"
								},
								{
									"begin": 62773,
									"end": 66266,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 62773,
									"end": 66266,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "CODESIZE",
									"source": 0
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "tag",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 63834,
									"end": 64092,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 64045,
									"end": 64049,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 21693,
									"end": 21739,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 21693,
									"end": 21739,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 19350,
									"end": 19351,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 64021,
									"end": 64052,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 19461,
									"end": 19483,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 64070,
									"end": 64084,
									"name": "PUSH",
									"source": 0,
									"value": "60"
								},
								{
									"begin": 64070,
									"end": 64084,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "60"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 64070,
									"end": 64084,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 64070,
									"end": 64084,
									"name": "PUSH",
									"source": 0,
									"value": "A0"
								},
								{
									"begin": 64070,
									"end": 64084,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 62773,
									"end": 66266,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 62773,
									"end": 66266,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 14,
									"end": 339,
									"name": "tag",
									"source": 1,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 339,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 14,
									"end": 339,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 152,
									"end": 154,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 140,
									"end": 149,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 131,
									"end": 138,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 127,
									"end": 150,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 123,
									"end": 155,
									"name": "SLT",
									"source": 1
								},
								{
									"begin": 120,
									"end": 122,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 120,
									"end": 122,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "13"
								},
								{
									"begin": 120,
									"end": 122,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 173,
									"end": 179,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 165,
									"end": 171,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 158,
									"end": 180,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 120,
									"end": 122,
									"name": "tag",
									"source": 1,
									"value": "13"
								},
								{
									"begin": 120,
									"end": 122,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 204,
									"end": 220,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 204,
									"end": 220,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 249,
									"end": 280,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 249,
									"end": 280,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 239,
									"end": 281,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 239,
									"end": 281,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 229,
									"end": 231,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "14"
								},
								{
									"begin": 229,
									"end": 231,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 300,
									"end": 306,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 292,
									"end": 298,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 285,
									"end": 307,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 229,
									"end": 231,
									"name": "tag",
									"source": 1,
									"value": "14"
								},
								{
									"begin": 229,
									"end": 231,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 328,
									"end": 333,
									"name": "SWAP4",
									"source": 1
								},
								{
									"begin": 110,
									"end": 339,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 110,
									"end": 339,
									"name": "JUMP",
									"source": 1,
									"value": "[out]"
								},
								{
									"begin": 110,
									"end": 339,
									"name": "tag",
									"source": 1,
									"value": "11"
								},
								{
									"begin": 110,
									"end": 339,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 62773,
									"end": 66266,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 62773,
									"end": 66266,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 62773,
									"end": 66266,
									"name": "PUSH",
									"source": 0,
									"value": "A0"
								},
								{
									"begin": 62773,
									"end": 66266,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 62773,
									"end": 66266,
									"name": "PUSH",
									"source": 0,
									"value": "60"
								},
								{
									"begin": 62773,
									"end": 66266,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 62773,
									"end": 66266,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 62773,
									"end": 66266,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 62773,
									"end": 66266,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 62773,
									"end": 66266,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 62773,
									"end": 66266,
									"name": "ASSIGNIMMUTABLE",
									"source": 0,
									"value": "1312"
								},
								{
									"begin": 62773,
									"end": 66266,
									"name": "ASSIGNIMMUTABLE",
									"source": 0,
									"value": "647"
								},
								{
									"begin": 62773,
									"end": 66266,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 62773,
									"end": 66266,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 62773,
									"end": 66266,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206d600768879291aa1c00820dd8b1094d072a10fd84e8bf5b83533c6447ad6abf64736f6c63430007060033",
									".code": [
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH",
											"source": 0,
											"value": "851C1BB3"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH",
											"source": 0,
											"value": "851C1BB3"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH",
											"source": 0,
											"value": "AAABADC5"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH",
											"source": 0,
											"value": "D877845C"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH",
											"source": 0,
											"value": "E42ABF35"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH",
											"source": 0,
											"value": "FBFA77CF"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH",
											"source": 0,
											"value": "38E9922E"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH",
											"source": 0,
											"value": "55C67628"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH",
											"source": 0,
											"value": "6B6B9F69"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH",
											"source": 0,
											"value": "6DAEFAB6"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 62773,
											"end": 66266,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 64567,
											"end": 64886,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 64567,
											"end": 64886,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 64567,
											"end": 64886,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 64567,
											"end": 64886,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 64567,
											"end": 64886,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 64567,
											"end": 64886,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 64567,
											"end": 64886,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 64567,
											"end": 64886,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 64567,
											"end": 64886,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 64567,
											"end": 64886,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 64567,
											"end": 64886,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 64567,
											"end": 64886,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 64567,
											"end": 64886,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 64567,
											"end": 64886,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 64567,
											"end": 64886,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 64894,
											"end": 65297,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 64894,
											"end": 65297,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 64894,
											"end": 65297,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 64894,
											"end": 65297,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 64894,
											"end": 65297,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 64894,
											"end": 65297,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 64894,
											"end": 65297,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 64894,
											"end": 65297,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 64894,
											"end": 65297,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 64894,
											"end": 65297,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 64894,
											"end": 65297,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 64894,
											"end": 65297,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 64100,
											"end": 64559,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 64100,
											"end": 64559,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 64100,
											"end": 64559,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 64100,
											"end": 64559,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 64100,
											"end": 64559,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 64100,
											"end": 64559,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 64100,
											"end": 64559,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 64100,
											"end": 64559,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 64100,
											"end": 64559,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 64100,
											"end": 64559,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 64100,
											"end": 64559,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 64100,
											"end": 64559,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 22270,
											"end": 22705,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 22270,
											"end": 22705,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 22270,
											"end": 22705,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 22270,
											"end": 22705,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 22270,
											"end": 22705,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 22270,
											"end": 22705,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 22270,
											"end": 22705,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 22270,
											"end": 22705,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 22270,
											"end": 22705,
											"name": "tag",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 22270,
											"end": 22705,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 22270,
											"end": 22705,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 22270,
											"end": 22705,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 65854,
											"end": 65957,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 65854,
											"end": 65957,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65854,
											"end": 65957,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 65854,
											"end": 65957,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 65854,
											"end": 65957,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 65854,
											"end": 65957,
											"name": "tag",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 65854,
											"end": 65957,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65854,
											"end": 65957,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 65854,
											"end": 65957,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 65854,
											"end": 65957,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 65854,
											"end": 65957,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 65854,
											"end": 65957,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 65854,
											"end": 65957,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 65854,
											"end": 65957,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 65421,
											"end": 65539,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 65421,
											"end": 65539,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65421,
											"end": 65539,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 65421,
											"end": 65539,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 65421,
											"end": 65539,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "tag",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "tag",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 63114,
											"end": 63143,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 63114,
											"end": 63143,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 63114,
											"end": 63143,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 63114,
											"end": 63143,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 63114,
											"end": 63143,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 64567,
											"end": 64886,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 64567,
											"end": 64886,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 21927,
											"end": 21948,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 21927,
											"end": 21946,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 21927,
											"end": 21948,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 21927,
											"end": 21948,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 21927,
											"end": 21948,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 64660,
											"end": 64764,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 63009,
											"end": 63014,
											"name": "PUSH",
											"source": 0,
											"value": "6F05B59D3B20000"
										},
										{
											"begin": 64669,
											"end": 64689,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 64669,
											"end": 64726,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 64669,
											"end": 64726,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 11165,
											"end": 11168,
											"name": "PUSH",
											"source": 0,
											"value": "258"
										},
										{
											"begin": 64660,
											"end": 64668,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 64660,
											"end": 64764,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 64660,
											"end": 64764,
											"name": "tag",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 64660,
											"end": 64764,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 64775,
											"end": 64793,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 64775,
											"end": 64816,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 64775,
											"end": 64816,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 64775,
											"end": 64816,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 64832,
											"end": 64878,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 64832,
											"end": 64878,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 64832,
											"end": 64878,
											"name": "PUSH",
											"source": 0,
											"value": "A9BA3FFE0B6C366B81232CAAB38605A0699AD5398D6CCE76F91EE809E322DAFC"
										},
										{
											"begin": 64832,
											"end": 64878,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 64832,
											"end": 64878,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 64832,
											"end": 64878,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 64796,
											"end": 64816,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 64796,
											"end": 64816,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 64832,
											"end": 64878,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 64832,
											"end": 64878,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 64832,
											"end": 64878,
											"name": "tag",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 64832,
											"end": 64878,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 64832,
											"end": 64878,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 64832,
											"end": 64878,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 64832,
											"end": 64878,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 64832,
											"end": 64878,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 64832,
											"end": 64878,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 64832,
											"end": 64878,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 64832,
											"end": 64878,
											"name": "LOG1",
											"source": 0
										},
										{
											"begin": 64567,
											"end": 64886,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 64567,
											"end": 64886,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65387,
											"end": 65405,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 65387,
											"end": 65405,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 65305,
											"end": 65413,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 64894,
											"end": 65297,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 64894,
											"end": 65297,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 21927,
											"end": 21948,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 21927,
											"end": 21946,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 21927,
											"end": 21948,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 21927,
											"end": 21948,
											"name": "tag",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 21927,
											"end": 21948,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 64997,
											"end": 65155,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 63095,
											"end": 63099,
											"name": "PUSH",
											"source": 0,
											"value": "2386F26FC10000"
										},
										{
											"begin": 65020,
											"end": 65045,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 65020,
											"end": 65088,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 65020,
											"end": 65088,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 11238,
											"end": 11241,
											"name": "PUSH",
											"source": 0,
											"value": "259"
										},
										{
											"begin": 64997,
											"end": 65005,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 64997,
											"end": 65155,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 64997,
											"end": 65155,
											"name": "tag",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 64997,
											"end": 65155,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65166,
											"end": 65189,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 65166,
											"end": 65217,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 65166,
											"end": 65217,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 65166,
											"end": 65217,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 65233,
											"end": 65289,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 65233,
											"end": 65289,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 65233,
											"end": 65289,
											"name": "PUSH",
											"source": 0,
											"value": "5A0B7386237E7F07FA741EFC64E59C9387D2CCCAFEC760EFED4D53387F20E19A"
										},
										{
											"begin": 65233,
											"end": 65289,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 65233,
											"end": 65289,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 65233,
											"end": 65289,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 65192,
											"end": 65217,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 65192,
											"end": 65217,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 65233,
											"end": 65289,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 65233,
											"end": 65289,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 64100,
											"end": 64559,
											"name": "tag",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 64100,
											"end": 64559,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 19910,
											"end": 19930,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 19910,
											"end": 19928,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 19910,
											"end": 19930,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 19910,
											"end": 19930,
											"name": "tag",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 19910,
											"end": 19930,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 21927,
											"end": 21948,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 21927,
											"end": 21946,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 21927,
											"end": 21948,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 21927,
											"end": 21948,
											"name": "tag",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 21927,
											"end": 21948,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 64284,
											"end": 64350,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 64320,
											"end": 64326,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 64335,
											"end": 64342,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 64284,
											"end": 64319,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 64284,
											"end": 64350,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 64284,
											"end": 64350,
											"name": "tag",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 64284,
											"end": 64350,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 64368,
											"end": 64377,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 64363,
											"end": 64552,
											"name": "tag",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 64363,
											"end": 64552,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 64383,
											"end": 64400,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 64383,
											"end": 64400,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 64383,
											"end": 64400,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 64363,
											"end": 64552,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 64363,
											"end": 64552,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 64363,
											"end": 64552,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 64422,
											"end": 64434,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 64437,
											"end": 64443,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 64437,
											"end": 64443,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 64444,
											"end": 64445,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "INVALID",
											"source": 0
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "tag",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "tag",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 64437,
											"end": 64446,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 64422,
											"end": 64446,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 64422,
											"end": 64446,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 64461,
											"end": 64475,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 64478,
											"end": 64485,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 64478,
											"end": 64485,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 64486,
											"end": 64487,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 64478,
											"end": 64488,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 64478,
											"end": 64488,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 64478,
											"end": 64488,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 64478,
											"end": 64488,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 64478,
											"end": 64488,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 64478,
											"end": 64488,
											"name": "INVALID",
											"source": 0
										},
										{
											"begin": 64478,
											"end": 64488,
											"name": "tag",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 64478,
											"end": 64488,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 64478,
											"end": 64488,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 64478,
											"end": 64488,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 64478,
											"end": 64488,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 64478,
											"end": 64488,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 64478,
											"end": 64488,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 64478,
											"end": 64488,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 64478,
											"end": 64488,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 64478,
											"end": 64488,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 64503,
											"end": 64540,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 64503,
											"end": 64540,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 64503,
											"end": 64521,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 64503,
											"end": 64521,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 64522,
											"end": 64531,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 64478,
											"end": 64488,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 64503,
											"end": 64521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 64503,
											"end": 64540,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 64503,
											"end": 64540,
											"name": "tag",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 64503,
											"end": 64540,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 64402,
											"end": 64405,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 64402,
											"end": 64405,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 64363,
											"end": 64552,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 64363,
											"end": 64552,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 64363,
											"end": 64552,
											"name": "tag",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 64363,
											"end": 64552,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 64363,
											"end": 64552,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 19953,
											"end": 19972,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 19953,
											"end": 19970,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 19953,
											"end": 19972,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 19953,
											"end": 19972,
											"name": "tag",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 19953,
											"end": 19972,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 64100,
											"end": 64559,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 64100,
											"end": 64559,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 64100,
											"end": 64559,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 64100,
											"end": 64559,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 64100,
											"end": 64559,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 64100,
											"end": 64559,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 22270,
											"end": 22705,
											"name": "tag",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 22270,
											"end": 22705,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 22338,
											"end": 22345,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 22663,
											"end": 22685,
											"name": "PUSHIMMUTABLE",
											"source": 0,
											"value": "647"
										},
										{
											"begin": 22687,
											"end": 22695,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "tag",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 22646,
											"end": 22696,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 22636,
											"end": 22697,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 22636,
											"end": 22697,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 22636,
											"end": 22697,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 22636,
											"end": 22697,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 22636,
											"end": 22697,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 22636,
											"end": 22697,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 22629,
											"end": 22697,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 22629,
											"end": 22697,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 22270,
											"end": 22705,
											"name": "tag",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 22270,
											"end": 22705,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 22270,
											"end": 22705,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 22270,
											"end": 22705,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 22270,
											"end": 22705,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 22270,
											"end": 22705,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 65854,
											"end": 65957,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 65854,
											"end": 65957,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65902,
											"end": 65913,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 65933,
											"end": 65949,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 65933,
											"end": 65947,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 65933,
											"end": 65949,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 65933,
											"end": 65949,
											"name": "tag",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 65933,
											"end": 65949,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65926,
											"end": 65949,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 65926,
											"end": 65949,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 65854,
											"end": 65957,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 65854,
											"end": 65957,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 65421,
											"end": 65539,
											"name": "tag",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 65421,
											"end": 65539,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65508,
											"end": 65531,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 65508,
											"end": 65531,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 65421,
											"end": 65539,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 65421,
											"end": 65539,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "tag",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65626,
											"end": 65653,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 65693,
											"end": 65699,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 65693,
											"end": 65706,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "tag",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "CALLDATACOPY",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "tag",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65679,
											"end": 65707,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 65666,
											"end": 65707,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 65666,
											"end": 65707,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 65723,
											"end": 65732,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 65718,
											"end": 65839,
											"name": "tag",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 65718,
											"end": 65839,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65742,
											"end": 65748,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 65742,
											"end": 65755,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 65738,
											"end": 65739,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 65738,
											"end": 65755,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 65718,
											"end": 65839,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 65718,
											"end": 65839,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 65718,
											"end": 65839,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65799,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 65800,
											"end": 65801,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65802,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65802,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65802,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65802,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65802,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 65793,
											"end": 65802,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65802,
											"name": "INVALID",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65802,
											"name": "tag",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 65793,
											"end": 65802,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65802,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 65793,
											"end": 65802,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65802,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 65793,
											"end": 65802,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65802,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65802,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 65793,
											"end": 65812,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65812,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 65821,
											"end": 65825,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "tag",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "tag",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "tag",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "tag",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 65793,
											"end": 65827,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65777,
											"end": 65787,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 65788,
											"end": 65789,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 65777,
											"end": 65790,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 65777,
											"end": 65790,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 65777,
											"end": 65790,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 65777,
											"end": 65790,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 65777,
											"end": 65790,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 65777,
											"end": 65790,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 65777,
											"end": 65790,
											"name": "INVALID",
											"source": 0
										},
										{
											"begin": 65777,
											"end": 65790,
											"name": "tag",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 65777,
											"end": 65790,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65777,
											"end": 65790,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 65777,
											"end": 65790,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 65777,
											"end": 65790,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 65777,
											"end": 65790,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 65777,
											"end": 65790,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 65777,
											"end": 65790,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 65777,
											"end": 65790,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 65777,
											"end": 65790,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 65777,
											"end": 65790,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 65777,
											"end": 65827,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 65757,
											"end": 65760,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 65757,
											"end": 65760,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 65718,
											"end": 65839,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 65718,
											"end": 65839,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 65718,
											"end": 65839,
											"name": "tag",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 65718,
											"end": 65839,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 65718,
											"end": 65839,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 65547,
											"end": 65846,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 63114,
											"end": 63143,
											"name": "tag",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 63114,
											"end": 63143,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 63114,
											"end": 63143,
											"name": "PUSHIMMUTABLE",
											"source": 0,
											"value": "1312"
										},
										{
											"begin": 63114,
											"end": 63143,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 63114,
											"end": 63143,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 22078,
											"end": 22262,
											"name": "tag",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 22078,
											"end": 22262,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 22134,
											"end": 22150,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 22153,
											"end": 22173,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 22165,
											"end": 22172,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 22165,
											"end": 22172,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 22165,
											"end": 22172,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 22153,
											"end": 22164,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 22153,
											"end": 22173,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 22153,
											"end": 22173,
											"name": "tag",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 22153,
											"end": 22173,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 22134,
											"end": 22173,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 22134,
											"end": 22173,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 22184,
											"end": 22254,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 22193,
											"end": 22226,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 22205,
											"end": 22213,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 22215,
											"end": 22225,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 22193,
											"end": 22204,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 22193,
											"end": 22226,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 22193,
											"end": 22226,
											"name": "tag",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 22193,
											"end": 22226,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 7794,
											"end": 7797,
											"name": "PUSH",
											"source": 0,
											"value": "191"
										},
										{
											"begin": 22184,
											"end": 22192,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 22184,
											"end": 22254,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 22184,
											"end": 22254,
											"name": "tag",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 22184,
											"end": 22254,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 22078,
											"end": 22262,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 22078,
											"end": 22262,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1873,
											"end": 1976,
											"name": "tag",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 1873,
											"end": 1976,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1943,
											"end": 1952,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1938,
											"end": 1972,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1938,
											"end": 1972,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1954,
											"end": 1972,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1962,
											"end": 1971,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1954,
											"end": 1961,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 1954,
											"end": 1972,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1954,
											"end": 1972,
											"name": "tag",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1954,
											"end": 1972,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1873,
											"end": 1976,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1873,
											"end": 1976,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1873,
											"end": 1976,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 19988,
											"end": 20265,
											"name": "tag",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 19988,
											"end": 20265,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 20113,
											"end": 20161,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 19394,
											"end": 19395,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 20122,
											"end": 20129,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 20122,
											"end": 20129,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 20122,
											"end": 20141,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 20122,
											"end": 20141,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 7737,
											"end": 7740,
											"name": "PUSH",
											"source": 0,
											"value": "190"
										},
										{
											"begin": 20113,
											"end": 20121,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 20113,
											"end": 20161,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 20113,
											"end": 20161,
											"name": "tag",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 20113,
											"end": 20161,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 19394,
											"end": 19395,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 20239,
											"end": 20246,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 20239,
											"end": 20257,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 19988,
											"end": 20265,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 22865,
											"end": 22998,
											"name": "tag",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 22865,
											"end": 22998,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 22944,
											"end": 22990,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 22958,
											"end": 22959,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 22953,
											"end": 22954,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 22953,
											"end": 22959,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 6086,
											"end": 6089,
											"name": "PUSH",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 22944,
											"end": 22952,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 22944,
											"end": 22990,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 16062,
											"end": 16282,
											"name": "tag",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 16062,
											"end": 16282,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 16179,
											"end": 16274,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 16207,
											"end": 16212,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 16238,
											"end": 16261,
											"name": "PUSH",
											"source": 0,
											"value": "A9059CBB"
										},
										{
											"begin": 16238,
											"end": 16261,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 16238,
											"end": 16261,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 16263,
											"end": 16265,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 16267,
											"end": 16272,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "tag",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 16215,
											"end": 16273,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 16179,
											"end": 16198,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 16179,
											"end": 16274,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 16179,
											"end": 16274,
											"name": "tag",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 16179,
											"end": 16274,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 16062,
											"end": 16282,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 16062,
											"end": 16282,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 16062,
											"end": 16282,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 16062,
											"end": 16282,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 20273,
											"end": 20485,
											"name": "tag",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 20273,
											"end": 20485,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 19350,
											"end": 19351,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 20455,
											"end": 20462,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 20455,
											"end": 20477,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 20273,
											"end": 20485,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 66154,
											"end": 66263,
											"name": "tag",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 66154,
											"end": 66263,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 66203,
											"end": 66214,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 66234,
											"end": 66239,
											"name": "PUSHIMMUTABLE",
											"source": 0,
											"value": "1312"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 66234,
											"end": 66253,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66253,
											"name": "PUSH",
											"source": 0,
											"value": "AAABADC5"
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "tag",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "tag",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 66234,
											"end": 66255,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 65965,
											"end": 66146,
											"name": "tag",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 65965,
											"end": 66146,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 66053,
											"end": 66057,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 66077,
											"end": 66093,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 66077,
											"end": 66091,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 66077,
											"end": 66093,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 66077,
											"end": 66093,
											"name": "tag",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 66077,
											"end": 66093,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 66077,
											"end": 66104,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66104,
											"name": "PUSH",
											"source": 0,
											"value": "9BE2A884"
										},
										{
											"begin": 66105,
											"end": 66113,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 66115,
											"end": 66122,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 66132,
											"end": 66136,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "tag",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "tag",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "tag",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "tag",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 66077,
											"end": 66138,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 66070,
											"end": 66138,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 65965,
											"end": 66146,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 65965,
											"end": 66146,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2088,
											"end": 5311,
											"name": "tag",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 2088,
											"end": 5311,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4641,
											"end": 4644,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4634,
											"end": 4713,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4634,
											"end": 4713,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 4634,
											"end": 4713,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4854,
											"end": 4920,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 4848,
											"end": 4852,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 4841,
											"end": 4921,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4998,
											"end": 4999,
											"name": "PUSH",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 4992,
											"end": 4996,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 4985,
											"end": 5000,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 4044,
											"end": 4117,
											"name": "PUSH",
											"source": 0,
											"value": "42414C23000030"
										},
										{
											"begin": 3240,
											"end": 3242,
											"name": "PUSH",
											"source": 0,
											"value": "A"
										},
										{
											"begin": 3275,
											"end": 3293,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3275,
											"end": 3293,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3275,
											"end": 3293,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 3321,
											"end": 3339,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3321,
											"end": 3339,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3321,
											"end": 3339,
											"name": "MOD",
											"source": 0
										},
										{
											"begin": 3245,
											"end": 3249,
											"name": "PUSH",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 3317,
											"end": 3346,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3317,
											"end": 3346,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3317,
											"end": 3346,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4085,
											"end": 4086,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 4081,
											"end": 4095,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 3225,
											"end": 3243,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 3225,
											"end": 3243,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3225,
											"end": 3243,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3225,
											"end": 3243,
											"name": "MOD",
											"source": 0
										},
										{
											"begin": 4070,
											"end": 4096,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 4070,
											"end": 4096,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4070,
											"end": 4096,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 4070,
											"end": 4096,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3371,
											"end": 3389,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3371,
											"end": 3389,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3371,
											"end": 3389,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3371,
											"end": 3389,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 3419,
											"end": 3437,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3419,
											"end": 3437,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3419,
											"end": 3437,
											"name": "MOD",
											"source": 0
										},
										{
											"begin": 3415,
											"end": 3444,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3415,
											"end": 3444,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 3415,
											"end": 3444,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4102,
											"end": 4104,
											"name": "PUSH",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 4098,
											"end": 4115,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 4066,
											"end": 4116,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 4066,
											"end": 4116,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4066,
											"end": 4116,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 4066,
											"end": 4116,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4044,
											"end": 4117,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 4039,
											"end": 4042,
											"name": "PUSH",
											"source": 0,
											"value": "C8"
										},
										{
											"begin": 4035,
											"end": 4118,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 5067,
											"end": 5071,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 5060,
											"end": 5086,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5297,
											"end": 5300,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 5297,
											"end": 5300,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 5287,
											"end": 5301,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 16895,
											"end": 17709,
											"name": "tag",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 16895,
											"end": 17709,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17141,
											"end": 17153,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17155,
											"end": 17178,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17187,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 17182,
											"end": 17192,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 17193,
											"end": 17197,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "tag",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "PUSH",
											"source": 0,
											"value": "3F"
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "tag",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "tag",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17182,
											"end": 17198,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17140,
											"end": 17198,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 17140,
											"end": 17198,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17140,
											"end": 17198,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 17140,
											"end": 17198,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17340,
											"end": 17341,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17331,
											"end": 17338,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 17328,
											"end": 17342,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 17325,
											"end": 17327,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 17325,
											"end": 17327,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 17325,
											"end": 17327,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 17383,
											"end": 17399,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 17380,
											"end": 17381,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17377,
											"end": 17378,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17362,
											"end": 17400,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 17428,
											"end": 17444,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 17425,
											"end": 17426,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17418,
											"end": 17445,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 17325,
											"end": 17327,
											"name": "tag",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 17325,
											"end": 17327,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17604,
											"end": 17701,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "147"
										},
										{
											"begin": 17613,
											"end": 17623,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17613,
											"end": 17630,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 17634,
											"end": 17635,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17613,
											"end": 17635,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 17613,
											"end": 17669,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17613,
											"end": 17669,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 17613,
											"end": 17669,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 17613,
											"end": 17669,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17650,
											"end": 17660,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17639,
											"end": 17669,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17639,
											"end": 17669,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 17639,
											"end": 17669,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17639,
											"end": 17669,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17639,
											"end": 17669,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 17639,
											"end": 17669,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17639,
											"end": 17669,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17639,
											"end": 17669,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17639,
											"end": 17669,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 17639,
											"end": 17669,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 17639,
											"end": 17669,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17639,
											"end": 17669,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 17639,
											"end": 17669,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 17639,
											"end": 17669,
											"name": "tag",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 17639,
											"end": 17669,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 8900,
											"end": 8903,
											"name": "PUSH",
											"source": 0,
											"value": "1A2"
										},
										{
											"begin": 17604,
											"end": 17612,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 17604,
											"end": 17701,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 17604,
											"end": 17701,
											"name": "tag",
											"source": 0,
											"value": "147"
										},
										{
											"begin": 17604,
											"end": 17701,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 16895,
											"end": 17709,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 16895,
											"end": 17709,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 16895,
											"end": 17709,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 16895,
											"end": 17709,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 16895,
											"end": 17709,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 14,
											"end": 411,
											"name": "tag",
											"source": 1,
											"value": "151"
										},
										{
											"begin": 14,
											"end": 411,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 14,
											"end": 411,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 14,
											"end": 411,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 144,
											"end": 147,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 137,
											"end": 141,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 129,
											"end": 135,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 125,
											"end": 142,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 121,
											"end": 148,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 111,
											"end": 113,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "153"
										},
										{
											"begin": 111,
											"end": 113,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 167,
											"end": 173,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 159,
											"end": 165,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 152,
											"end": 174,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 111,
											"end": 113,
											"name": "tag",
											"source": 1,
											"value": "153"
										},
										{
											"begin": 111,
											"end": 113,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 195,
											"end": 215,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 195,
											"end": 215,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 238,
											"end": 256,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 227,
											"end": 257,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 227,
											"end": 257,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 224,
											"end": 226,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 224,
											"end": 226,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "154"
										},
										{
											"begin": 224,
											"end": 226,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 277,
											"end": 285,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 267,
											"end": 275,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 260,
											"end": 286,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 224,
											"end": 226,
											"name": "tag",
											"source": 1,
											"value": "154"
										},
										{
											"begin": 224,
											"end": 226,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 321,
											"end": 325,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 313,
											"end": 319,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 309,
											"end": 326,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 297,
											"end": 326,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 297,
											"end": 326,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 384,
											"end": 387,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 377,
											"end": 381,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 369,
											"end": 373,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 361,
											"end": 367,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 357,
											"end": 374,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 349,
											"end": 355,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 345,
											"end": 375,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 341,
											"end": 382,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 338,
											"end": 388,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 335,
											"end": 337,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 335,
											"end": 337,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "155"
										},
										{
											"begin": 335,
											"end": 337,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 401,
											"end": 402,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 398,
											"end": 399,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 391,
											"end": 403,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 335,
											"end": 337,
											"name": "tag",
											"source": 1,
											"value": "155"
										},
										{
											"begin": 335,
											"end": 337,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 101,
											"end": 411,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 101,
											"end": 411,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 101,
											"end": 411,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 101,
											"end": 411,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 101,
											"end": 411,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 101,
											"end": 411,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 416,
											"end": 563,
											"name": "tag",
											"source": 1,
											"value": "156"
										},
										{
											"begin": 416,
											"end": 563,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 495,
											"end": 515,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 495,
											"end": 515,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 524,
											"end": 557,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "83"
										},
										{
											"begin": 495,
											"end": 515,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 524,
											"end": 557,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "159"
										},
										{
											"begin": 524,
											"end": 557,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 568,
											"end": 1528,
											"name": "tag",
											"source": 1,
											"value": "26"
										},
										{
											"begin": 568,
											"end": 1528,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 568,
											"end": 1528,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 568,
											"end": 1528,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 568,
											"end": 1528,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 568,
											"end": 1528,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 568,
											"end": 1528,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 798,
											"end": 800,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 786,
											"end": 795,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 777,
											"end": 784,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 773,
											"end": 796,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 769,
											"end": 801,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 766,
											"end": 768,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 766,
											"end": 768,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "161"
										},
										{
											"begin": 766,
											"end": 768,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 819,
											"end": 825,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 811,
											"end": 817,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 804,
											"end": 826,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 766,
											"end": 768,
											"name": "tag",
											"source": 1,
											"value": "161"
										},
										{
											"begin": 766,
											"end": 768,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 864,
											"end": 873,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 851,
											"end": 874,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 893,
											"end": 911,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 934,
											"end": 936,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 926,
											"end": 932,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 923,
											"end": 937,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 920,
											"end": 922,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 920,
											"end": 922,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "162"
										},
										{
											"begin": 920,
											"end": 922,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 955,
											"end": 961,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 947,
											"end": 953,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 940,
											"end": 962,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 920,
											"end": 922,
											"name": "tag",
											"source": 1,
											"value": "162"
										},
										{
											"begin": 920,
											"end": 922,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 999,
											"end": 1072,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "163"
										},
										{
											"begin": 1064,
											"end": 1071,
											"name": "DUP10",
											"source": 1
										},
										{
											"begin": 1055,
											"end": 1061,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1044,
											"end": 1053,
											"name": "DUP11",
											"source": 1
										},
										{
											"begin": 1040,
											"end": 1062,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 999,
											"end": 1072,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "151"
										},
										{
											"begin": 999,
											"end": 1072,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 999,
											"end": 1072,
											"name": "tag",
											"source": 1,
											"value": "163"
										},
										{
											"begin": 999,
											"end": 1072,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1091,
											"end": 1099,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1091,
											"end": 1099,
											"name": "SWAP8",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 973,
											"end": 1072,
											"name": "SWAP6",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1179,
											"end": 1181,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1164,
											"end": 1182,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 1164,
											"end": 1182,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1151,
											"end": 1183,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 1151,
											"end": 1183,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1195,
											"end": 1211,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1195,
											"end": 1211,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1195,
											"end": 1211,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 1192,
											"end": 1194,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1192,
											"end": 1194,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "164"
										},
										{
											"begin": 1192,
											"end": 1194,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1229,
											"end": 1235,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1221,
											"end": 1227,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1214,
											"end": 1236,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1192,
											"end": 1194,
											"name": "tag",
											"source": 1,
											"value": "164"
										},
										{
											"begin": 1192,
											"end": 1194,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1192,
											"end": 1194,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1273,
											"end": 1348,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "165"
										},
										{
											"begin": 1340,
											"end": 1347,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 1329,
											"end": 1337,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1318,
											"end": 1327,
											"name": "DUP10",
											"source": 1
										},
										{
											"begin": 1314,
											"end": 1338,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1273,
											"end": 1348,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "151"
										},
										{
											"begin": 1273,
											"end": 1348,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1273,
											"end": 1348,
											"name": "tag",
											"source": 1,
											"value": "165"
										},
										{
											"begin": 1273,
											"end": 1348,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1367,
											"end": 1375,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1367,
											"end": 1375,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1247,
											"end": 1348,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1452,
											"end": 1454,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1437,
											"end": 1455,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 1437,
											"end": 1455,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1424,
											"end": 1456,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 1465,
											"end": 1498,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "166"
										},
										{
											"begin": 1424,
											"end": 1456,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1465,
											"end": 1498,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "159"
										},
										{
											"begin": 1465,
											"end": 1498,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1465,
											"end": 1498,
											"name": "tag",
											"source": 1,
											"value": "166"
										},
										{
											"begin": 1465,
											"end": 1498,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1517,
											"end": 1522,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1507,
											"end": 1522,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1507,
											"end": 1522,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1507,
											"end": 1522,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 756,
											"end": 1528,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 756,
											"end": 1528,
											"name": "SWAP6",
											"source": 1
										},
										{
											"begin": 756,
											"end": 1528,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 756,
											"end": 1528,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 756,
											"end": 1528,
											"name": "SWAP6",
											"source": 1
										},
										{
											"begin": 756,
											"end": 1528,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 756,
											"end": 1528,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 756,
											"end": 1528,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 756,
											"end": 1528,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1533,
											"end": 2704,
											"name": "tag",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 1533,
											"end": 2704,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1533,
											"end": 2704,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1662,
											"end": 1664,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1705,
											"end": 1707,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1693,
											"end": 1702,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1684,
											"end": 1691,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 1680,
											"end": 1703,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 1676,
											"end": 1708,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 1673,
											"end": 1675,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1673,
											"end": 1675,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "168"
										},
										{
											"begin": 1673,
											"end": 1675,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1726,
											"end": 1732,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1718,
											"end": 1724,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1711,
											"end": 1733,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1673,
											"end": 1675,
											"name": "tag",
											"source": 1,
											"value": "168"
										},
										{
											"begin": 1673,
											"end": 1675,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1771,
											"end": 1780,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1758,
											"end": 1781,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 1800,
											"end": 1818,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1841,
											"end": 1843,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1833,
											"end": 1839,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1830,
											"end": 1844,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 1827,
											"end": 1829,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1827,
											"end": 1829,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "169"
										},
										{
											"begin": 1827,
											"end": 1829,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1862,
											"end": 1868,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1854,
											"end": 1860,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 1847,
											"end": 1869,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1827,
											"end": 1829,
											"name": "tag",
											"source": 1,
											"value": "169"
										},
										{
											"begin": 1827,
											"end": 1829,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1905,
											"end": 1911,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1894,
											"end": 1903,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 1890,
											"end": 1912,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1880,
											"end": 1912,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1880,
											"end": 1912,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1950,
											"end": 1957,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 1943,
											"end": 1947,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 1939,
											"end": 1941,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1935,
											"end": 1948,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1931,
											"end": 1958,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 1921,
											"end": 1923,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "170"
										},
										{
											"begin": 1921,
											"end": 1923,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1977,
											"end": 1983,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1969,
											"end": 1975,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 1962,
											"end": 1984,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1921,
											"end": 1923,
											"name": "tag",
											"source": 1,
											"value": "170"
										},
										{
											"begin": 1921,
											"end": 1923,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2018,
											"end": 2020,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2005,
											"end": 2021,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 2040,
											"end": 2042,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2036,
											"end": 2038,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2033,
											"end": 2043,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 2030,
											"end": 2032,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2030,
											"end": 2032,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "171"
										},
										{
											"begin": 2030,
											"end": 2032,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2046,
											"end": 2055,
											"name": "INVALID",
											"source": 1
										},
										{
											"begin": 2030,
											"end": 2032,
											"name": "tag",
											"source": 1,
											"value": "171"
										},
										{
											"begin": 2030,
											"end": 2032,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2084,
											"end": 2086,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2080,
											"end": 2082,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2076,
											"end": 2087,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 2116,
											"end": 2118,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2110,
											"end": 2119,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2167,
											"end": 2169,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 2162,
											"end": 2164,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2154,
											"end": 2160,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2150,
											"end": 2165,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2146,
											"end": 2170,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2220,
											"end": 2226,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2208,
											"end": 2218,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2205,
											"end": 2227,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 2200,
											"end": 2202,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 2188,
											"end": 2198,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2185,
											"end": 2203,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 2182,
											"end": 2228,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 2179,
											"end": 2181,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2179,
											"end": 2181,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "172"
										},
										{
											"begin": 2179,
											"end": 2181,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2231,
											"end": 2240,
											"name": "INVALID",
											"source": 1
										},
										{
											"begin": 2179,
											"end": 2181,
											"name": "tag",
											"source": 1,
											"value": "172"
										},
										{
											"begin": 2179,
											"end": 2181,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2258,
											"end": 2260,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2251,
											"end": 2273,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2308,
											"end": 2326,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2308,
											"end": 2326,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2308,
											"end": 2326,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2342,
											"end": 2357,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 2342,
											"end": 2357,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2342,
											"end": 2357,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2342,
											"end": 2357,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2377,
											"end": 2388,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 2377,
											"end": 2388,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 2377,
											"end": 2388,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2407,
											"end": 2418,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2407,
											"end": 2418,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 2407,
											"end": 2418,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2403,
											"end": 2423,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 2403,
											"end": 2423,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2400,
											"end": 2433,
											"name": "DUP11",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 2397,
											"end": 2399,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2397,
											"end": 2399,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "173"
										},
										{
											"begin": 2397,
											"end": 2399,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2451,
											"end": 2457,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 2443,
											"end": 2449,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 2436,
											"end": 2458,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2397,
											"end": 2399,
											"name": "tag",
											"source": 1,
											"value": "173"
										},
										{
											"begin": 2397,
											"end": 2399,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2478,
											"end": 2484,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 2469,
											"end": 2484,
											"name": "SWAP6",
											"source": 1
										},
										{
											"begin": 2469,
											"end": 2484,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2493,
											"end": 2673,
											"name": "tag",
											"source": 1,
											"value": "174"
										},
										{
											"begin": 2493,
											"end": 2673,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2507,
											"end": 2509,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2504,
											"end": 2505,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 2501,
											"end": 2510,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 2493,
											"end": 2673,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2493,
											"end": 2673,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "176"
										},
										{
											"begin": 2493,
											"end": 2673,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2564,
											"end": 2598,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "177"
										},
										{
											"begin": 2594,
											"end": 2597,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2564,
											"end": 2598,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "156"
										},
										{
											"begin": 2564,
											"end": 2598,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2564,
											"end": 2598,
											"name": "tag",
											"source": 1,
											"value": "177"
										},
										{
											"begin": 2564,
											"end": 2598,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2552,
											"end": 2599,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 2552,
											"end": 2599,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2525,
											"end": 2526,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2518,
											"end": 2527,
											"name": "SWAP6",
											"source": 1
										},
										{
											"begin": 2518,
											"end": 2527,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2518,
											"end": 2527,
											"name": "SWAP6",
											"source": 1
										},
										{
											"begin": 2518,
											"end": 2527,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2518,
											"end": 2527,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 2619,
											"end": 2631,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 2619,
											"end": 2631,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 2619,
											"end": 2631,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2619,
											"end": 2631,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2663,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 2651,
											"end": 2663,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2493,
											"end": 2673,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "174"
										},
										{
											"begin": 2493,
											"end": 2673,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2493,
											"end": 2673,
											"name": "tag",
											"source": 1,
											"value": "176"
										},
										{
											"begin": 2493,
											"end": 2673,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2692,
											"end": 2698,
											"name": "SWAP9",
											"source": 1
										},
										{
											"begin": 1642,
											"end": 2704,
											"name": "SWAP8",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1642,
											"end": 2704,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2709,
											"end": 3006,
											"name": "tag",
											"source": 1,
											"value": "138"
										},
										{
											"begin": 2709,
											"end": 3006,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2709,
											"end": 3006,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2829,
											"end": 2831,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2817,
											"end": 2826,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2808,
											"end": 2815,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 2804,
											"end": 2827,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2800,
											"end": 2832,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 2797,
											"end": 2799,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2797,
											"end": 2799,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "179"
										},
										{
											"begin": 2797,
											"end": 2799,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2850,
											"end": 2856,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2842,
											"end": 2848,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2835,
											"end": 2857,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2797,
											"end": 2799,
											"name": "tag",
											"source": 1,
											"value": "179"
										},
										{
											"begin": 2797,
											"end": 2799,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2887,
											"end": 2896,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2881,
											"end": 2897,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2940,
											"end": 2945,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2933,
											"end": 2946,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2926,
											"end": 2947,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2919,
											"end": 2924,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2916,
											"end": 2948,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2906,
											"end": 2908,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "137"
										},
										{
											"begin": 2906,
											"end": 2908,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2967,
											"end": 2973,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2959,
											"end": 2965,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2952,
											"end": 2974,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3317,
											"name": "tag",
											"source": 1,
											"value": "30"
										},
										{
											"begin": 3011,
											"end": 3317,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3011,
											"end": 3317,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3122,
											"end": 3124,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3110,
											"end": 3119,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3101,
											"end": 3108,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3097,
											"end": 3120,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3093,
											"end": 3125,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 3090,
											"end": 3092,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3090,
											"end": 3092,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "182"
										},
										{
											"begin": 3090,
											"end": 3092,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3143,
											"end": 3149,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3135,
											"end": 3141,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3128,
											"end": 3150,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3090,
											"end": 3092,
											"name": "tag",
											"source": 1,
											"value": "182"
										},
										{
											"begin": 3090,
											"end": 3092,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3174,
											"end": 3197,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3174,
											"end": 3197,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3226,
											"end": 3258,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3226,
											"end": 3258,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3216,
											"end": 3259,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3216,
											"end": 3259,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 3206,
											"end": 3208,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "137"
										},
										{
											"begin": 3206,
											"end": 3208,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3278,
											"end": 3284,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3270,
											"end": 3276,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3263,
											"end": 3285,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3322,
											"end": 3604,
											"name": "tag",
											"source": 1,
											"value": "129"
										},
										{
											"begin": 3322,
											"end": 3604,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3322,
											"end": 3604,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3464,
											"end": 3466,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3452,
											"end": 3461,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3443,
											"end": 3450,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3439,
											"end": 3462,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3435,
											"end": 3467,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 3432,
											"end": 3434,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3432,
											"end": 3434,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "185"
										},
										{
											"begin": 3432,
											"end": 3434,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3485,
											"end": 3491,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3477,
											"end": 3483,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3470,
											"end": 3492,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3432,
											"end": 3434,
											"name": "tag",
											"source": 1,
											"value": "185"
										},
										{
											"begin": 3432,
											"end": 3434,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3522,
											"end": 3531,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3516,
											"end": 3532,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3541,
											"end": 3574,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "137"
										},
										{
											"begin": 3568,
											"end": 3573,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3541,
											"end": 3574,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "159"
										},
										{
											"begin": 3541,
											"end": 3574,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3609,
											"end": 3882,
											"name": "tag",
											"source": 1,
											"value": "77"
										},
										{
											"begin": 3609,
											"end": 3882,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3609,
											"end": 3882,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3735,
											"end": 3737,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3723,
											"end": 3732,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3714,
											"end": 3721,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3710,
											"end": 3733,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3706,
											"end": 3738,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 3703,
											"end": 3705,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3703,
											"end": 3705,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "188"
										},
										{
											"begin": 3703,
											"end": 3705,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3756,
											"end": 3762,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3748,
											"end": 3754,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3741,
											"end": 3763,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3703,
											"end": 3705,
											"name": "tag",
											"source": 1,
											"value": "188"
										},
										{
											"begin": 3703,
											"end": 3705,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3800,
											"end": 3809,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3787,
											"end": 3810,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 3819,
											"end": 3852,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "137"
										},
										{
											"begin": 3846,
											"end": 3851,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3819,
											"end": 3852,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "159"
										},
										{
											"begin": 3819,
											"end": 3852,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3887,
											"end": 4077,
											"name": "tag",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 3887,
											"end": 4077,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3887,
											"end": 4077,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3999,
											"end": 4001,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3987,
											"end": 3996,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3978,
											"end": 3985,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3974,
											"end": 3997,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3970,
											"end": 4002,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 3967,
											"end": 3969,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3967,
											"end": 3969,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "191"
										},
										{
											"begin": 3967,
											"end": 3969,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4020,
											"end": 4026,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4012,
											"end": 4018,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4005,
											"end": 4027,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3967,
											"end": 3969,
											"name": "tag",
											"source": 1,
											"value": "191"
										},
										{
											"begin": 3967,
											"end": 3969,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4048,
											"end": 4071,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 4048,
											"end": 4071,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3957,
											"end": 4077,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3957,
											"end": 4077,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 4082,
											"end": 4276,
											"name": "tag",
											"source": 1,
											"value": "103"
										},
										{
											"begin": 4082,
											"end": 4276,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4082,
											"end": 4276,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4205,
											"end": 4207,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4193,
											"end": 4202,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4184,
											"end": 4191,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 4180,
											"end": 4203,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4176,
											"end": 4208,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 4173,
											"end": 4175,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4173,
											"end": 4175,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "193"
										},
										{
											"begin": 4173,
											"end": 4175,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4226,
											"end": 4232,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4218,
											"end": 4224,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4211,
											"end": 4233,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 4173,
											"end": 4175,
											"name": "tag",
											"source": 1,
											"value": "193"
										},
										{
											"begin": 4173,
											"end": 4175,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4254,
											"end": 4270,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4254,
											"end": 4270,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4163,
											"end": 4276,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4163,
											"end": 4276,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 4281,
											"end": 4553,
											"name": "tag",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 4281,
											"end": 4553,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4436,
											"end": 4455,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4436,
											"end": 4455,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4436,
											"end": 4455,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4485,
											"end": 4518,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4480,
											"end": 4482,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4471,
											"end": 4483,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4471,
											"end": 4483,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4464,
											"end": 4519,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4544,
											"end": 4546,
											"name": "PUSH",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 4535,
											"end": 4547,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4535,
											"end": 4547,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4426,
											"end": 4553,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 4558,
											"end": 4988,
											"name": "tag",
											"source": 1,
											"value": "142"
										},
										{
											"begin": 4558,
											"end": 4988,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4558,
											"end": 4988,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4725,
											"end": 4731,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4719,
											"end": 4732,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4750,
											"end": 4753,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4762,
											"end": 4891,
											"name": "tag",
											"source": 1,
											"value": "196"
										},
										{
											"begin": 4762,
											"end": 4891,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4776,
											"end": 4782,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4773,
											"end": 4774,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4783,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 4762,
											"end": 4891,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4762,
											"end": 4891,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "198"
										},
										{
											"begin": 4762,
											"end": 4891,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4874,
											"end": 4878,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4858,
											"end": 4872,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4858,
											"end": 4872,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 4858,
											"end": 4872,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4854,
											"end": 4879,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4854,
											"end": 4879,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4848,
											"end": 4880,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4835,
											"end": 4846,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4835,
											"end": 4846,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4835,
											"end": 4846,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4828,
											"end": 4881,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4791,
											"end": 4803,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4762,
											"end": 4891,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "196"
										},
										{
											"begin": 4762,
											"end": 4891,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4762,
											"end": 4891,
											"name": "tag",
											"source": 1,
											"value": "198"
										},
										{
											"begin": 4762,
											"end": 4891,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4909,
											"end": 4915,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4906,
											"end": 4907,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4903,
											"end": 4916,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 4900,
											"end": 4902,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4900,
											"end": 4902,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "199"
										},
										{
											"begin": 4900,
											"end": 4902,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4944,
											"end": 4947,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4935,
											"end": 4941,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4930,
											"end": 4933,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4926,
											"end": 4942,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4919,
											"end": 4948,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4900,
											"end": 4902,
											"name": "tag",
											"source": 1,
											"value": "199"
										},
										{
											"begin": 4900,
											"end": 4902,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4966,
											"end": 4982,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4966,
											"end": 4982,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4966,
											"end": 4982,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4966,
											"end": 4982,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4966,
											"end": 4982,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 4695,
											"end": 4988,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4695,
											"end": 4988,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 4993,
											"end": 5196,
											"name": "tag",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 4993,
											"end": 5196,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5157,
											"end": 5189,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5157,
											"end": 5189,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5157,
											"end": 5189,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5157,
											"end": 5189,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5139,
											"end": 5190,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5139,
											"end": 5190,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5127,
											"end": 5129,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5112,
											"end": 5130,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5112,
											"end": 5130,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5094,
											"end": 5196,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 5201,
											"end": 5475,
											"name": "tag",
											"source": 1,
											"value": "121"
										},
										{
											"begin": 5201,
											"end": 5475,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5393,
											"end": 5425,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5393,
											"end": 5425,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5393,
											"end": 5425,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5393,
											"end": 5425,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5375,
											"end": 5426,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5375,
											"end": 5426,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5457,
											"end": 5459,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5442,
											"end": 5460,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5442,
											"end": 5460,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5435,
											"end": 5469,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5363,
											"end": 5365,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5348,
											"end": 5366,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5348,
											"end": 5366,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5330,
											"end": 5475,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 5480,
											"end": 6115,
											"name": "tag",
											"source": 1,
											"value": "46"
										},
										{
											"begin": 5480,
											"end": 6115,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5651,
											"end": 5653,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5703,
											"end": 5724,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5703,
											"end": 5724,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5703,
											"end": 5724,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5773,
											"end": 5786,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5773,
											"end": 5786,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5676,
											"end": 5694,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5676,
											"end": 5694,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5676,
											"end": 5694,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5795,
											"end": 5817,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5795,
											"end": 5817,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5795,
											"end": 5817,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5480,
											"end": 6115,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5480,
											"end": 6115,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5651,
											"end": 5653,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5874,
											"end": 5889,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5874,
											"end": 5889,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5874,
											"end": 5889,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5874,
											"end": 5889,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5848,
											"end": 5850,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5833,
											"end": 5851,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5833,
											"end": 5851,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5833,
											"end": 5851,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5480,
											"end": 6115,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5920,
											"end": 6089,
											"name": "tag",
											"source": 1,
											"value": "203"
										},
										{
											"begin": 5920,
											"end": 6089,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5934,
											"end": 5940,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5931,
											"end": 5932,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5928,
											"end": 5941,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 5920,
											"end": 6089,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5920,
											"end": 6089,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "205"
										},
										{
											"begin": 5920,
											"end": 6089,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5995,
											"end": 6008,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5995,
											"end": 6008,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5983,
											"end": 6009,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5983,
											"end": 6009,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6064,
											"end": 6079,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6064,
											"end": 6079,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 6064,
											"end": 6079,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6064,
											"end": 6079,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6029,
											"end": 6041,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6029,
											"end": 6041,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 6029,
											"end": 6041,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6029,
											"end": 6041,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5956,
											"end": 5957,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5949,
											"end": 5958,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5920,
											"end": 6089,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "203"
										},
										{
											"begin": 5920,
											"end": 6089,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5920,
											"end": 6089,
											"name": "tag",
											"source": 1,
											"value": "205"
										},
										{
											"begin": 5920,
											"end": 6089,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6106,
											"end": 6109,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6106,
											"end": 6109,
											"name": "SWAP7",
											"source": 1
										},
										{
											"begin": 5631,
											"end": 6115,
											"name": "SWAP6",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5631,
											"end": 6115,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 6120,
											"end": 6297,
											"name": "tag",
											"source": 1,
											"value": "33"
										},
										{
											"begin": 6120,
											"end": 6297,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6266,
											"end": 6291,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6266,
											"end": 6291,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6266,
											"end": 6291,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6254,
											"end": 6256,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6239,
											"end": 6257,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6239,
											"end": 6257,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6221,
											"end": 6297,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 6302,
											"end": 6677,
											"name": "tag",
											"source": 1,
											"value": "133"
										},
										{
											"begin": 6302,
											"end": 6677,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6504,
											"end": 6529,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6504,
											"end": 6529,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 6504,
											"end": 6529,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6603,
											"end": 6618,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6603,
											"end": 6618,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6603,
											"end": 6618,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6598,
											"end": 6600,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6583,
											"end": 6601,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 6583,
											"end": 6601,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6576,
											"end": 6619,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6655,
											"end": 6670,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6650,
											"end": 6652,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 6635,
											"end": 6653,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6635,
											"end": 6653,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6628,
											"end": 6671,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6492,
											"end": 6494,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 6477,
											"end": 6495,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6477,
											"end": 6495,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6459,
											"end": 6677,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 7314,
											"end": 7447,
											"name": "tag",
											"source": 1,
											"value": "159"
										},
										{
											"begin": 7314,
											"end": 7447,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7391,
											"end": 7422,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7391,
											"end": 7422,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7381,
											"end": 7423,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7381,
											"end": 7423,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 7371,
											"end": 7373,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "107"
										},
										{
											"begin": 7371,
											"end": 7373,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7437,
											"end": 7438,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7434,
											"end": 7435,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7427,
											"end": 7439,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"getActionId(bytes4)": "851c1bb3",
							"getAuthorizer()": "aaabadc5",
							"getCollectedFeeAmounts(address[])": "e42abf35",
							"getFlashLoanFeePercentage()": "d877845c",
							"getSwapFeePercentage()": "55c67628",
							"setFlashLoanFeePercentage(uint256)": "6b6b9f69",
							"setSwapFeePercentage(uint256)": "38e9922e",
							"vault()": "fbfa77cf",
							"withdrawCollectedFees(address[],uint256[],address)": "6daefab6"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFlashLoanFeePercentage\",\"type\":\"uint256\"}],\"name\":\"FlashLoanFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"SwapFeePercentageChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getCollectedFeeAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlashLoanFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFlashLoanFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setFlashLoanFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawCollectedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This an auxiliary contract to the Vault, deployed by it during construction. It offloads some of the tasks the Vault performs to reduce its overall bytecode size. The current values for all protocol fee percentages are stored here, and any tokens charged as protocol fees are sent to this contract, where they may be withdrawn by authorized entities. All authorization tasks are delegated to the Vault's own authorizer.\",\"kind\":\"dev\",\"methods\":{\"getActionId(bytes4)\":{\"details\":\"Returns the action identifier associated with the external function described by `selector`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProtocolFeesCollector.sol\":\"ProtocolFeesCollector\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ProtocolFeesCollector.sol\":{\"keccak256\":\"0xdac768c449ca40770f677384249d0369b00520fd0c653de739378905f68e59c4\",\"urls\":[\"bzz-raw://eb83977cbd8d17f167d17dbdc15fb51c8e26e3f56707a65f9fbaca22b6844fde\",\"dweb:/ipfs/QmSmoRqshLHPM2S66Si19a7Ly8oKsZ4kPqTPfEq5Kbq5ps\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 597,
								"contract": "contracts/ProtocolFeesCollector.sol:ProtocolFeesCollector",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 1314,
								"contract": "contracts/ProtocolFeesCollector.sol:ProtocolFeesCollector",
								"label": "_swapFeePercentage",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 1316,
								"contract": "contracts/ProtocolFeesCollector.sol:ProtocolFeesCollector",
								"label": "_flashLoanFeePercentage",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProtocolFeesCollector.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ProtocolFeesCollector.sol\":{\"keccak256\":\"0xdac768c449ca40770f677384249d0369b00520fd0c653de739378905f68e59c4\",\"urls\":[\"bzz-raw://eb83977cbd8d17f167d17dbdc15fb51c8e26e3f56707a65f9fbaca22b6844fde\",\"dweb:/ipfs/QmSmoRqshLHPM2S66Si19a7Ly8oKsZ4kPqTPfEq5Kbq5ps\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 597,
								"contract": "contracts/ProtocolFeesCollector.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/ProtocolFeesCollector.sol\":16037:17712  library SafeERC20 {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ProtocolFeesCollector.sol\":16037:17712  library SafeERC20 {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220935d468878eeba652745c78144b7cec6fffdfd92ec50d68b4115ed2257bd666764736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220935d468878eeba652745c78144b7cec6fffdfd92ec50d68b4115ed2257bd666764736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP4 0x5D CHAINID DUP9 PUSH25 0xEEBA652745C78144B7CEC6FFFDFD92EC50D68B4115ED2257BD PUSH7 0x6764736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "16037:1675:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220935d468878eeba652745c78144b7cec6fffdfd92ec50d68b4115ed2257bd666764736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP4 0x5D CHAINID DUP9 PUSH25 0xEEBA652745C78144B7CEC6FFFDFD92EC50D68B4115ED2257BD PUSH7 0x6764736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "16037:1675:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_callOptionalReturn(address,bytes memory)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 16037,
									"end": 17712,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "INVALID",
									"source": 0
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 16037,
									"end": 17712,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220935d468878eeba652745c78144b7cec6fffdfd92ec50d68b4115ed2257bd666764736f6c63430007060033",
									".code": [
										{
											"begin": 16037,
											"end": 17712,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 17712,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 17712,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 17712,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 16037,
											"end": 17712,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 16037,
											"end": 17712,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 17712,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 16037,
											"end": 17712,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 16037,
											"end": 17712,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProtocolFeesCollector.sol\":\"SafeERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ProtocolFeesCollector.sol\":{\"keccak256\":\"0xdac768c449ca40770f677384249d0369b00520fd0c653de739378905f68e59c4\",\"urls\":[\"bzz-raw://eb83977cbd8d17f167d17dbdc15fb51c8e26e3f56707a65f9fbaca22b6844fde\",\"dweb:/ipfs/QmSmoRqshLHPM2S66Si19a7Ly8oKsZ4kPqTPfEq5Kbq5ps\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "contracts/ProtocolFeesCollector.sol: Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "contracts/ProtocolFeesCollector.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"contracts/ProtocolFeesCollector.sol": {
				"ast": {
					"absolutePath": "contracts/ProtocolFeesCollector.sol",
					"exportedSymbols": {
						"Authentication": [
							715
						],
						"Errors": [
							374
						],
						"IAsset": [
							48
						],
						"IAuthentication": [
							45
						],
						"IAuthorizer": [
							495
						],
						"IERC20": [
							451
						],
						"IFlashLoanRecipient": [
							468
						],
						"ISignaturesValidator": [
							35
						],
						"ITemporarilyPausable": [
							18
						],
						"IVault": [
							1294
						],
						"IWETH": [
							481
						],
						"InputHelpers": [
							842
						],
						"ProtocolFeesCollector": [
							1555
						],
						"ReentrancyGuard": [
							641
						],
						"SafeERC20": [
							587
						],
						"_require": [
							65
						],
						"_revert": [
							73
						]
					},
					"id": 1556,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "27:63:0",
								"text": " @dev Interface for the TemporarilyPausable helper."
							},
							"fullyImplemented": false,
							"id": 18,
							"linearizedBaseContracts": [
								18
							],
							"name": "ITemporarilyPausable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "130:85:0",
										"text": " @dev Emitted every time the pause state changes by `_setPaused`."
									},
									"id": 7,
									"name": "PausedStateChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": false,
												"mutability": "mutable",
												"name": "paused",
												"nodeType": "VariableDeclaration",
												"scope": 7,
												"src": "246:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 4,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "246:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "245:13:0"
									},
									"src": "221:38:0"
								},
								{
									"documentation": {
										"id": 8,
										"nodeType": "StructuredDocumentation",
										"src": "267:59:0",
										"text": " @dev Returns the current paused state."
									},
									"functionSelector": "1c0de051",
									"id": 17,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPausedState",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 9,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "355:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "paused",
												"nodeType": "VariableDeclaration",
												"scope": 17,
												"src": "422:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 10,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "422:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 13,
												"mutability": "mutable",
												"name": "pauseWindowEndTime",
												"nodeType": "VariableDeclaration",
												"scope": 17,
												"src": "448:26:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 12,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "448:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 15,
												"mutability": "mutable",
												"name": "bufferPeriodEndTime",
												"nodeType": "VariableDeclaration",
												"scope": 17,
												"src": "489:27:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 14,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "489:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "407:120:0"
									},
									"scope": 18,
									"src": "332:196:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1556,
							"src": "92:439:0"
						},
						{
							"id": 19,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "535:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 20,
								"nodeType": "StructuredDocumentation",
								"src": "562:97:0",
								"text": " @dev Interface for the SignatureValidator helper, used to support meta-transactions."
							},
							"fullyImplemented": false,
							"id": 35,
							"linearizedBaseContracts": [
								35
							],
							"name": "ISignaturesValidator",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "699:62:0",
										"text": " @dev Returns the EIP712 domain separator."
									},
									"functionSelector": "ed24911d",
									"id": 26,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getDomainSeparator",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:0"
									},
									"returnParameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "820:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 23,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:0"
									},
									"scope": 35,
									"src": "767:62:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "837:85:0",
										"text": " @dev Returns the next nonce used by an address to sign messages."
									},
									"functionSelector": "90193b7c",
									"id": 34,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getNextNonce",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "user",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "950:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 28,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "950:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "949:14:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "987:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 31,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "987:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "986:9:0"
									},
									"scope": 35,
									"src": "928:68:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1556,
							"src": "661:338:0"
						},
						{
							"id": 36,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "1003:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 45,
							"linearizedBaseContracts": [
								45
							],
							"name": "IAuthentication",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 37,
										"nodeType": "StructuredDocumentation",
										"src": "1063:118:0",
										"text": " @dev Returns the action identifier associated with the external function described by `selector`."
									},
									"functionSelector": "851c1bb3",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getActionId",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "selector",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1208:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 38,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "1208:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1207:17:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1248:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 41,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1248:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1247:9:0"
									},
									"scope": 45,
									"src": "1187:70:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1556,
							"src": "1030:230:0"
						},
						{
							"id": 46,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "1264:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 47,
								"nodeType": "StructuredDocumentation",
								"src": "1291:315:0",
								"text": " @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\n address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\n types.\n This concept is unrelated to a Pool's Asset Managers."
							},
							"fullyImplemented": true,
							"id": 48,
							"linearizedBaseContracts": [
								48
							],
							"name": "IAsset",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 1556,
							"src": "1608:75:0"
						},
						{
							"id": 49,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "1687:23:0"
						},
						{
							"body": {
								"id": 64,
								"nodeType": "Block",
								"src": "1931:45:0",
								"statements": [
									{
										"condition": {
											"id": 58,
											"isConstant": false,
											"isLValue": false,
											"isPure": false,
											"lValueRequested": false,
											"nodeType": "UnaryOperation",
											"operator": "!",
											"prefix": true,
											"src": "1942:10:0",
											"subExpression": {
												"id": 57,
												"name": "condition",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 52,
												"src": "1943:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										},
										"id": 63,
										"nodeType": "IfStatement",
										"src": "1938:34:0",
										"trueBody": {
											"expression": {
												"arguments": [
													{
														"id": 60,
														"name": "errorCode",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "1962:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													}
												],
												"expression": {
													"argumentTypes": [
														{
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													],
													"id": 59,
													"name": "_revert",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 73,
													"src": "1954:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$__$",
														"typeString": "function (uint256) pure"
													}
												},
												"id": 61,
												"isConstant": false,
												"isLValue": false,
												"isPure": false,
												"kind": "functionCall",
												"lValueRequested": false,
												"names": [],
												"nodeType": "FunctionCall",
												"src": "1954:18:0",
												"tryCall": false,
												"typeDescriptions": {
													"typeIdentifier": "t_tuple$__$",
													"typeString": "tuple()"
												}
											},
											"id": 62,
											"nodeType": "ExpressionStatement",
											"src": "1954:18:0"
										}
									}
								]
							},
							"documentation": {
								"id": 50,
								"nodeType": "StructuredDocumentation",
								"src": "1736:135:0",
								"text": " @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\n supported."
							},
							"id": 65,
							"implemented": true,
							"kind": "freeFunction",
							"modifiers": [],
							"name": "_require",
							"nodeType": "FunctionDefinition",
							"parameters": {
								"id": 55,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 52,
										"mutability": "mutable",
										"name": "condition",
										"nodeType": "VariableDeclaration",
										"scope": 65,
										"src": "1891:14:0",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										},
										"typeName": {
											"id": 51,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "1891:4:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										},
										"visibility": "internal"
									},
									{
										"constant": false,
										"id": 54,
										"mutability": "mutable",
										"name": "errorCode",
										"nodeType": "VariableDeclaration",
										"scope": 65,
										"src": "1907:17:0",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"typeName": {
											"id": 53,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1907:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "1890:35:0"
							},
							"returnParameters": {
								"id": 56,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "1931:0:0"
							},
							"scope": 1556,
							"src": "1873:103:0",
							"stateMutability": "pure",
							"virtual": false,
							"visibility": "internal"
						},
						{
							"body": {
								"id": 72,
								"nodeType": "Block",
								"src": "2129:3182:0",
								"statements": [
									{
										"AST": {
											"nodeType": "YulBlock",
											"src": "2929:2379:0",
											"statements": [
												{
													"nodeType": "YulVariableDeclaration",
													"src": "3208:42:0",
													"value": {
														"arguments": [
															{
																"arguments": [
																	{
																		"name": "errorCode",
																		"nodeType": "YulIdentifier",
																		"src": "3229:9:0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3240:2:0",
																		"type": "",
																		"value": "10"
																	}
																],
																"functionName": {
																	"name": "mod",
																	"nodeType": "YulIdentifier",
																	"src": "3225:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "3225:18:0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3245:4:0",
																"type": "",
																"value": "0x30"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "3221:3:0"
														},
														"nodeType": "YulFunctionCall",
														"src": "3221:29:0"
													},
													"variables": [
														{
															"name": "units",
															"nodeType": "YulTypedName",
															"src": "3212:5:0",
															"type": ""
														}
													]
												},
												{
													"nodeType": "YulAssignment",
													"src": "3262:31:0",
													"value": {
														"arguments": [
															{
																"name": "errorCode",
																"nodeType": "YulIdentifier",
																"src": "3279:9:0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3290:2:0",
																"type": "",
																"value": "10"
															}
														],
														"functionName": {
															"name": "div",
															"nodeType": "YulIdentifier",
															"src": "3275:3:0"
														},
														"nodeType": "YulFunctionCall",
														"src": "3275:18:0"
													},
													"variableNames": [
														{
															"name": "errorCode",
															"nodeType": "YulIdentifier",
															"src": "3262:9:0"
														}
													]
												},
												{
													"nodeType": "YulVariableDeclaration",
													"src": "3303:43:0",
													"value": {
														"arguments": [
															{
																"arguments": [
																	{
																		"name": "errorCode",
																		"nodeType": "YulIdentifier",
																		"src": "3325:9:0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3336:2:0",
																		"type": "",
																		"value": "10"
																	}
																],
																"functionName": {
																	"name": "mod",
																	"nodeType": "YulIdentifier",
																	"src": "3321:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "3321:18:0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3341:4:0",
																"type": "",
																"value": "0x30"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "3317:3:0"
														},
														"nodeType": "YulFunctionCall",
														"src": "3317:29:0"
													},
													"variables": [
														{
															"name": "tenths",
															"nodeType": "YulTypedName",
															"src": "3307:6:0",
															"type": ""
														}
													]
												},
												{
													"nodeType": "YulAssignment",
													"src": "3358:31:0",
													"value": {
														"arguments": [
															{
																"name": "errorCode",
																"nodeType": "YulIdentifier",
																"src": "3375:9:0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3386:2:0",
																"type": "",
																"value": "10"
															}
														],
														"functionName": {
															"name": "div",
															"nodeType": "YulIdentifier",
															"src": "3371:3:0"
														},
														"nodeType": "YulFunctionCall",
														"src": "3371:18:0"
													},
													"variableNames": [
														{
															"name": "errorCode",
															"nodeType": "YulIdentifier",
															"src": "3358:9:0"
														}
													]
												},
												{
													"nodeType": "YulVariableDeclaration",
													"src": "3399:45:0",
													"value": {
														"arguments": [
															{
																"arguments": [
																	{
																		"name": "errorCode",
																		"nodeType": "YulIdentifier",
																		"src": "3423:9:0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3434:2:0",
																		"type": "",
																		"value": "10"
																	}
																],
																"functionName": {
																	"name": "mod",
																	"nodeType": "YulIdentifier",
																	"src": "3419:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "3419:18:0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3439:4:0",
																"type": "",
																"value": "0x30"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "3415:3:0"
														},
														"nodeType": "YulFunctionCall",
														"src": "3415:29:0"
													},
													"variables": [
														{
															"name": "hundreds",
															"nodeType": "YulTypedName",
															"src": "3403:8:0",
															"type": ""
														}
													]
												},
												{
													"nodeType": "YulVariableDeclaration",
													"src": "4015:103:0",
													"value": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4039:3:0",
																"type": "",
																"value": "200"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4048:16:0",
																		"type": "",
																		"value": "0x42414c23000000"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "units",
																						"nodeType": "YulIdentifier",
																						"src": "4074:5:0"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4085:1:0",
																								"type": "",
																								"value": "8"
																							},
																							{
																								"name": "tenths",
																								"nodeType": "YulIdentifier",
																								"src": "4088:6:0"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "4081:3:0"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4081:14:0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4070:3:0"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4070:26:0"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4102:2:0",
																						"type": "",
																						"value": "16"
																					},
																					{
																						"name": "hundreds",
																						"nodeType": "YulIdentifier",
																						"src": "4106:8:0"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "4098:3:0"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4098:17:0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4066:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4066:50:0"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4044:3:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "4044:73:0"
															}
														],
														"functionName": {
															"name": "shl",
															"nodeType": "YulIdentifier",
															"src": "4035:3:0"
														},
														"nodeType": "YulFunctionCall",
														"src": "4035:83:0"
													},
													"variables": [
														{
															"name": "revertReason",
															"nodeType": "YulTypedName",
															"src": "4019:12:0",
															"type": ""
														}
													]
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4641:3:0",
																"type": "",
																"value": "0x0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4646:66:0",
																"type": "",
																"value": "0x08c379a000000000000000000000000000000000000000000000000000000000"
															}
														],
														"functionName": {
															"name": "mstore",
															"nodeType": "YulIdentifier",
															"src": "4634:6:0"
														},
														"nodeType": "YulFunctionCall",
														"src": "4634:79:0"
													},
													"nodeType": "YulExpressionStatement",
													"src": "4634:79:0"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4848:4:0",
																"type": "",
																"value": "0x04"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4854:66:0",
																"type": "",
																"value": "0x0000000000000000000000000000000000000000000000000000000000000020"
															}
														],
														"functionName": {
															"name": "mstore",
															"nodeType": "YulIdentifier",
															"src": "4841:6:0"
														},
														"nodeType": "YulFunctionCall",
														"src": "4841:80:0"
													},
													"nodeType": "YulExpressionStatement",
													"src": "4841:80:0"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4992:4:0",
																"type": "",
																"value": "0x24"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4998:1:0",
																"type": "",
																"value": "7"
															}
														],
														"functionName": {
															"name": "mstore",
															"nodeType": "YulIdentifier",
															"src": "4985:6:0"
														},
														"nodeType": "YulFunctionCall",
														"src": "4985:15:0"
													},
													"nodeType": "YulExpressionStatement",
													"src": "4985:15:0"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5067:4:0",
																"type": "",
																"value": "0x44"
															},
															{
																"name": "revertReason",
																"nodeType": "YulIdentifier",
																"src": "5073:12:0"
															}
														],
														"functionName": {
															"name": "mstore",
															"nodeType": "YulIdentifier",
															"src": "5060:6:0"
														},
														"nodeType": "YulFunctionCall",
														"src": "5060:26:0"
													},
													"nodeType": "YulExpressionStatement",
													"src": "5060:26:0"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5294:1:0",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5297:3:0",
																"type": "",
																"value": "100"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "5287:6:0"
														},
														"nodeType": "YulFunctionCall",
														"src": "5287:14:0"
													},
													"nodeType": "YulExpressionStatement",
													"src": "5287:14:0"
												}
											]
										},
										"evmVersion": "istanbul",
										"externalReferences": [
											{
												"declaration": 68,
												"isOffset": false,
												"isSlot": false,
												"src": "3229:9:0",
												"valueSize": 1
											},
											{
												"declaration": 68,
												"isOffset": false,
												"isSlot": false,
												"src": "3262:9:0",
												"valueSize": 1
											},
											{
												"declaration": 68,
												"isOffset": false,
												"isSlot": false,
												"src": "3279:9:0",
												"valueSize": 1
											},
											{
												"declaration": 68,
												"isOffset": false,
												"isSlot": false,
												"src": "3325:9:0",
												"valueSize": 1
											},
											{
												"declaration": 68,
												"isOffset": false,
												"isSlot": false,
												"src": "3358:9:0",
												"valueSize": 1
											},
											{
												"declaration": 68,
												"isOffset": false,
												"isSlot": false,
												"src": "3375:9:0",
												"valueSize": 1
											},
											{
												"declaration": 68,
												"isOffset": false,
												"isSlot": false,
												"src": "3423:9:0",
												"valueSize": 1
											}
										],
										"id": 71,
										"nodeType": "InlineAssembly",
										"src": "2920:2388:0"
									}
								]
							},
							"documentation": {
								"id": 66,
								"nodeType": "StructuredDocumentation",
								"src": "1980:106:0",
								"text": " @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported."
							},
							"id": 73,
							"implemented": true,
							"kind": "freeFunction",
							"modifiers": [],
							"name": "_revert",
							"nodeType": "FunctionDefinition",
							"parameters": {
								"id": 69,
								"nodeType": "ParameterList",
								"parameters": [
									{
										"constant": false,
										"id": 68,
										"mutability": "mutable",
										"name": "errorCode",
										"nodeType": "VariableDeclaration",
										"scope": 73,
										"src": "2105:17:0",
										"stateVariable": false,
										"storageLocation": "default",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										},
										"typeName": {
											"id": 67,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2105:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"visibility": "internal"
									}
								],
								"src": "2104:19:0"
							},
							"returnParameters": {
								"id": 70,
								"nodeType": "ParameterList",
								"parameters": [],
								"src": "2129:0:0"
							},
							"scope": 1556,
							"src": "2088:3223:0",
							"stateMutability": "pure",
							"virtual": false,
							"visibility": "internal"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 374,
							"linearizedBaseContracts": [
								374
							],
							"name": "Errors",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 76,
									"mutability": "constant",
									"name": "ADD_OVERFLOW",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "5350:42:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 74,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "5350:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "30",
										"id": 75,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "5391:1:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_0_by_1",
											"typeString": "int_const 0"
										},
										"value": "0"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 79,
									"mutability": "constant",
									"name": "SUB_OVERFLOW",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "5399:42:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 77,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "5399:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 78,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "5440:1:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 82,
									"mutability": "constant",
									"name": "SUB_UNDERFLOW",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "5448:43:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 80,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "5448:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 81,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "5490:1:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 85,
									"mutability": "constant",
									"name": "MUL_OVERFLOW",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "5498:42:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 83,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "5498:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "33",
										"id": 84,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "5539:1:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_3_by_1",
											"typeString": "int_const 3"
										},
										"value": "3"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 88,
									"mutability": "constant",
									"name": "ZERO_DIVISION",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "5547:43:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 86,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "5547:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "34",
										"id": 87,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "5589:1:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_4_by_1",
											"typeString": "int_const 4"
										},
										"value": "4"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 91,
									"mutability": "constant",
									"name": "DIV_INTERNAL",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "5597:42:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 89,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "5597:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "35",
										"id": 90,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "5638:1:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_5_by_1",
											"typeString": "int_const 5"
										},
										"value": "5"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 94,
									"mutability": "constant",
									"name": "X_OUT_OF_BOUNDS",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "5646:45:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 92,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "5646:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "36",
										"id": 93,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "5690:1:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_6_by_1",
											"typeString": "int_const 6"
										},
										"value": "6"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 97,
									"mutability": "constant",
									"name": "Y_OUT_OF_BOUNDS",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "5698:45:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 95,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "5698:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "37",
										"id": 96,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "5742:1:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_7_by_1",
											"typeString": "int_const 7"
										},
										"value": "7"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 100,
									"mutability": "constant",
									"name": "PRODUCT_OUT_OF_BOUNDS",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "5750:51:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 98,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "5750:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "38",
										"id": 99,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "5800:1:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_8_by_1",
											"typeString": "int_const 8"
										},
										"value": "8"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 103,
									"mutability": "constant",
									"name": "INVALID_EXPONENT",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "5808:46:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 101,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "5808:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "39",
										"id": 102,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "5853:1:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_9_by_1",
											"typeString": "int_const 9"
										},
										"value": "9"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 106,
									"mutability": "constant",
									"name": "OUT_OF_BOUNDS",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "5877:45:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 104,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "5877:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "313030",
										"id": 105,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "5919:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_100_by_1",
											"typeString": "int_const 100"
										},
										"value": "100"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 109,
									"mutability": "constant",
									"name": "UNSORTED_ARRAY",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "5929:46:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 107,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "5929:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "313031",
										"id": 108,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "5972:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_101_by_1",
											"typeString": "int_const 101"
										},
										"value": "101"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 112,
									"mutability": "constant",
									"name": "UNSORTED_TOKENS",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "5982:47:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 110,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "5982:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "313032",
										"id": 111,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6026:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_102_by_1",
											"typeString": "int_const 102"
										},
										"value": "102"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 115,
									"mutability": "constant",
									"name": "INPUT_LENGTH_MISMATCH",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "6036:53:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 113,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "6036:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "313033",
										"id": 114,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6086:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_103_by_1",
											"typeString": "int_const 103"
										},
										"value": "103"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 118,
									"mutability": "constant",
									"name": "ZERO_TOKEN",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "6096:42:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 116,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "6096:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "313034",
										"id": 117,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6135:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_104_by_1",
											"typeString": "int_const 104"
										},
										"value": "104"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 121,
									"mutability": "constant",
									"name": "MIN_TOKENS",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "6168:42:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 119,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "6168:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "323030",
										"id": 120,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6207:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_200_by_1",
											"typeString": "int_const 200"
										},
										"value": "200"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 124,
									"mutability": "constant",
									"name": "MAX_TOKENS",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "6217:42:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 122,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "6217:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "323031",
										"id": 123,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6256:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_201_by_1",
											"typeString": "int_const 201"
										},
										"value": "201"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 127,
									"mutability": "constant",
									"name": "MAX_SWAP_FEE_PERCENTAGE",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "6266:55:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 125,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "6266:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "323032",
										"id": 126,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6318:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_202_by_1",
											"typeString": "int_const 202"
										},
										"value": "202"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 130,
									"mutability": "constant",
									"name": "MIN_SWAP_FEE_PERCENTAGE",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "6328:55:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 128,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "6328:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "323033",
										"id": 129,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6380:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_203_by_1",
											"typeString": "int_const 203"
										},
										"value": "203"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 133,
									"mutability": "constant",
									"name": "MINIMUM_BPT",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "6390:43:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 131,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "6390:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "323034",
										"id": 132,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6430:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_204_by_1",
											"typeString": "int_const 204"
										},
										"value": "204"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 136,
									"mutability": "constant",
									"name": "CALLER_NOT_VAULT",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "6440:48:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 134,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "6440:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "323035",
										"id": 135,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6485:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_205_by_1",
											"typeString": "int_const 205"
										},
										"value": "205"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 139,
									"mutability": "constant",
									"name": "UNINITIALIZED",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "6495:45:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 137,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "6495:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "323036",
										"id": 138,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6537:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_206_by_1",
											"typeString": "int_const 206"
										},
										"value": "206"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 142,
									"mutability": "constant",
									"name": "BPT_IN_MAX_AMOUNT",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "6547:49:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 140,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "6547:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "323037",
										"id": 141,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6593:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_207_by_1",
											"typeString": "int_const 207"
										},
										"value": "207"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 145,
									"mutability": "constant",
									"name": "BPT_OUT_MIN_AMOUNT",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "6603:50:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 143,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "6603:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "323038",
										"id": 144,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6650:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_208_by_1",
											"typeString": "int_const 208"
										},
										"value": "208"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 148,
									"mutability": "constant",
									"name": "EXPIRED_PERMIT",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "6660:46:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 146,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "6660:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "323039",
										"id": 147,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6703:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_209_by_1",
											"typeString": "int_const 209"
										},
										"value": "209"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 151,
									"mutability": "constant",
									"name": "MIN_AMP",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "6729:39:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 149,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "6729:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "333030",
										"id": 150,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6765:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_300_by_1",
											"typeString": "int_const 300"
										},
										"value": "300"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 154,
									"mutability": "constant",
									"name": "MAX_AMP",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "6775:39:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 152,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "6775:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "333031",
										"id": 153,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6811:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_301_by_1",
											"typeString": "int_const 301"
										},
										"value": "301"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 157,
									"mutability": "constant",
									"name": "MIN_WEIGHT",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "6821:42:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 155,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "6821:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "333032",
										"id": 156,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6860:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_302_by_1",
											"typeString": "int_const 302"
										},
										"value": "302"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 160,
									"mutability": "constant",
									"name": "MAX_STABLE_TOKENS",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "6870:49:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 158,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "6870:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "333033",
										"id": 159,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6916:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_303_by_1",
											"typeString": "int_const 303"
										},
										"value": "303"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 163,
									"mutability": "constant",
									"name": "MAX_IN_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "6926:44:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 161,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "6926:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "333034",
										"id": 162,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "6967:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_304_by_1",
											"typeString": "int_const 304"
										},
										"value": "304"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 166,
									"mutability": "constant",
									"name": "MAX_OUT_RATIO",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "6977:45:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 164,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "6977:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "333035",
										"id": 165,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "7019:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_305_by_1",
											"typeString": "int_const 305"
										},
										"value": "305"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 169,
									"mutability": "constant",
									"name": "MIN_BPT_IN_FOR_TOKEN_OUT",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "7029:56:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 167,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "7029:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "333036",
										"id": 168,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "7082:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_306_by_1",
											"typeString": "int_const 306"
										},
										"value": "306"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 172,
									"mutability": "constant",
									"name": "MAX_OUT_BPT_FOR_TOKEN_IN",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "7092:56:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 170,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "7092:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "333037",
										"id": 171,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "7145:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_307_by_1",
											"typeString": "int_const 307"
										},
										"value": "307"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 175,
									"mutability": "constant",
									"name": "NORMALIZED_WEIGHT_INVARIANT",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "7155:59:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 173,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "7155:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "333038",
										"id": 174,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "7211:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_308_by_1",
											"typeString": "int_const 308"
										},
										"value": "308"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 178,
									"mutability": "constant",
									"name": "INVALID_TOKEN",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "7221:45:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 176,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "7221:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "333039",
										"id": 177,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "7263:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_309_by_1",
											"typeString": "int_const 309"
										},
										"value": "309"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 181,
									"mutability": "constant",
									"name": "UNHANDLED_JOIN_KIND",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "7273:51:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 179,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "7273:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "333130",
										"id": 180,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "7321:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_310_by_1",
											"typeString": "int_const 310"
										},
										"value": "310"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 184,
									"mutability": "constant",
									"name": "ZERO_INVARIANT",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "7331:46:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 182,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "7331:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "333131",
										"id": 183,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "7374:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_311_by_1",
											"typeString": "int_const 311"
										},
										"value": "311"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 187,
									"mutability": "constant",
									"name": "ORACLE_INVALID_SECONDS_QUERY",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "7384:60:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 185,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "7384:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "333132",
										"id": 186,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "7441:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_312_by_1",
											"typeString": "int_const 312"
										},
										"value": "312"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 190,
									"mutability": "constant",
									"name": "ORACLE_NOT_INITIALIZED",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "7451:54:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 188,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "7451:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "333133",
										"id": 189,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "7502:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_313_by_1",
											"typeString": "int_const 313"
										},
										"value": "313"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 193,
									"mutability": "constant",
									"name": "ORACLE_QUERY_TOO_OLD",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "7512:52:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 191,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "7512:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "333134",
										"id": 192,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "7561:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_314_by_1",
											"typeString": "int_const 314"
										},
										"value": "314"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 196,
									"mutability": "constant",
									"name": "ORACLE_INVALID_INDEX",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "7571:52:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 194,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "7571:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "333135",
										"id": 195,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "7620:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_315_by_1",
											"typeString": "int_const 315"
										},
										"value": "315"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 199,
									"mutability": "constant",
									"name": "ORACLE_BAD_SECS",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "7630:47:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 197,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "7630:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "333136",
										"id": 198,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "7674:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_316_by_1",
											"typeString": "int_const 316"
										},
										"value": "316"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 202,
									"mutability": "constant",
									"name": "REENTRANCY",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "7698:42:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 200,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "7698:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343030",
										"id": 201,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "7737:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_400_by_1",
											"typeString": "int_const 400"
										},
										"value": "400"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 205,
									"mutability": "constant",
									"name": "SENDER_NOT_ALLOWED",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "7747:50:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 203,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "7747:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343031",
										"id": 204,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "7794:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_401_by_1",
											"typeString": "int_const 401"
										},
										"value": "401"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 208,
									"mutability": "constant",
									"name": "PAUSED",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "7804:38:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 206,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "7804:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343032",
										"id": 207,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "7839:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_402_by_1",
											"typeString": "int_const 402"
										},
										"value": "402"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 211,
									"mutability": "constant",
									"name": "PAUSE_WINDOW_EXPIRED",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "7849:52:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 209,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "7849:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343033",
										"id": 210,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "7898:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_403_by_1",
											"typeString": "int_const 403"
										},
										"value": "403"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 214,
									"mutability": "constant",
									"name": "MAX_PAUSE_WINDOW_DURATION",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "7908:57:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 212,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "7908:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343034",
										"id": 213,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "7962:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_404_by_1",
											"typeString": "int_const 404"
										},
										"value": "404"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 217,
									"mutability": "constant",
									"name": "MAX_BUFFER_PERIOD_DURATION",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "7972:58:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 215,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "7972:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343035",
										"id": 216,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "8027:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_405_by_1",
											"typeString": "int_const 405"
										},
										"value": "405"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 220,
									"mutability": "constant",
									"name": "INSUFFICIENT_BALANCE",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "8037:52:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 218,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "8037:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343036",
										"id": 219,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "8086:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_406_by_1",
											"typeString": "int_const 406"
										},
										"value": "406"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 223,
									"mutability": "constant",
									"name": "INSUFFICIENT_ALLOWANCE",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "8096:54:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 221,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "8096:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343037",
										"id": 222,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "8147:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_407_by_1",
											"typeString": "int_const 407"
										},
										"value": "407"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 226,
									"mutability": "constant",
									"name": "ERC20_TRANSFER_FROM_ZERO_ADDRESS",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "8157:64:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 224,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "8157:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343038",
										"id": 225,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "8218:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_408_by_1",
											"typeString": "int_const 408"
										},
										"value": "408"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 229,
									"mutability": "constant",
									"name": "ERC20_TRANSFER_TO_ZERO_ADDRESS",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "8228:62:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 227,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "8228:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343039",
										"id": 228,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "8287:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_409_by_1",
											"typeString": "int_const 409"
										},
										"value": "409"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 232,
									"mutability": "constant",
									"name": "ERC20_MINT_TO_ZERO_ADDRESS",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "8297:58:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 230,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "8297:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343130",
										"id": 231,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "8352:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_410_by_1",
											"typeString": "int_const 410"
										},
										"value": "410"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 235,
									"mutability": "constant",
									"name": "ERC20_BURN_FROM_ZERO_ADDRESS",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "8362:60:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 233,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "8362:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343131",
										"id": 234,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "8419:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_411_by_1",
											"typeString": "int_const 411"
										},
										"value": "411"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 238,
									"mutability": "constant",
									"name": "ERC20_APPROVE_FROM_ZERO_ADDRESS",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "8429:63:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 236,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "8429:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343132",
										"id": 237,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "8489:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_412_by_1",
											"typeString": "int_const 412"
										},
										"value": "412"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 241,
									"mutability": "constant",
									"name": "ERC20_APPROVE_TO_ZERO_ADDRESS",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "8499:61:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 239,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "8499:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343133",
										"id": 240,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "8557:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_413_by_1",
											"typeString": "int_const 413"
										},
										"value": "413"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 244,
									"mutability": "constant",
									"name": "ERC20_TRANSFER_EXCEEDS_ALLOWANCE",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "8567:64:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 242,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "8567:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343134",
										"id": 243,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "8628:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_414_by_1",
											"typeString": "int_const 414"
										},
										"value": "414"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 247,
									"mutability": "constant",
									"name": "ERC20_DECREASED_ALLOWANCE_BELOW_ZERO",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "8638:68:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 245,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "8638:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343135",
										"id": 246,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "8703:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_415_by_1",
											"typeString": "int_const 415"
										},
										"value": "415"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 250,
									"mutability": "constant",
									"name": "ERC20_TRANSFER_EXCEEDS_BALANCE",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "8713:62:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 248,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "8713:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343136",
										"id": 249,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "8772:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_416_by_1",
											"typeString": "int_const 416"
										},
										"value": "416"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 253,
									"mutability": "constant",
									"name": "ERC20_BURN_EXCEEDS_ALLOWANCE",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "8782:60:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 251,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "8782:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343137",
										"id": 252,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "8839:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_417_by_1",
											"typeString": "int_const 417"
										},
										"value": "417"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 256,
									"mutability": "constant",
									"name": "SAFE_ERC20_CALL_FAILED",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "8849:54:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 254,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "8849:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343138",
										"id": 255,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "8900:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_418_by_1",
											"typeString": "int_const 418"
										},
										"value": "418"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 259,
									"mutability": "constant",
									"name": "ADDRESS_INSUFFICIENT_BALANCE",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "8910:60:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 257,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "8910:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343139",
										"id": 258,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "8967:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_419_by_1",
											"typeString": "int_const 419"
										},
										"value": "419"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 262,
									"mutability": "constant",
									"name": "ADDRESS_CANNOT_SEND_VALUE",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "8977:57:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 260,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "8977:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343230",
										"id": 261,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "9031:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_420_by_1",
											"typeString": "int_const 420"
										},
										"value": "420"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 265,
									"mutability": "constant",
									"name": "SAFE_CAST_VALUE_CANT_FIT_INT256",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "9041:63:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 263,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "9041:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343231",
										"id": 264,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "9101:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_421_by_1",
											"typeString": "int_const 421"
										},
										"value": "421"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 268,
									"mutability": "constant",
									"name": "GRANT_SENDER_NOT_ADMIN",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "9111:54:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 266,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "9111:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343232",
										"id": 267,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "9162:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_422_by_1",
											"typeString": "int_const 422"
										},
										"value": "422"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 271,
									"mutability": "constant",
									"name": "REVOKE_SENDER_NOT_ADMIN",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "9172:55:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 269,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "9172:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343233",
										"id": 270,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "9224:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_423_by_1",
											"typeString": "int_const 423"
										},
										"value": "423"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 274,
									"mutability": "constant",
									"name": "RENOUNCE_SENDER_NOT_ALLOWED",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "9234:59:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 272,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "9234:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343234",
										"id": 273,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "9290:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_424_by_1",
											"typeString": "int_const 424"
										},
										"value": "424"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 277,
									"mutability": "constant",
									"name": "BUFFER_PERIOD_EXPIRED",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "9300:53:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 275,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "9300:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "343235",
										"id": 276,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "9350:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_425_by_1",
											"typeString": "int_const 425"
										},
										"value": "425"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 280,
									"mutability": "constant",
									"name": "INVALID_POOL_ID",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "9376:47:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 278,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "9376:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353030",
										"id": 279,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "9420:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_500_by_1",
											"typeString": "int_const 500"
										},
										"value": "500"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 283,
									"mutability": "constant",
									"name": "CALLER_NOT_POOL",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "9430:47:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 281,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "9430:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353031",
										"id": 282,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "9474:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_501_by_1",
											"typeString": "int_const 501"
										},
										"value": "501"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 286,
									"mutability": "constant",
									"name": "SENDER_NOT_ASSET_MANAGER",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "9484:56:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 284,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "9484:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353032",
										"id": 285,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "9537:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_502_by_1",
											"typeString": "int_const 502"
										},
										"value": "502"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 289,
									"mutability": "constant",
									"name": "USER_DOESNT_ALLOW_RELAYER",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "9547:57:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 287,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "9547:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353033",
										"id": 288,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "9601:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_503_by_1",
											"typeString": "int_const 503"
										},
										"value": "503"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 292,
									"mutability": "constant",
									"name": "INVALID_SIGNATURE",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "9611:49:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 290,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "9611:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353034",
										"id": 291,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "9657:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_504_by_1",
											"typeString": "int_const 504"
										},
										"value": "504"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 295,
									"mutability": "constant",
									"name": "EXIT_BELOW_MIN",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "9667:46:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 293,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "9667:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353035",
										"id": 294,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "9710:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_505_by_1",
											"typeString": "int_const 505"
										},
										"value": "505"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 298,
									"mutability": "constant",
									"name": "JOIN_ABOVE_MAX",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "9720:46:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 296,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "9720:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353036",
										"id": 297,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "9763:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_506_by_1",
											"typeString": "int_const 506"
										},
										"value": "506"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 301,
									"mutability": "constant",
									"name": "SWAP_LIMIT",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "9773:42:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 299,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "9773:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353037",
										"id": 300,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "9812:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_507_by_1",
											"typeString": "int_const 507"
										},
										"value": "507"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 304,
									"mutability": "constant",
									"name": "SWAP_DEADLINE",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "9822:45:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 302,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "9822:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353038",
										"id": 303,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "9864:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_508_by_1",
											"typeString": "int_const 508"
										},
										"value": "508"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 307,
									"mutability": "constant",
									"name": "CANNOT_SWAP_SAME_TOKEN",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "9874:54:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 305,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "9874:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353039",
										"id": 306,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "9925:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_509_by_1",
											"typeString": "int_const 509"
										},
										"value": "509"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 310,
									"mutability": "constant",
									"name": "UNKNOWN_AMOUNT_IN_FIRST_SWAP",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "9935:60:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 308,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "9935:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353130",
										"id": 309,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "9992:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_510_by_1",
											"typeString": "int_const 510"
										},
										"value": "510"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 313,
									"mutability": "constant",
									"name": "MALCONSTRUCTED_MULTIHOP_SWAP",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "10002:60:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 311,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "10002:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353131",
										"id": 312,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "10059:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_511_by_1",
											"typeString": "int_const 511"
										},
										"value": "511"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 316,
									"mutability": "constant",
									"name": "INTERNAL_BALANCE_OVERFLOW",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "10069:57:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 314,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "10069:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353132",
										"id": 315,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "10123:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_512_by_1",
											"typeString": "int_const 512"
										},
										"value": "512"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 319,
									"mutability": "constant",
									"name": "INSUFFICIENT_INTERNAL_BALANCE",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "10133:61:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 317,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "10133:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353133",
										"id": 318,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "10191:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_513_by_1",
											"typeString": "int_const 513"
										},
										"value": "513"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 322,
									"mutability": "constant",
									"name": "INVALID_ETH_INTERNAL_BALANCE",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "10201:60:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 320,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "10201:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353134",
										"id": 321,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "10258:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_514_by_1",
											"typeString": "int_const 514"
										},
										"value": "514"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 325,
									"mutability": "constant",
									"name": "INVALID_POST_LOAN_BALANCE",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "10268:57:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 323,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "10268:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353135",
										"id": 324,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "10322:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_515_by_1",
											"typeString": "int_const 515"
										},
										"value": "515"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 328,
									"mutability": "constant",
									"name": "INSUFFICIENT_ETH",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "10332:48:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 326,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "10332:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353136",
										"id": 327,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "10377:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_516_by_1",
											"typeString": "int_const 516"
										},
										"value": "516"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 331,
									"mutability": "constant",
									"name": "UNALLOCATED_ETH",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "10387:47:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 329,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "10387:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353137",
										"id": 330,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "10431:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_517_by_1",
											"typeString": "int_const 517"
										},
										"value": "517"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 334,
									"mutability": "constant",
									"name": "ETH_TRANSFER",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "10441:44:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 332,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "10441:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353138",
										"id": 333,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "10482:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_518_by_1",
											"typeString": "int_const 518"
										},
										"value": "518"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 337,
									"mutability": "constant",
									"name": "CANNOT_USE_ETH_SENTINEL",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "10492:55:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 335,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "10492:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353139",
										"id": 336,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "10544:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_519_by_1",
											"typeString": "int_const 519"
										},
										"value": "519"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 340,
									"mutability": "constant",
									"name": "TOKENS_MISMATCH",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "10554:47:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 338,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "10554:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353230",
										"id": 339,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "10598:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_520_by_1",
											"typeString": "int_const 520"
										},
										"value": "520"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 343,
									"mutability": "constant",
									"name": "TOKEN_NOT_REGISTERED",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "10608:52:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 341,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "10608:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353231",
										"id": 342,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "10657:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_521_by_1",
											"typeString": "int_const 521"
										},
										"value": "521"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 346,
									"mutability": "constant",
									"name": "TOKEN_ALREADY_REGISTERED",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "10667:56:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 344,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "10667:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353232",
										"id": 345,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "10720:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_522_by_1",
											"typeString": "int_const 522"
										},
										"value": "522"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 349,
									"mutability": "constant",
									"name": "TOKENS_ALREADY_SET",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "10730:50:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 347,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "10730:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353233",
										"id": 348,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "10777:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_523_by_1",
											"typeString": "int_const 523"
										},
										"value": "523"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 352,
									"mutability": "constant",
									"name": "TOKENS_LENGTH_MUST_BE_2",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "10787:55:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 350,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "10787:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353234",
										"id": 351,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "10839:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_524_by_1",
											"typeString": "int_const 524"
										},
										"value": "524"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 355,
									"mutability": "constant",
									"name": "NONZERO_TOKEN_BALANCE",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "10849:53:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 353,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "10849:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353235",
										"id": 354,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "10899:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_525_by_1",
											"typeString": "int_const 525"
										},
										"value": "525"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 358,
									"mutability": "constant",
									"name": "BALANCE_TOTAL_OVERFLOW",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "10909:54:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 356,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "10909:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353236",
										"id": 357,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "10960:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_526_by_1",
											"typeString": "int_const 526"
										},
										"value": "526"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 361,
									"mutability": "constant",
									"name": "POOL_NO_TOKENS",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "10970:46:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 359,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "10970:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353237",
										"id": 360,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "11013:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_527_by_1",
											"typeString": "int_const 527"
										},
										"value": "527"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 364,
									"mutability": "constant",
									"name": "INSUFFICIENT_FLASH_LOAN_BALANCE",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "11023:63:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 362,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "11023:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "353238",
										"id": 363,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "11083:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_528_by_1",
											"typeString": "int_const 528"
										},
										"value": "528"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 367,
									"mutability": "constant",
									"name": "SWAP_FEE_PERCENTAGE_TOO_HIGH",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "11108:60:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 365,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "11108:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "363030",
										"id": 366,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "11165:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_600_by_1",
											"typeString": "int_const 600"
										},
										"value": "600"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 370,
									"mutability": "constant",
									"name": "FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "11175:66:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 368,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "11175:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "363031",
										"id": 369,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "11238:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_601_by_1",
											"typeString": "int_const 601"
										},
										"value": "601"
									},
									"visibility": "internal"
								},
								{
									"constant": true,
									"id": 373,
									"mutability": "constant",
									"name": "INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT",
									"nodeType": "VariableDeclaration",
									"scope": 374,
									"src": "11248:66:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 371,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "11248:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "363032",
										"id": 372,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "11311:3:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_602_by_1",
											"typeString": "int_const 602"
										},
										"value": "602"
									},
									"visibility": "internal"
								}
							],
							"scope": 1556,
							"src": "5315:6003:0"
						},
						{
							"id": 375,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "11322:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 376,
								"nodeType": "StructuredDocumentation",
								"src": "11349:72:0",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 451,
							"linearizedBaseContracts": [
								451
							],
							"name": "IERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 377,
										"nodeType": "StructuredDocumentation",
										"src": "11447:68:0",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 382,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 378,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11541:2:0"
									},
									"returnParameters": {
										"id": 381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 380,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "11567:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 379,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11567:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11566:9:0"
									},
									"scope": 451,
									"src": "11521:55:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 383,
										"nodeType": "StructuredDocumentation",
										"src": "11584:74:0",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 390,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 386,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 385,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 390,
												"src": "11683:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 384,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11683:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11682:17:0"
									},
									"returnParameters": {
										"id": 389,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 390,
												"src": "11723:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 387,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11723:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11722:9:0"
									},
									"scope": 451,
									"src": "11664:68:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 391,
										"nodeType": "StructuredDocumentation",
										"src": "11740:215:0",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 400,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 396,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 393,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 400,
												"src": "11979:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 392,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11979:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 395,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 400,
												"src": "11998:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 394,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11998:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11978:35:0"
									},
									"returnParameters": {
										"id": 399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 398,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 400,
												"src": "12032:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 397,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12032:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12031:6:0"
									},
									"scope": 451,
									"src": "11961:77:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 401,
										"nodeType": "StructuredDocumentation",
										"src": "12046:270:0",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 410,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 406,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 403,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 410,
												"src": "12341:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 402,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12341:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 405,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 410,
												"src": "12356:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 404,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12356:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12340:32:0"
									},
									"returnParameters": {
										"id": 409,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 408,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 410,
												"src": "12396:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 407,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12396:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12395:9:0"
									},
									"scope": 451,
									"src": "12322:83:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 411,
										"nodeType": "StructuredDocumentation",
										"src": "12413:655:0",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 420,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 420,
												"src": "13091:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 412,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13091:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 420,
												"src": "13108:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 414,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13108:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13090:33:0"
									},
									"returnParameters": {
										"id": 419,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 418,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 420,
												"src": "13142:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 417,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "13142:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13141:6:0"
									},
									"scope": 451,
									"src": "13074:74:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 421,
										"nodeType": "StructuredDocumentation",
										"src": "13156:304:0",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 432,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 428,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 432,
												"src": "13498:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 422,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13498:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 432,
												"src": "13523:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 424,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13523:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 432,
												"src": "13551:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 426,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13551:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13487:85:0"
									},
									"returnParameters": {
										"id": 431,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 430,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 432,
												"src": "13591:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 429,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "13591:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13590:6:0"
									},
									"scope": 451,
									"src": "13466:131:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 433,
										"nodeType": "StructuredDocumentation",
										"src": "13605:163:0",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 441,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 435,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "13789:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 434,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13789:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 437,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "13811:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 436,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13811:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 439,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "13831:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 438,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13831:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13788:57:0"
									},
									"src": "13774:72:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 442,
										"nodeType": "StructuredDocumentation",
										"src": "13854:151:0",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 450,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 449,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 444,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "14026:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 443,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14026:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 446,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "14049:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 445,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14049:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 448,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "14074:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 447,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14074:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14025:63:0"
									},
									"src": "14011:78:0"
								}
							],
							"scope": 1556,
							"src": "11423:2669:0"
						},
						{
							"id": 452,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "14096:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 468,
							"linearizedBaseContracts": [
								468
							],
							"name": "IFlashLoanRecipient",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 453,
										"nodeType": "StructuredDocumentation",
										"src": "14160:504:0",
										"text": " @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\n At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\n call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\n Vault, or else the entire flash loan will revert.\n `userData` is the same value passed in the `IVault.flashLoan` call."
									},
									"functionSelector": "f04f2707",
									"id": 467,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "receiveFlashLoan",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 465,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 456,
												"mutability": "mutable",
												"name": "tokens",
												"nodeType": "VariableDeclaration",
												"scope": 467,
												"src": "14706:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_memory_ptr",
													"typeString": "contract IERC20[]"
												},
												"typeName": {
													"baseType": {
														"id": 454,
														"name": "IERC20",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 451,
														"src": "14706:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$451",
															"typeString": "contract IERC20"
														}
													},
													"id": 455,
													"nodeType": "ArrayTypeName",
													"src": "14706:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_storage_ptr",
														"typeString": "contract IERC20[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 459,
												"mutability": "mutable",
												"name": "amounts",
												"nodeType": "VariableDeclaration",
												"scope": 467,
												"src": "14739:24:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 457,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "14739:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 458,
													"nodeType": "ArrayTypeName",
													"src": "14739:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 462,
												"mutability": "mutable",
												"name": "feeAmounts",
												"nodeType": "VariableDeclaration",
												"scope": 467,
												"src": "14774:27:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 460,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "14774:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 461,
													"nodeType": "ArrayTypeName",
													"src": "14774:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 464,
												"mutability": "mutable",
												"name": "userData",
												"nodeType": "VariableDeclaration",
												"scope": 467,
												"src": "14812:21:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 463,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14812:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14695:145:0"
									},
									"returnParameters": {
										"id": 466,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14849:0:0"
									},
									"scope": 468,
									"src": "14670:180:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1556,
							"src": "14123:730:0"
						},
						{
							"id": 469,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "14857:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 471,
										"name": "IERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 451,
										"src": "15110:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$451",
											"typeString": "contract IERC20"
										}
									},
									"id": 472,
									"nodeType": "InheritanceSpecifier",
									"src": "15110:6:0"
								}
							],
							"contractDependencies": [
								451
							],
							"contractKind": "interface",
							"documentation": {
								"id": 470,
								"nodeType": "StructuredDocumentation",
								"src": "14884:205:0",
								"text": " @dev Interface for the WETH token contract used internally for wrapping and unwrapping, to support\n sending and receiving ETH in joins, swaps, and internal balance deposits and withdrawals."
							},
							"fullyImplemented": false,
							"id": 481,
							"linearizedBaseContracts": [
								481,
								451
							],
							"name": "IWETH",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "d0e30db0",
									"id": 475,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 473,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15140:2:0"
									},
									"returnParameters": {
										"id": 474,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15159:0:0"
									},
									"scope": 481,
									"src": "15124:36:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "2e1a7d4d",
									"id": 480,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 478,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 480,
												"src": "15186:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 476,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15186:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15185:16:0"
									},
									"returnParameters": {
										"id": 479,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15210:0:0"
									},
									"scope": 481,
									"src": "15168:43:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1556,
							"src": "15091:123:0"
						},
						{
							"id": 482,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "15218:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 495,
							"linearizedBaseContracts": [
								495
							],
							"name": "IAuthorizer",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 483,
										"nodeType": "StructuredDocumentation",
										"src": "15274:123:0",
										"text": " @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`."
									},
									"functionSelector": "9be2a884",
									"id": 494,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "canPerform",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 485,
												"mutability": "mutable",
												"name": "actionId",
												"nodeType": "VariableDeclaration",
												"scope": 494,
												"src": "15433:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 484,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "15433:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 487,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 494,
												"src": "15460:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 486,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15460:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 489,
												"mutability": "mutable",
												"name": "where",
												"nodeType": "VariableDeclaration",
												"scope": 494,
												"src": "15486:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 488,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15486:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15422:84:0"
									},
									"returnParameters": {
										"id": 493,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 492,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 494,
												"src": "15530:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 491,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15530:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15529:6:0"
									},
									"scope": 495,
									"src": "15403:133:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1556,
							"src": "15245:294:0"
						},
						{
							"id": 496,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "15543:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 497,
								"nodeType": "StructuredDocumentation",
								"src": "15570:465:0",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 587,
							"linearizedBaseContracts": [
								587
							],
							"name": "SafeERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 521,
										"nodeType": "Block",
										"src": "16168:114:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 509,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 499,
																	"src": "16207:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$451",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$451",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 508,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "16199:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 507,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "16199:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 510,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "16199:14:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 513,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 499,
																			"src": "16238:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$451",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 514,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 400,
																		"src": "16238:14:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 515,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "16238:23:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 516,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 501,
																	"src": "16263:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 517,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 503,
																	"src": "16267:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 511,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "16215:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 512,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "16215:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 518,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "16215:58:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 506,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 586,
														"src": "16179:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,bytes memory)"
														}
													},
													"id": 519,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16179:95:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 520,
												"nodeType": "ExpressionStatement",
												"src": "16179:95:0"
											}
										]
									},
									"id": 522,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "16094:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$451",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 498,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 451,
													"src": "16094:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$451",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 501,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "16117:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 500,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16117:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 503,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 522,
												"src": "16138:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 502,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16138:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16083:75:0"
									},
									"returnParameters": {
										"id": 505,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16168:0:0"
									},
									"scope": 587,
									"src": "16062:220:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 549,
										"nodeType": "Block",
										"src": "16423:124:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 536,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 524,
																	"src": "16462:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$451",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$451",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 535,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "16454:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 534,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "16454:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 537,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "16454:14:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 540,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 524,
																			"src": "16493:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$451",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 541,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 432,
																		"src": "16493:18:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 542,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "16493:27:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 543,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 526,
																	"src": "16522:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 544,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 528,
																	"src": "16528:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 545,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 530,
																	"src": "16532:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 538,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "16470:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 539,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "16470:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 546,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "16470:68:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 533,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 586,
														"src": "16434:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,bytes memory)"
														}
													},
													"id": 547,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16434:105:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 548,
												"nodeType": "ExpressionStatement",
												"src": "16434:105:0"
											}
										]
									},
									"id": 550,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 531,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 524,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 550,
												"src": "16326:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$451",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 523,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 451,
													"src": "16326:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$451",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 526,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 550,
												"src": "16349:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 525,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16349:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 528,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 550,
												"src": "16372:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 527,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16372:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 530,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 550,
												"src": "16393:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 529,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16393:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16315:98:0"
									},
									"returnParameters": {
										"id": 532,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16423:0:0"
									},
									"scope": 587,
									"src": "16290:257:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 585,
										"nodeType": "Block",
										"src": "16966:743:0",
										"statements": [
											{
												"assignments": [
													559,
													561
												],
												"declarations": [
													{
														"constant": false,
														"id": 559,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 585,
														"src": "17141:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 558,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "17141:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 561,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 585,
														"src": "17155:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 560,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "17155:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 566,
												"initialValue": {
													"arguments": [
														{
															"id": 564,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 555,
															"src": "17193:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 562,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 553,
															"src": "17182:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 563,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "17182:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 565,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17182:16:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "17140:58:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "17310:161:0",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "17343:117:0",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "17377:1:0",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "17380:1:0",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [],
																					"functionName": {
																						"name": "returndatasize",
																						"nodeType": "YulIdentifier",
																						"src": "17383:14:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "17383:16:0"
																				}
																			],
																			"functionName": {
																				"name": "returndatacopy",
																				"nodeType": "YulIdentifier",
																				"src": "17362:14:0"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17362:38:0"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "17362:38:0"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "17425:1:0",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [],
																					"functionName": {
																						"name": "returndatasize",
																						"nodeType": "YulIdentifier",
																						"src": "17428:14:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "17428:16:0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "17418:6:0"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "17418:27:0"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "17418:27:0"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "success",
																		"nodeType": "YulIdentifier",
																		"src": "17331:7:0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "17340:1:0",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "17328:2:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "17328:14:0"
															},
															"nodeType": "YulIf",
															"src": "17325:2:0"
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 559,
														"isOffset": false,
														"isSlot": false,
														"src": "17331:7:0",
														"valueSize": 1
													}
												],
												"id": 567,
												"nodeType": "InlineAssembly",
												"src": "17301:170:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 580,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 572,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 569,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 561,
																		"src": "17613:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 570,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "17613:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 571,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "17634:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "17613:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 575,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 561,
																		"src": "17650:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"components": [
																			{
																				"id": 577,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "17663:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				},
																				"typeName": {
																					"id": 576,
																					"name": "bool",
																					"nodeType": "ElementaryTypeName",
																					"src": "17663:4:0",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"id": 578,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "17662:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bool_$",
																			"typeString": "type(bool)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_type$_t_bool_$",
																			"typeString": "type(bool)"
																		}
																	],
																	"expression": {
																		"id": 573,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "17639:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 574,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "decode",
																	"nodeType": "MemberAccess",
																	"src": "17639:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 579,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "17639:30:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "17613:56:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"expression": {
																"id": 581,
																"name": "Errors",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 374,
																"src": "17671:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Errors_$374_$",
																	"typeString": "type(library Errors)"
																}
															},
															"id": 582,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "SAFE_ERC20_CALL_FAILED",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 256,
															"src": "17671:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 568,
														"name": "_require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 65,
														"src": "17604:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_uint256_$returns$__$",
															"typeString": "function (bool,uint256) pure"
														}
													},
													"id": 583,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17604:97:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 584,
												"nodeType": "ExpressionStatement",
												"src": "17604:97:0"
											}
										]
									},
									"documentation": {
										"id": 551,
										"nodeType": "StructuredDocumentation",
										"src": "16555:334:0",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert."
									},
									"id": 586,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 556,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 553,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 586,
												"src": "16924:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 552,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16924:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 555,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 586,
												"src": "16939:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 554,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16939:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16923:34:0"
									},
									"returnParameters": {
										"id": 557,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16966:0:0"
									},
									"scope": 587,
									"src": "16895:814:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1556,
							"src": "16037:1675:0"
						},
						{
							"id": 588,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "17716:23:0"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 589,
								"nodeType": "StructuredDocumentation",
								"src": "17743:765:0",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 641,
							"linearizedBaseContracts": [
								641
							],
							"name": "ReentrancyGuard",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 592,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nodeType": "VariableDeclaration",
									"scope": 641,
									"src": "19310:41:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 590,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "19310:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 591,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "19350:1:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 595,
									"mutability": "constant",
									"name": "_ENTERED",
									"nodeType": "VariableDeclaration",
									"scope": 641,
									"src": "19358:37:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 593,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "19358:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 594,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "19394:1:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 597,
									"mutability": "mutable",
									"name": "_status",
									"nodeType": "VariableDeclaration",
									"scope": 641,
									"src": "19404:23:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 596,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "19404:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 604,
										"nodeType": "Block",
										"src": "19450:41:0",
										"statements": [
											{
												"expression": {
													"id": 602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 600,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 597,
														"src": "19461:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 601,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 592,
														"src": "19471:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "19461:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 603,
												"nodeType": "ExpressionStatement",
												"src": "19461:22:0"
											}
										]
									},
									"id": 605,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 598,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "19447:2:0"
									},
									"returnParameters": {
										"id": 599,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "19450:0:0"
									},
									"scope": 641,
									"src": "19436:55:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 615,
										"nodeType": "Block",
										"src": "19899:81:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 608,
														"name": "_enterNonReentrant",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 632,
														"src": "19910:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 609,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19910:20:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 610,
												"nodeType": "ExpressionStatement",
												"src": "19910:20:0"
											},
											{
												"id": 611,
												"nodeType": "PlaceholderStatement",
												"src": "19941:1:0"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 612,
														"name": "_exitNonReentrant",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 640,
														"src": "19953:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 613,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19953:19:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 614,
												"nodeType": "ExpressionStatement",
												"src": "19953:19:0"
											}
										]
									},
									"documentation": {
										"id": 606,
										"nodeType": "StructuredDocumentation",
										"src": "19499:370:0",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and make it call a\n `private` function that does the actual work."
									},
									"id": 616,
									"name": "nonReentrant",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 607,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "19896:2:0"
									},
									"src": "19875:105:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 631,
										"nodeType": "Block",
										"src": "20026:239:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 622,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 620,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 597,
																"src": "20122:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 621,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 595,
																"src": "20133:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "20122:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"expression": {
																"id": 623,
																"name": "Errors",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 374,
																"src": "20143:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Errors_$374_$",
																	"typeString": "type(library Errors)"
																}
															},
															"id": 624,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "REENTRANCY",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 202,
															"src": "20143:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 619,
														"name": "_require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 65,
														"src": "20113:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_uint256_$returns$__$",
															"typeString": "function (bool,uint256) pure"
														}
													},
													"id": 625,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "20113:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 626,
												"nodeType": "ExpressionStatement",
												"src": "20113:48:0"
											},
											{
												"expression": {
													"id": 629,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 627,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 597,
														"src": "20239:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 628,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 595,
														"src": "20249:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "20239:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 630,
												"nodeType": "ExpressionStatement",
												"src": "20239:18:0"
											}
										]
									},
									"id": 632,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_enterNonReentrant",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 617,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "20015:2:0"
									},
									"returnParameters": {
										"id": 618,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "20026:0:0"
									},
									"scope": 641,
									"src": "19988:277:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 639,
										"nodeType": "Block",
										"src": "20310:175:0",
										"statements": [
											{
												"expression": {
													"id": 637,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 635,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 597,
														"src": "20455:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 636,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 592,
														"src": "20465:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "20455:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 638,
												"nodeType": "ExpressionStatement",
												"src": "20455:22:0"
											}
										]
									},
									"id": 640,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_exitNonReentrant",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 633,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "20299:2:0"
									},
									"returnParameters": {
										"id": 634,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "20310:0:0"
									},
									"scope": 641,
									"src": "20273:212:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1556,
							"src": "18510:1978:0"
						},
						{
							"id": 642,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "20492:23:0"
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 644,
										"name": "IAuthentication",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 45,
										"src": "20957:15:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IAuthentication_$45",
											"typeString": "contract IAuthentication"
										}
									},
									"id": 645,
									"nodeType": "InheritanceSpecifier",
									"src": "20957:15:0"
								}
							],
							"contractDependencies": [
								45
							],
							"contractKind": "contract",
							"documentation": {
								"id": 643,
								"nodeType": "StructuredDocumentation",
								"src": "20519:400:0",
								"text": " @dev Building block for performing access control on external functions.\n This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be applied\n to external functions to only make them callable by authorized accounts.\n Derived contracts must implement the `_canPerform` function, which holds the actual access control logic."
							},
							"fullyImplemented": false,
							"id": 715,
							"linearizedBaseContracts": [
								715,
								45
							],
							"name": "Authentication",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 647,
									"mutability": "immutable",
									"name": "_actionIdDisambiguator",
									"nodeType": "VariableDeclaration",
									"scope": 715,
									"src": "20980:48:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 646,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "20980:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 657,
										"nodeType": "Block",
										"src": "21682:65:0",
										"statements": [
											{
												"expression": {
													"id": 655,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 653,
														"name": "_actionIdDisambiguator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 647,
														"src": "21693:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 654,
														"name": "actionIdDisambiguator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 650,
														"src": "21718:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "21693:46:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 656,
												"nodeType": "ExpressionStatement",
												"src": "21693:46:0"
											}
										]
									},
									"documentation": {
										"id": 648,
										"nodeType": "StructuredDocumentation",
										"src": "21037:596:0",
										"text": " @dev The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in\n multi contract systems.\n There are two main uses for it:\n  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers\n    unique. The contract's own address is a good option.\n  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier\n    shared by the entire family (and no other contract) should be used instead."
									},
									"id": 658,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 651,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 650,
												"mutability": "mutable",
												"name": "actionIdDisambiguator",
												"nodeType": "VariableDeclaration",
												"scope": 658,
												"src": "21651:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 649,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "21651:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21650:31:0"
									},
									"returnParameters": {
										"id": 652,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "21682:0:0"
									},
									"scope": 715,
									"src": "21639:108:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 665,
										"nodeType": "Block",
										"src": "21916:52:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 661,
														"name": "_authenticateCaller",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 688,
														"src": "21927:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 662,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "21927:21:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 663,
												"nodeType": "ExpressionStatement",
												"src": "21927:21:0"
											},
											{
												"id": 664,
												"nodeType": "PlaceholderStatement",
												"src": "21959:1:0"
											}
										]
									},
									"documentation": {
										"id": 659,
										"nodeType": "StructuredDocumentation",
										"src": "21755:131:0",
										"text": " @dev Reverts unless the caller is allowed to call this function. Should only be applied to external functions."
									},
									"id": 666,
									"name": "authenticate",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 660,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "21913:2:0"
									},
									"src": "21892:76:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 687,
										"nodeType": "Block",
										"src": "22123:139:0",
										"statements": [
											{
												"assignments": [
													671
												],
												"declarations": [
													{
														"constant": false,
														"id": 671,
														"mutability": "mutable",
														"name": "actionId",
														"nodeType": "VariableDeclaration",
														"scope": 687,
														"src": "22134:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 670,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "22134:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 676,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 673,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "22165:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 674,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sig",
															"nodeType": "MemberAccess",
															"src": "22165:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														],
														"id": 672,
														"name": "getActionId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 705,
														"src": "22153:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bytes32_$",
															"typeString": "function (bytes4) view returns (bytes32)"
														}
													},
													"id": 675,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "22153:20:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "22134:39:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 679,
																	"name": "actionId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 671,
																	"src": "22205:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"expression": {
																		"id": 680,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "22215:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 681,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "22215:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																],
																"id": 678,
																"name": "_canPerform",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 714,
																"src": "22193:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$",
																	"typeString": "function (bytes32,address) view returns (bool)"
																}
															},
															"id": 682,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "22193:33:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"expression": {
																"id": 683,
																"name": "Errors",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 374,
																"src": "22228:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Errors_$374_$",
																	"typeString": "type(library Errors)"
																}
															},
															"id": 684,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "SENDER_NOT_ALLOWED",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 205,
															"src": "22228:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 677,
														"name": "_require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 65,
														"src": "22184:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_uint256_$returns$__$",
															"typeString": "function (bool,uint256) pure"
														}
													},
													"id": 685,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "22184:70:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 686,
												"nodeType": "ExpressionStatement",
												"src": "22184:70:0"
											}
										]
									},
									"documentation": {
										"id": 667,
										"nodeType": "StructuredDocumentation",
										"src": "21976:96:0",
										"text": " @dev Reverts unless the caller is allowed to call the entry point function."
									},
									"id": 688,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_authenticateCaller",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 668,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "22106:2:0"
									},
									"returnParameters": {
										"id": 669,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "22123:0:0"
									},
									"scope": 715,
									"src": "22078:184:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										44
									],
									"body": {
										"id": 704,
										"nodeType": "Block",
										"src": "22347:358:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 699,
																	"name": "_actionIdDisambiguator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 647,
																	"src": "22663:22:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 700,
																	"name": "selector",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 690,
																	"src": "22687:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																],
																"expression": {
																	"id": 697,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "22646:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 698,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "22646:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 701,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "22646:50:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 696,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "22636:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 702,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "22636:61:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 695,
												"id": 703,
												"nodeType": "Return",
												"src": "22629:68:0"
											}
										]
									},
									"functionSelector": "851c1bb3",
									"id": 705,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getActionId",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 692,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "22320:8:0"
									},
									"parameters": {
										"id": 691,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 690,
												"mutability": "mutable",
												"name": "selector",
												"nodeType": "VariableDeclaration",
												"scope": 705,
												"src": "22291:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 689,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "22291:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22290:17:0"
									},
									"returnParameters": {
										"id": 695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 694,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 705,
												"src": "22338:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 693,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "22338:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22337:9:0"
									},
									"scope": 715,
									"src": "22270:435:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"id": 714,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "_canPerform",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 710,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 707,
												"mutability": "mutable",
												"name": "actionId",
												"nodeType": "VariableDeclaration",
												"scope": 714,
												"src": "22734:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 706,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "22734:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 709,
												"mutability": "mutable",
												"name": "user",
												"nodeType": "VariableDeclaration",
												"scope": 714,
												"src": "22752:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 708,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "22752:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22733:32:0"
									},
									"returnParameters": {
										"id": 713,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 712,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 714,
												"src": "22797:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 711,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "22797:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22796:6:0"
									},
									"scope": 715,
									"src": "22713:90:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1556,
							"src": "20921:1885:0"
						},
						{
							"id": 716,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "22810:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 842,
							"linearizedBaseContracts": [
								842
							],
							"name": "InputHelpers",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 731,
										"nodeType": "Block",
										"src": "22933:65:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 726,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 724,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 718,
																"src": "22953:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 725,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 720,
																"src": "22958:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "22953:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"expression": {
																"id": 727,
																"name": "Errors",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 374,
																"src": "22961:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Errors_$374_$",
																	"typeString": "type(library Errors)"
																}
															},
															"id": 728,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "INPUT_LENGTH_MISMATCH",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 115,
															"src": "22961:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 723,
														"name": "_require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 65,
														"src": "22944:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_uint256_$returns$__$",
															"typeString": "function (bool,uint256) pure"
														}
													},
													"id": 729,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "22944:46:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 730,
												"nodeType": "ExpressionStatement",
												"src": "22944:46:0"
											}
										]
									},
									"id": 732,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ensureInputLengthMatch",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 721,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 718,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 732,
												"src": "22897:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 717,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "22897:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 720,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 732,
												"src": "22908:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 719,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "22908:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22896:22:0"
									},
									"returnParameters": {
										"id": 722,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "22933:0:0"
									},
									"scope": 842,
									"src": "22865:133:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 753,
										"nodeType": "Block",
										"src": "23119:75:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 748,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 744,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 742,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 734,
																	"src": "23139:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 743,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 736,
																	"src": "23144:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "23139:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 747,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 745,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 736,
																	"src": "23149:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 746,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 738,
																	"src": "23154:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "23149:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "23139:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"expression": {
																"id": 749,
																"name": "Errors",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 374,
																"src": "23157:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Errors_$374_$",
																	"typeString": "type(library Errors)"
																}
															},
															"id": 750,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "INPUT_LENGTH_MISMATCH",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 115,
															"src": "23157:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 741,
														"name": "_require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 65,
														"src": "23130:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_uint256_$returns$__$",
															"typeString": "function (bool,uint256) pure"
														}
													},
													"id": 751,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "23130:56:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 752,
												"nodeType": "ExpressionStatement",
												"src": "23130:56:0"
											}
										]
									},
									"id": 754,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ensureInputLengthMatch",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 739,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 734,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 754,
												"src": "23048:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 733,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "23048:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 736,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 754,
												"src": "23068:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 735,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "23068:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 738,
												"mutability": "mutable",
												"name": "c",
												"nodeType": "VariableDeclaration",
												"scope": 754,
												"src": "23088:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 737,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "23088:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "23037:67:0"
									},
									"returnParameters": {
										"id": 740,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "23119:0:0"
									},
									"scope": 842,
									"src": "23006:188:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 771,
										"nodeType": "Block",
										"src": "23268:215:0",
										"statements": [
											{
												"assignments": [
													764
												],
												"declarations": [
													{
														"constant": false,
														"id": 764,
														"mutability": "mutable",
														"name": "addressArray",
														"nodeType": "VariableDeclaration",
														"scope": 771,
														"src": "23279:29:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[]"
														},
														"typeName": {
															"baseType": {
																"id": 762,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "23279:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 763,
															"nodeType": "ArrayTypeName",
															"src": "23279:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
																"typeString": "address[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 765,
												"nodeType": "VariableDeclarationStatement",
												"src": "23279:29:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "23385:47:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "23400:21:0",
															"value": {
																"name": "array",
																"nodeType": "YulIdentifier",
																"src": "23416:5:0"
															},
															"variableNames": [
																{
																	"name": "addressArray",
																	"nodeType": "YulIdentifier",
																	"src": "23400:12:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 764,
														"isOffset": false,
														"isSlot": false,
														"src": "23400:12:0",
														"valueSize": 1
													},
													{
														"declaration": 757,
														"isOffset": false,
														"isSlot": false,
														"src": "23416:5:0",
														"valueSize": 1
													}
												],
												"id": 766,
												"nodeType": "InlineAssembly",
												"src": "23376:56:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 768,
															"name": "addressArray",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 764,
															"src": "23462:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														],
														"id": 767,
														"name": "ensureArrayIsSorted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															772,
															790,
															841
														],
														"referencedDeclaration": 841,
														"src": "23442:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_array$_t_address_$dyn_memory_ptr_$returns$__$",
															"typeString": "function (address[] memory) pure"
														}
													},
													"id": 769,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "23442:33:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 770,
												"nodeType": "ExpressionStatement",
												"src": "23442:33:0"
											}
										]
									},
									"id": 772,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ensureArrayIsSorted",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 758,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 757,
												"mutability": "mutable",
												"name": "array",
												"nodeType": "VariableDeclaration",
												"scope": 772,
												"src": "23231:21:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IAsset_$48_$dyn_memory_ptr",
													"typeString": "contract IAsset[]"
												},
												"typeName": {
													"baseType": {
														"id": 755,
														"name": "IAsset",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 48,
														"src": "23231:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IAsset_$48",
															"typeString": "contract IAsset"
														}
													},
													"id": 756,
													"nodeType": "ArrayTypeName",
													"src": "23231:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IAsset_$48_$dyn_storage_ptr",
														"typeString": "contract IAsset[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "23230:23:0"
									},
									"returnParameters": {
										"id": 759,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "23268:0:0"
									},
									"scope": 842,
									"src": "23202:281:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 789,
										"nodeType": "Block",
										"src": "23557:215:0",
										"statements": [
											{
												"assignments": [
													782
												],
												"declarations": [
													{
														"constant": false,
														"id": 782,
														"mutability": "mutable",
														"name": "addressArray",
														"nodeType": "VariableDeclaration",
														"scope": 789,
														"src": "23568:29:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[]"
														},
														"typeName": {
															"baseType": {
																"id": 780,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "23568:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 781,
															"nodeType": "ArrayTypeName",
															"src": "23568:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
																"typeString": "address[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 783,
												"nodeType": "VariableDeclarationStatement",
												"src": "23568:29:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "23674:47:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "23689:21:0",
															"value": {
																"name": "array",
																"nodeType": "YulIdentifier",
																"src": "23705:5:0"
															},
															"variableNames": [
																{
																	"name": "addressArray",
																	"nodeType": "YulIdentifier",
																	"src": "23689:12:0"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 782,
														"isOffset": false,
														"isSlot": false,
														"src": "23689:12:0",
														"valueSize": 1
													},
													{
														"declaration": 775,
														"isOffset": false,
														"isSlot": false,
														"src": "23705:5:0",
														"valueSize": 1
													}
												],
												"id": 784,
												"nodeType": "InlineAssembly",
												"src": "23665:56:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 786,
															"name": "addressArray",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 782,
															"src": "23751:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														],
														"id": 785,
														"name": "ensureArrayIsSorted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															772,
															790,
															841
														],
														"referencedDeclaration": 841,
														"src": "23731:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_array$_t_address_$dyn_memory_ptr_$returns$__$",
															"typeString": "function (address[] memory) pure"
														}
													},
													"id": 787,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "23731:33:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 788,
												"nodeType": "ExpressionStatement",
												"src": "23731:33:0"
											}
										]
									},
									"id": 790,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ensureArrayIsSorted",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 776,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 775,
												"mutability": "mutable",
												"name": "array",
												"nodeType": "VariableDeclaration",
												"scope": 790,
												"src": "23520:21:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_memory_ptr",
													"typeString": "contract IERC20[]"
												},
												"typeName": {
													"baseType": {
														"id": 773,
														"name": "IERC20",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 451,
														"src": "23520:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$451",
															"typeString": "contract IERC20"
														}
													},
													"id": 774,
													"nodeType": "ArrayTypeName",
													"src": "23520:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_storage_ptr",
														"typeString": "contract IERC20[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "23519:23:0"
									},
									"returnParameters": {
										"id": 777,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "23557:0:0"
									},
									"scope": 842,
									"src": "23491:281:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 840,
										"nodeType": "Block",
										"src": "23847:318:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 799,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 796,
															"name": "array",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 793,
															"src": "23862:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														},
														"id": 797,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "23862:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"hexValue": "32",
														"id": 798,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "23877:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "23862:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 802,
												"nodeType": "IfStatement",
												"src": "23858:55:0",
												"trueBody": {
													"id": 801,
													"nodeType": "Block",
													"src": "23880:33:0",
													"statements": [
														{
															"functionReturnParameters": 795,
															"id": 800,
															"nodeType": "Return",
															"src": "23895:7:0"
														}
													]
												}
											},
											{
												"assignments": [
													804
												],
												"declarations": [
													{
														"constant": false,
														"id": 804,
														"mutability": "mutable",
														"name": "previous",
														"nodeType": "VariableDeclaration",
														"scope": 840,
														"src": "23925:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 803,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "23925:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 808,
												"initialValue": {
													"baseExpression": {
														"id": 805,
														"name": "array",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 793,
														"src": "23944:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[] memory"
														}
													},
													"id": 807,
													"indexExpression": {
														"hexValue": "30",
														"id": 806,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "23950:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "23944:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "23925:27:0"
											},
											{
												"body": {
													"id": 838,
													"nodeType": "Block",
													"src": "24006:152:0",
													"statements": [
														{
															"assignments": [
																821
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 821,
																	"mutability": "mutable",
																	"name": "current",
																	"nodeType": "VariableDeclaration",
																	"scope": 838,
																	"src": "24021:15:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 820,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "24021:7:0",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 825,
															"initialValue": {
																"baseExpression": {
																	"id": 822,
																	"name": "array",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 793,
																	"src": "24039:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																		"typeString": "address[] memory"
																	}
																},
																"id": 824,
																"indexExpression": {
																	"id": 823,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 810,
																	"src": "24045:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "24039:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "24021:26:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 829,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 827,
																			"name": "previous",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 804,
																			"src": "24071:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"id": 828,
																			"name": "current",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 821,
																			"src": "24082:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "24071:18:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"expression": {
																			"id": 830,
																			"name": "Errors",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 374,
																			"src": "24091:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Errors_$374_$",
																				"typeString": "type(library Errors)"
																			}
																		},
																		"id": 831,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "UNSORTED_ARRAY",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 109,
																		"src": "24091:21:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 826,
																	"name": "_require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 65,
																	"src": "24062:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_uint256_$returns$__$",
																		"typeString": "function (bool,uint256) pure"
																	}
																},
																"id": 832,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "24062:51:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 833,
															"nodeType": "ExpressionStatement",
															"src": "24062:51:0"
														},
														{
															"expression": {
																"id": 836,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 834,
																	"name": "previous",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 804,
																	"src": "24128:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 835,
																	"name": "current",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 821,
																	"src": "24139:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "24128:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 837,
															"nodeType": "ExpressionStatement",
															"src": "24128:18:0"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 816,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 813,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 810,
														"src": "23983:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 814,
															"name": "array",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 793,
															"src": "23987:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														},
														"id": 815,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "23987:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "23983:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 839,
												"initializationExpression": {
													"assignments": [
														810
													],
													"declarations": [
														{
															"constant": false,
															"id": 810,
															"mutability": "mutable",
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 839,
															"src": "23968:9:0",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 809,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "23968:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 812,
													"initialValue": {
														"hexValue": "31",
														"id": 811,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "23980:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "23968:13:0"
												},
												"loopExpression": {
													"expression": {
														"id": 818,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "24001:3:0",
														"subExpression": {
															"id": 817,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 810,
															"src": "24003:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 819,
													"nodeType": "ExpressionStatement",
													"src": "24001:3:0"
												},
												"nodeType": "ForStatement",
												"src": "23963:195:0"
											}
										]
									},
									"id": 841,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ensureArrayIsSorted",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 794,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 793,
												"mutability": "mutable",
												"name": "array",
												"nodeType": "VariableDeclaration",
												"scope": 841,
												"src": "23809:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 791,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "23809:7:0",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 792,
													"nodeType": "ArrayTypeName",
													"src": "23809:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "23808:24:0"
									},
									"returnParameters": {
										"id": 795,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "23847:0:0"
									},
									"scope": 842,
									"src": "23780:385:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1556,
							"src": "22837:1331:0"
						},
						{
							"id": 843,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "24172:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 845,
										"name": "ISignaturesValidator",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 35,
										"src": "24395:20:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ISignaturesValidator_$35",
											"typeString": "contract ISignaturesValidator"
										}
									},
									"id": 846,
									"nodeType": "InheritanceSpecifier",
									"src": "24395:20:0"
								},
								{
									"baseName": {
										"id": 847,
										"name": "ITemporarilyPausable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 18,
										"src": "24417:20:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ITemporarilyPausable_$18",
											"typeString": "contract ITemporarilyPausable"
										}
									},
									"id": 848,
									"nodeType": "InheritanceSpecifier",
									"src": "24417:20:0"
								}
							],
							"contractDependencies": [
								18,
								35
							],
							"contractKind": "interface",
							"documentation": {
								"id": 844,
								"nodeType": "StructuredDocumentation",
								"src": "24199:174:0",
								"text": " @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\n don't override one of these declarations."
							},
							"fullyImplemented": false,
							"id": 1294,
							"linearizedBaseContracts": [
								1294,
								18,
								35
							],
							"name": "IVault",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 849,
										"nodeType": "StructuredDocumentation",
										"src": "25957:57:0",
										"text": " @dev Returns the Vault's Authorizer."
									},
									"functionSelector": "aaabadc5",
									"id": 854,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAuthorizer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 850,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "26042:2:0"
									},
									"returnParameters": {
										"id": 853,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 852,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "26068:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IAuthorizer_$495",
													"typeString": "contract IAuthorizer"
												},
												"typeName": {
													"id": 851,
													"name": "IAuthorizer",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 495,
													"src": "26068:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAuthorizer_$495",
														"typeString": "contract IAuthorizer"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "26067:13:0"
									},
									"scope": 1294,
									"src": "26020:61:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 855,
										"nodeType": "StructuredDocumentation",
										"src": "26089:179:0",
										"text": " @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\n Emits an `AuthorizerChanged` event."
									},
									"functionSelector": "058a628f",
									"id": 860,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setAuthorizer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 858,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 857,
												"mutability": "mutable",
												"name": "newAuthorizer",
												"nodeType": "VariableDeclaration",
												"scope": 860,
												"src": "26297:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IAuthorizer_$495",
													"typeString": "contract IAuthorizer"
												},
												"typeName": {
													"id": 856,
													"name": "IAuthorizer",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 495,
													"src": "26297:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAuthorizer_$495",
														"typeString": "contract IAuthorizer"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "26296:27:0"
									},
									"returnParameters": {
										"id": 859,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "26332:0:0"
									},
									"scope": 1294,
									"src": "26274:59:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 861,
										"nodeType": "StructuredDocumentation",
										"src": "26341:82:0",
										"text": " @dev Emitted when a new authorizer is set by `setAuthorizer`."
									},
									"id": 865,
									"name": "AuthorizerChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 864,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 863,
												"indexed": true,
												"mutability": "mutable",
												"name": "newAuthorizer",
												"nodeType": "VariableDeclaration",
												"scope": 865,
												"src": "26453:33:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IAuthorizer_$495",
													"typeString": "contract IAuthorizer"
												},
												"typeName": {
													"id": 862,
													"name": "IAuthorizer",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 495,
													"src": "26453:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAuthorizer_$495",
														"typeString": "contract IAuthorizer"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "26452:35:0"
									},
									"src": "26429:59:0"
								},
								{
									"documentation": {
										"id": 866,
										"nodeType": "StructuredDocumentation",
										"src": "27600:101:0",
										"text": " @dev Returns true if `user` has approved `relayer` to act as a relayer for them."
									},
									"functionSelector": "fec90d72",
									"id": 875,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "hasApprovedRelayer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 871,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 868,
												"mutability": "mutable",
												"name": "user",
												"nodeType": "VariableDeclaration",
												"scope": 875,
												"src": "27735:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 867,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "27735:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 870,
												"mutability": "mutable",
												"name": "relayer",
												"nodeType": "VariableDeclaration",
												"scope": 875,
												"src": "27749:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 869,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "27749:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "27734:31:0"
									},
									"returnParameters": {
										"id": 874,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 873,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 875,
												"src": "27789:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 872,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "27789:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "27788:6:0"
									},
									"scope": 1294,
									"src": "27707:88:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 876,
										"nodeType": "StructuredDocumentation",
										"src": "27803:182:0",
										"text": " @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\n Emits a `RelayerApprovalChanged` event."
									},
									"functionSelector": "fa6e671d",
									"id": 885,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setRelayerApproval",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 883,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 878,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 885,
												"src": "28029:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 877,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "28029:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 880,
												"mutability": "mutable",
												"name": "relayer",
												"nodeType": "VariableDeclaration",
												"scope": 885,
												"src": "28054:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 879,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "28054:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 882,
												"mutability": "mutable",
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 885,
												"src": "28080:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 881,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "28080:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "28018:82:0"
									},
									"returnParameters": {
										"id": 884,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "28109:0:0"
									},
									"scope": 1294,
									"src": "27991:119:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 886,
										"nodeType": "StructuredDocumentation",
										"src": "28118:106:0",
										"text": " @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`."
									},
									"id": 894,
									"name": "RelayerApprovalChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 893,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 888,
												"indexed": true,
												"mutability": "mutable",
												"name": "relayer",
												"nodeType": "VariableDeclaration",
												"scope": 894,
												"src": "28259:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 887,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "28259:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 890,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 894,
												"src": "28284:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 889,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "28284:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 892,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nodeType": "VariableDeclaration",
												"scope": 894,
												"src": "28308:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 891,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "28308:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "28258:64:0"
									},
									"src": "28230:93:0"
								},
								{
									"documentation": {
										"id": 895,
										"nodeType": "StructuredDocumentation",
										"src": "29043:80:0",
										"text": " @dev Returns `user`'s Internal Balance for a set of tokens."
									},
									"functionSelector": "0f5a6efa",
									"id": 906,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getInternalBalance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 901,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 897,
												"mutability": "mutable",
												"name": "user",
												"nodeType": "VariableDeclaration",
												"scope": 906,
												"src": "29157:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 896,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "29157:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 900,
												"mutability": "mutable",
												"name": "tokens",
												"nodeType": "VariableDeclaration",
												"scope": 906,
												"src": "29171:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_memory_ptr",
													"typeString": "contract IERC20[]"
												},
												"typeName": {
													"baseType": {
														"id": 898,
														"name": "IERC20",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 451,
														"src": "29171:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$451",
															"typeString": "contract IERC20"
														}
													},
													"id": 899,
													"nodeType": "ArrayTypeName",
													"src": "29171:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_storage_ptr",
														"typeString": "contract IERC20[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "29156:38:0"
									},
									"returnParameters": {
										"id": 905,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 904,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 906,
												"src": "29218:16:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 902,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "29218:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 903,
													"nodeType": "ArrayTypeName",
													"src": "29218:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "29217:18:0"
									},
									"scope": 1294,
									"src": "29129:107:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 907,
										"nodeType": "StructuredDocumentation",
										"src": "29244:422:0",
										"text": " @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\n and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\n it lets integrators reuse a user's Vault allowance.\n For each operation, if the caller is not `sender`, it must be an authorized relayer for them."
									},
									"functionSelector": "0e8e3e84",
									"id": 913,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "manageUserBalance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 911,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 910,
												"mutability": "mutable",
												"name": "ops",
												"nodeType": "VariableDeclaration",
												"scope": 913,
												"src": "29699:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_UserBalanceOp_$924_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct IVault.UserBalanceOp[]"
												},
												"typeName": {
													"baseType": {
														"id": 908,
														"name": "UserBalanceOp",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 924,
														"src": "29699:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_UserBalanceOp_$924_storage_ptr",
															"typeString": "struct IVault.UserBalanceOp"
														}
													},
													"id": 909,
													"nodeType": "ArrayTypeName",
													"src": "29699:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_UserBalanceOp_$924_storage_$dyn_storage_ptr",
														"typeString": "struct IVault.UserBalanceOp[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "29698:28:0"
									},
									"returnParameters": {
										"id": 912,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "29743:0:0"
									},
									"scope": 1294,
									"src": "29672:72:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "IVault.UserBalanceOp",
									"id": 924,
									"members": [
										{
											"constant": false,
											"id": 915,
											"mutability": "mutable",
											"name": "kind",
											"nodeType": "VariableDeclaration",
											"scope": 924,
											"src": "29968:22:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_enum$_UserBalanceOpKind_$929",
												"typeString": "enum IVault.UserBalanceOpKind"
											},
											"typeName": {
												"id": 914,
												"name": "UserBalanceOpKind",
												"nodeType": "UserDefinedTypeName",
												"referencedDeclaration": 929,
												"src": "29968:17:0",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_UserBalanceOpKind_$929",
													"typeString": "enum IVault.UserBalanceOpKind"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 917,
											"mutability": "mutable",
											"name": "asset",
											"nodeType": "VariableDeclaration",
											"scope": 924,
											"src": "30001:12:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_IAsset_$48",
												"typeString": "contract IAsset"
											},
											"typeName": {
												"id": 916,
												"name": "IAsset",
												"nodeType": "UserDefinedTypeName",
												"referencedDeclaration": 48,
												"src": "30001:6:0",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IAsset_$48",
													"typeString": "contract IAsset"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 919,
											"mutability": "mutable",
											"name": "amount",
											"nodeType": "VariableDeclaration",
											"scope": 924,
											"src": "30024:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 918,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "30024:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 921,
											"mutability": "mutable",
											"name": "sender",
											"nodeType": "VariableDeclaration",
											"scope": 924,
											"src": "30049:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 920,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "30049:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 923,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 924,
											"src": "30074:25:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address_payable",
												"typeString": "address payable"
											},
											"typeName": {
												"id": 922,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "30074:15:0",
												"stateMutability": "payable",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "UserBalanceOp",
									"nodeType": "StructDefinition",
									"scope": 1294,
									"src": "29936:171:0",
									"visibility": "public"
								},
								{
									"canonicalName": "IVault.UserBalanceOpKind",
									"id": 929,
									"members": [
										{
											"id": 925,
											"name": "DEPOSIT_INTERNAL",
											"nodeType": "EnumValue",
											"src": "31785:16:0"
										},
										{
											"id": 926,
											"name": "WITHDRAW_INTERNAL",
											"nodeType": "EnumValue",
											"src": "31803:17:0"
										},
										{
											"id": 927,
											"name": "TRANSFER_INTERNAL",
											"nodeType": "EnumValue",
											"src": "31822:17:0"
										},
										{
											"id": 928,
											"name": "TRANSFER_EXTERNAL",
											"nodeType": "EnumValue",
											"src": "31841:17:0"
										}
									],
									"name": "UserBalanceOpKind",
									"nodeType": "EnumDefinition",
									"src": "31760:100:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 930,
										"nodeType": "StructuredDocumentation",
										"src": "31868:323:0",
										"text": " @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\n interacting with Pools using Internal Balance.\n Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\n address."
									},
									"id": 938,
									"name": "InternalBalanceChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 937,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 932,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "32226:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 931,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "32226:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 934,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "32248:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$451",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 933,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 451,
													"src": "32248:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$451",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 936,
												"indexed": false,
												"mutability": "mutable",
												"name": "delta",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "32270:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 935,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "32270:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "32225:58:0"
									},
									"src": "32197:87:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 939,
										"nodeType": "StructuredDocumentation",
										"src": "32292:133:0",
										"text": " @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account."
									},
									"id": 949,
									"name": "ExternalBalanceTransfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 948,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 941,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 949,
												"src": "32461:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$451",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 940,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 451,
													"src": "32461:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$451",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 943,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 949,
												"src": "32483:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 942,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "32483:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 945,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 949,
												"src": "32507:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 944,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "32507:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 947,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 949,
												"src": "32526:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 946,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "32526:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "32460:81:0"
									},
									"src": "32431:111:0"
								},
								{
									"canonicalName": "IVault.PoolSpecialization",
									"id": 953,
									"members": [
										{
											"id": 950,
											"name": "GENERAL",
											"nodeType": "EnumValue",
											"src": "33667:7:0"
										},
										{
											"id": 951,
											"name": "MINIMAL_SWAP_INFO",
											"nodeType": "EnumValue",
											"src": "33676:17:0"
										},
										{
											"id": 952,
											"name": "TWO_TOKEN",
											"nodeType": "EnumValue",
											"src": "33695:9:0"
										}
									],
									"name": "PoolSpecialization",
									"nodeType": "EnumDefinition",
									"src": "33641:65:0"
								},
								{
									"documentation": {
										"id": 954,
										"nodeType": "StructuredDocumentation",
										"src": "33714:714:0",
										"text": " @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\n is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\n changed.\n The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\n depending on the chosen specialization setting. This contract is known as the Pool's contract.\n Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\n multiple Pools may share the same contract.\n Emits a `PoolRegistered` event."
									},
									"functionSelector": "09b2760f",
									"id": 961,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 957,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 956,
												"mutability": "mutable",
												"name": "specialization",
												"nodeType": "VariableDeclaration",
												"scope": 961,
												"src": "34456:33:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_PoolSpecialization_$953",
													"typeString": "enum IVault.PoolSpecialization"
												},
												"typeName": {
													"id": 955,
													"name": "PoolSpecialization",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 953,
													"src": "34456:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_PoolSpecialization_$953",
														"typeString": "enum IVault.PoolSpecialization"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "34455:35:0"
									},
									"returnParameters": {
										"id": 960,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 959,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 961,
												"src": "34509:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 958,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "34509:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "34508:9:0"
									},
									"scope": 1294,
									"src": "34434:84:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 962,
										"nodeType": "StructuredDocumentation",
										"src": "34526:86:0",
										"text": " @dev Emitted when a Pool is registered by calling `registerPool`."
									},
									"id": 970,
									"name": "PoolRegistered",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 969,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 964,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolId",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "34639:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 963,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "34639:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 966,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolAddress",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "34663:27:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 965,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "34663:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 968,
												"indexed": false,
												"mutability": "mutable",
												"name": "specialization",
												"nodeType": "VariableDeclaration",
												"scope": 970,
												"src": "34692:33:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_PoolSpecialization_$953",
													"typeString": "enum IVault.PoolSpecialization"
												},
												"typeName": {
													"id": 967,
													"name": "PoolSpecialization",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 953,
													"src": "34692:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_PoolSpecialization_$953",
														"typeString": "enum IVault.PoolSpecialization"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "34638:88:0"
									},
									"src": "34618:109:0"
								},
								{
									"documentation": {
										"id": 971,
										"nodeType": "StructuredDocumentation",
										"src": "34735:87:0",
										"text": " @dev Returns a Pool's contract address and specialization setting."
									},
									"functionSelector": "f6c00927",
									"id": 980,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 974,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 973,
												"mutability": "mutable",
												"name": "poolId",
												"nodeType": "VariableDeclaration",
												"scope": 980,
												"src": "34845:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 972,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "34845:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "34844:16:0"
									},
									"returnParameters": {
										"id": 979,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 976,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 980,
												"src": "34884:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 975,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "34884:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 978,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 980,
												"src": "34893:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_PoolSpecialization_$953",
													"typeString": "enum IVault.PoolSpecialization"
												},
												"typeName": {
													"id": 977,
													"name": "PoolSpecialization",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 953,
													"src": "34893:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_PoolSpecialization_$953",
														"typeString": "enum IVault.PoolSpecialization"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "34883:29:0"
									},
									"scope": 1294,
									"src": "34828:85:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 981,
										"nodeType": "StructuredDocumentation",
										"src": "34921:1443:0",
										"text": " @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\n exit by receiving registered tokens, and can only swap registered tokens.\n Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\n of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\n ascending order.\n The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\n Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\n depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\n expected to be highly secured smart contracts with sound design principles, and the decision to register an\n Asset Manager should not be made lightly.\n Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\n Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\n different Asset Manager.\n Emits a `TokensRegistered` event."
									},
									"functionSelector": "66a9c7d2",
									"id": 992,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerTokens",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 990,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 983,
												"mutability": "mutable",
												"name": "poolId",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "36404:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 982,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "36404:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 986,
												"mutability": "mutable",
												"name": "tokens",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "36429:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_memory_ptr",
													"typeString": "contract IERC20[]"
												},
												"typeName": {
													"baseType": {
														"id": 984,
														"name": "IERC20",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 451,
														"src": "36429:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$451",
															"typeString": "contract IERC20"
														}
													},
													"id": 985,
													"nodeType": "ArrayTypeName",
													"src": "36429:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_storage_ptr",
														"typeString": "contract IERC20[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 989,
												"mutability": "mutable",
												"name": "assetManagers",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "36462:30:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 987,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "36462:7:0",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 988,
													"nodeType": "ArrayTypeName",
													"src": "36462:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "36393:106:0"
									},
									"returnParameters": {
										"id": 991,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "36508:0:0"
									},
									"scope": 1294,
									"src": "36370:139:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 993,
										"nodeType": "StructuredDocumentation",
										"src": "36517:91:0",
										"text": " @dev Emitted when a Pool registers tokens by calling `registerTokens`."
									},
									"id": 1003,
									"name": "TokensRegistered",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1002,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 995,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolId",
												"nodeType": "VariableDeclaration",
												"scope": 1003,
												"src": "36637:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 994,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "36637:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 998,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokens",
												"nodeType": "VariableDeclaration",
												"scope": 1003,
												"src": "36661:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_memory_ptr",
													"typeString": "contract IERC20[]"
												},
												"typeName": {
													"baseType": {
														"id": 996,
														"name": "IERC20",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 451,
														"src": "36661:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$451",
															"typeString": "contract IERC20"
														}
													},
													"id": 997,
													"nodeType": "ArrayTypeName",
													"src": "36661:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_storage_ptr",
														"typeString": "contract IERC20[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1001,
												"indexed": false,
												"mutability": "mutable",
												"name": "assetManagers",
												"nodeType": "VariableDeclaration",
												"scope": 1003,
												"src": "36678:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 999,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "36678:7:0",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1000,
													"nodeType": "ArrayTypeName",
													"src": "36678:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "36636:66:0"
									},
									"src": "36614:89:0"
								},
								{
									"documentation": {
										"id": 1004,
										"nodeType": "StructuredDocumentation",
										"src": "36711:577:0",
										"text": " @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\n balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\n must be deregistered in the same `deregisterTokens` call.\n A deregistered token can be re-registered later on, possibly with a different Asset Manager.\n Emits a `TokensDeregistered` event."
									},
									"functionSelector": "7d3aeb96",
									"id": 1012,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deregisterTokens",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1010,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1006,
												"mutability": "mutable",
												"name": "poolId",
												"nodeType": "VariableDeclaration",
												"scope": 1012,
												"src": "37320:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1005,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "37320:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1009,
												"mutability": "mutable",
												"name": "tokens",
												"nodeType": "VariableDeclaration",
												"scope": 1012,
												"src": "37336:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_memory_ptr",
													"typeString": "contract IERC20[]"
												},
												"typeName": {
													"baseType": {
														"id": 1007,
														"name": "IERC20",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 451,
														"src": "37336:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$451",
															"typeString": "contract IERC20"
														}
													},
													"id": 1008,
													"nodeType": "ArrayTypeName",
													"src": "37336:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_storage_ptr",
														"typeString": "contract IERC20[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "37319:40:0"
									},
									"returnParameters": {
										"id": 1011,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "37368:0:0"
									},
									"scope": 1294,
									"src": "37294:75:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1013,
										"nodeType": "StructuredDocumentation",
										"src": "37377:95:0",
										"text": " @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`."
									},
									"id": 1020,
									"name": "TokensDeregistered",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1019,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1015,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolId",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "37503:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1014,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "37503:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1018,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokens",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "37527:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_memory_ptr",
													"typeString": "contract IERC20[]"
												},
												"typeName": {
													"baseType": {
														"id": 1016,
														"name": "IERC20",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 451,
														"src": "37527:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$451",
															"typeString": "contract IERC20"
														}
													},
													"id": 1017,
													"nodeType": "ArrayTypeName",
													"src": "37527:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_storage_ptr",
														"typeString": "contract IERC20[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "37502:41:0"
									},
									"src": "37478:66:0"
								},
								{
									"documentation": {
										"id": 1021,
										"nodeType": "StructuredDocumentation",
										"src": "37552:1059:0",
										"text": " @dev Returns detailed information for a Pool's registered token.\n `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\n withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\n equals the sum of `cash` and `managed`.\n Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\n `managed` or `total` balance to be greater than 2^112 - 1.\n `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\n join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\n example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\n change for this purpose, and will update `lastChangeBlock`.\n `assetManager` is the Pool's token Asset Manager."
									},
									"functionSelector": "b05f8e48",
									"id": 1036,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolTokenInfo",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1026,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1023,
												"mutability": "mutable",
												"name": "poolId",
												"nodeType": "VariableDeclaration",
												"scope": 1036,
												"src": "38643:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1022,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "38643:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1025,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 1036,
												"src": "38659:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$451",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1024,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 451,
													"src": "38659:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$451",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "38642:30:0"
									},
									"returnParameters": {
										"id": 1035,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1028,
												"mutability": "mutable",
												"name": "cash",
												"nodeType": "VariableDeclaration",
												"scope": 1036,
												"src": "38737:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1027,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "38737:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1030,
												"mutability": "mutable",
												"name": "managed",
												"nodeType": "VariableDeclaration",
												"scope": 1036,
												"src": "38764:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1029,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "38764:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1032,
												"mutability": "mutable",
												"name": "lastChangeBlock",
												"nodeType": "VariableDeclaration",
												"scope": 1036,
												"src": "38794:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1031,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "38794:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1034,
												"mutability": "mutable",
												"name": "assetManager",
												"nodeType": "VariableDeclaration",
												"scope": 1036,
												"src": "38832:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1033,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "38832:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "38722:141:0"
									},
									"scope": 1294,
									"src": "38617:247:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1037,
										"nodeType": "StructuredDocumentation",
										"src": "38872:841:0",
										"text": " @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\n the tokens' `balances` changed.\n The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\n Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\n If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\n order as passed to `registerTokens`.\n Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\n the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\n instead."
									},
									"functionSelector": "f94d4668",
									"id": 1050,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolTokens",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1040,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1039,
												"mutability": "mutable",
												"name": "poolId",
												"nodeType": "VariableDeclaration",
												"scope": 1050,
												"src": "39742:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1038,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "39742:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "39741:16:0"
									},
									"returnParameters": {
										"id": 1049,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1043,
												"mutability": "mutable",
												"name": "tokens",
												"nodeType": "VariableDeclaration",
												"scope": 1050,
												"src": "39822:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_memory_ptr",
													"typeString": "contract IERC20[]"
												},
												"typeName": {
													"baseType": {
														"id": 1041,
														"name": "IERC20",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 451,
														"src": "39822:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$451",
															"typeString": "contract IERC20"
														}
													},
													"id": 1042,
													"nodeType": "ArrayTypeName",
													"src": "39822:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_storage_ptr",
														"typeString": "contract IERC20[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1046,
												"mutability": "mutable",
												"name": "balances",
												"nodeType": "VariableDeclaration",
												"scope": 1050,
												"src": "39859:25:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1044,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "39859:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1045,
													"nodeType": "ArrayTypeName",
													"src": "39859:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1048,
												"mutability": "mutable",
												"name": "lastChangeBlock",
												"nodeType": "VariableDeclaration",
												"scope": 1050,
												"src": "39899:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1047,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "39899:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "39807:126:0"
									},
									"scope": 1294,
									"src": "39719:215:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1051,
										"nodeType": "StructuredDocumentation",
										"src": "39942:2335:0",
										"text": " @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\n trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\n Pool shares.\n If the caller is not `sender`, it must be an authorized relayer for them.\n The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\n to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\n these maximums.\n If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\n this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\n WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\n back to the caller (not the sender, which is important for relayers).\n `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\n sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\n `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\n If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\n be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\n withdrawn from Internal Balance: attempting to do so will trigger a revert.\n This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\n their own custom logic. This typically requires additional information from the user (such as the expected number\n of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\n directly to the Pool's contract, as is `recipient`.\n Emits a `PoolBalanceChanged` event."
									},
									"functionSelector": "b95cac28",
									"id": 1062,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "joinPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1060,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1053,
												"mutability": "mutable",
												"name": "poolId",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "42311:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1052,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "42311:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1055,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "42336:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1054,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "42336:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1057,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "42361:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1056,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "42361:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1059,
												"mutability": "mutable",
												"name": "request",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "42389:30:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_JoinPoolRequest_$1073_memory_ptr",
													"typeString": "struct IVault.JoinPoolRequest"
												},
												"typeName": {
													"id": 1058,
													"name": "JoinPoolRequest",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1073,
													"src": "42389:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_JoinPoolRequest_$1073_storage_ptr",
														"typeString": "struct IVault.JoinPoolRequest"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "42300:126:0"
									},
									"returnParameters": {
										"id": 1061,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "42443:0:0"
									},
									"scope": 1294,
									"src": "42283:161:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "IVault.JoinPoolRequest",
									"id": 1073,
									"members": [
										{
											"constant": false,
											"id": 1065,
											"mutability": "mutable",
											"name": "assets",
											"nodeType": "VariableDeclaration",
											"scope": 1073,
											"src": "42486:15:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_contract$_IAsset_$48_$dyn_storage_ptr",
												"typeString": "contract IAsset[]"
											},
											"typeName": {
												"baseType": {
													"id": 1063,
													"name": "IAsset",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 48,
													"src": "42486:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAsset_$48",
														"typeString": "contract IAsset"
													}
												},
												"id": 1064,
												"nodeType": "ArrayTypeName",
												"src": "42486:8:0",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IAsset_$48_$dyn_storage_ptr",
													"typeString": "contract IAsset[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1068,
											"mutability": "mutable",
											"name": "maxAmountsIn",
											"nodeType": "VariableDeclaration",
											"scope": 1073,
											"src": "42512:22:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
												"typeString": "uint256[]"
											},
											"typeName": {
												"baseType": {
													"id": 1066,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "42512:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1067,
												"nodeType": "ArrayTypeName",
												"src": "42512:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
													"typeString": "uint256[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1070,
											"mutability": "mutable",
											"name": "userData",
											"nodeType": "VariableDeclaration",
											"scope": 1073,
											"src": "42545:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1069,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "42545:5:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1072,
											"mutability": "mutable",
											"name": "fromInternalBalance",
											"nodeType": "VariableDeclaration",
											"scope": 1073,
											"src": "42570:24:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1071,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "42570:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "JoinPoolRequest",
									"nodeType": "StructDefinition",
									"scope": 1294,
									"src": "42452:150:0",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1074,
										"nodeType": "StructuredDocumentation",
										"src": "42610:2523:0",
										"text": " @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\n trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\n Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\n `getPoolTokenInfo`).\n If the caller is not `sender`, it must be an authorized relayer for them.\n The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\n token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\n it just enforces these minimums.\n If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\n enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\n of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\n `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\n be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\n final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\n If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\n an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\n do so will trigger a revert.\n `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\n `tokens` array. This array must match the Pool's registered tokens.\n This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\n their own custom logic. This typically requires additional information from the user (such as the expected number\n of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\n passed directly to the Pool's contract.\n Emits a `PoolBalanceChanged` event."
									},
									"functionSelector": "8bdb3913",
									"id": 1085,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "exitPool",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1083,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1076,
												"mutability": "mutable",
												"name": "poolId",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "45167:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1075,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "45167:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1078,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "45192:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1077,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "45192:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1080,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "45217:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1079,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "45217:15:0",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1082,
												"mutability": "mutable",
												"name": "request",
												"nodeType": "VariableDeclaration",
												"scope": 1085,
												"src": "45253:30:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExitPoolRequest_$1096_memory_ptr",
													"typeString": "struct IVault.ExitPoolRequest"
												},
												"typeName": {
													"id": 1081,
													"name": "ExitPoolRequest",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1096,
													"src": "45253:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExitPoolRequest_$1096_storage_ptr",
														"typeString": "struct IVault.ExitPoolRequest"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "45156:134:0"
									},
									"returnParameters": {
										"id": 1084,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "45299:0:0"
									},
									"scope": 1294,
									"src": "45139:161:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "IVault.ExitPoolRequest",
									"id": 1096,
									"members": [
										{
											"constant": false,
											"id": 1088,
											"mutability": "mutable",
											"name": "assets",
											"nodeType": "VariableDeclaration",
											"scope": 1096,
											"src": "45342:15:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_contract$_IAsset_$48_$dyn_storage_ptr",
												"typeString": "contract IAsset[]"
											},
											"typeName": {
												"baseType": {
													"id": 1086,
													"name": "IAsset",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 48,
													"src": "45342:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAsset_$48",
														"typeString": "contract IAsset"
													}
												},
												"id": 1087,
												"nodeType": "ArrayTypeName",
												"src": "45342:8:0",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IAsset_$48_$dyn_storage_ptr",
													"typeString": "contract IAsset[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1091,
											"mutability": "mutable",
											"name": "minAmountsOut",
											"nodeType": "VariableDeclaration",
											"scope": 1096,
											"src": "45368:23:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
												"typeString": "uint256[]"
											},
											"typeName": {
												"baseType": {
													"id": 1089,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "45368:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1090,
												"nodeType": "ArrayTypeName",
												"src": "45368:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
													"typeString": "uint256[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1093,
											"mutability": "mutable",
											"name": "userData",
											"nodeType": "VariableDeclaration",
											"scope": 1096,
											"src": "45402:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1092,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "45402:5:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1095,
											"mutability": "mutable",
											"name": "toInternalBalance",
											"nodeType": "VariableDeclaration",
											"scope": 1096,
											"src": "45427:22:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1094,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "45427:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExitPoolRequest",
									"nodeType": "StructDefinition",
									"scope": 1294,
									"src": "45308:149:0",
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1097,
										"nodeType": "StructuredDocumentation",
										"src": "45465:118:0",
										"text": " @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively."
									},
									"id": 1112,
									"name": "PoolBalanceChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1099,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolId",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "45624:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1098,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "45624:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1101,
												"indexed": true,
												"mutability": "mutable",
												"name": "liquidityProvider",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "45657:33:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "45657:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1104,
												"indexed": false,
												"mutability": "mutable",
												"name": "tokens",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "45701:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_memory_ptr",
													"typeString": "contract IERC20[]"
												},
												"typeName": {
													"baseType": {
														"id": 1102,
														"name": "IERC20",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 451,
														"src": "45701:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$451",
															"typeString": "contract IERC20"
														}
													},
													"id": 1103,
													"nodeType": "ArrayTypeName",
													"src": "45701:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_storage_ptr",
														"typeString": "contract IERC20[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1107,
												"indexed": false,
												"mutability": "mutable",
												"name": "deltas",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "45727:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr",
													"typeString": "int256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1105,
														"name": "int256",
														"nodeType": "ElementaryTypeName",
														"src": "45727:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 1106,
													"nodeType": "ArrayTypeName",
													"src": "45727:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr",
														"typeString": "int256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1110,
												"indexed": false,
												"mutability": "mutable",
												"name": "protocolFeeAmounts",
												"nodeType": "VariableDeclaration",
												"scope": 1112,
												"src": "45753:28:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1108,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "45753:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1109,
													"nodeType": "ArrayTypeName",
													"src": "45753:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "45613:175:0"
									},
									"src": "45589:200:0"
								},
								{
									"canonicalName": "IVault.PoolBalanceChangeKind",
									"id": 1115,
									"members": [
										{
											"id": 1113,
											"name": "JOIN",
											"nodeType": "EnumValue",
											"src": "45826:4:0"
										},
										{
											"id": 1114,
											"name": "EXIT",
											"nodeType": "EnumValue",
											"src": "45832:4:0"
										}
									],
									"name": "PoolBalanceChangeKind",
									"nodeType": "EnumDefinition",
									"src": "45797:41:0"
								},
								{
									"canonicalName": "IVault.SwapKind",
									"id": 1118,
									"members": [
										{
											"id": 1116,
											"name": "GIVEN_IN",
											"nodeType": "EnumValue",
											"src": "49488:8:0"
										},
										{
											"id": 1117,
											"name": "GIVEN_OUT",
											"nodeType": "EnumValue",
											"src": "49498:9:0"
										}
									],
									"name": "SwapKind",
									"nodeType": "EnumDefinition",
									"src": "49472:37:0"
								},
								{
									"documentation": {
										"id": 1119,
										"nodeType": "StructuredDocumentation",
										"src": "49517:599:0",
										"text": " @dev Performs a swap with a single Pool.\n If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\n taken from the Pool, which must be greater than or equal to `limit`.\n If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\n sent to the Pool, which must be less than or equal to `limit`.\n Internal Balance usage and the recipient are determined by the `funds` struct.\n Emits a `Swap` event."
									},
									"functionSelector": "52bbbe29",
									"id": 1132,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1121,
												"mutability": "mutable",
												"name": "singleSwap",
												"nodeType": "VariableDeclaration",
												"scope": 1132,
												"src": "50146:28:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_SingleSwap_$1145_memory_ptr",
													"typeString": "struct IVault.SingleSwap"
												},
												"typeName": {
													"id": 1120,
													"name": "SingleSwap",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1145,
													"src": "50146:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_SingleSwap_$1145_storage_ptr",
														"typeString": "struct IVault.SingleSwap"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1123,
												"mutability": "mutable",
												"name": "funds",
												"nodeType": "VariableDeclaration",
												"scope": 1132,
												"src": "50185:27:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_FundManagement_$1200_memory_ptr",
													"typeString": "struct IVault.FundManagement"
												},
												"typeName": {
													"id": 1122,
													"name": "FundManagement",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1200,
													"src": "50185:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_FundManagement_$1200_storage_ptr",
														"typeString": "struct IVault.FundManagement"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1125,
												"mutability": "mutable",
												"name": "limit",
												"nodeType": "VariableDeclaration",
												"scope": 1132,
												"src": "50223:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1124,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "50223:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1127,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 1132,
												"src": "50247:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1126,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "50247:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "50135:135:0"
									},
									"returnParameters": {
										"id": 1131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1130,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1132,
												"src": "50297:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1129,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "50297:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "50296:9:0"
									},
									"scope": 1294,
									"src": "50122:184:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "IVault.SingleSwap",
									"id": 1145,
									"members": [
										{
											"constant": false,
											"id": 1134,
											"mutability": "mutable",
											"name": "poolId",
											"nodeType": "VariableDeclaration",
											"scope": 1145,
											"src": "50903:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 1133,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "50903:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1136,
											"mutability": "mutable",
											"name": "kind",
											"nodeType": "VariableDeclaration",
											"scope": 1145,
											"src": "50928:13:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_enum$_SwapKind_$1118",
												"typeString": "enum IVault.SwapKind"
											},
											"typeName": {
												"id": 1135,
												"name": "SwapKind",
												"nodeType": "UserDefinedTypeName",
												"referencedDeclaration": 1118,
												"src": "50928:8:0",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_SwapKind_$1118",
													"typeString": "enum IVault.SwapKind"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1138,
											"mutability": "mutable",
											"name": "assetIn",
											"nodeType": "VariableDeclaration",
											"scope": 1145,
											"src": "50952:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_IAsset_$48",
												"typeString": "contract IAsset"
											},
											"typeName": {
												"id": 1137,
												"name": "IAsset",
												"nodeType": "UserDefinedTypeName",
												"referencedDeclaration": 48,
												"src": "50952:6:0",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IAsset_$48",
													"typeString": "contract IAsset"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1140,
											"mutability": "mutable",
											"name": "assetOut",
											"nodeType": "VariableDeclaration",
											"scope": 1145,
											"src": "50977:15:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_IAsset_$48",
												"typeString": "contract IAsset"
											},
											"typeName": {
												"id": 1139,
												"name": "IAsset",
												"nodeType": "UserDefinedTypeName",
												"referencedDeclaration": 48,
												"src": "50977:6:0",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IAsset_$48",
													"typeString": "contract IAsset"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1142,
											"mutability": "mutable",
											"name": "amount",
											"nodeType": "VariableDeclaration",
											"scope": 1145,
											"src": "51003:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1141,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "51003:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1144,
											"mutability": "mutable",
											"name": "userData",
											"nodeType": "VariableDeclaration",
											"scope": 1145,
											"src": "51028:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1143,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "51028:5:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "SingleSwap",
									"nodeType": "StructDefinition",
									"scope": 1294,
									"src": "50874:176:0",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1146,
										"nodeType": "StructuredDocumentation",
										"src": "51058:2008:0",
										"text": " @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\n the amount of tokens sent to or received from the Pool, depending on the `kind` value.\n Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\n Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\n the same index in the `assets` array.\n Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\n Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\n `amountOut` depending on the swap kind.\n Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\n of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\n the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\n The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\n or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\n out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\n or unwrapped from WETH by the Vault.\n Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\n the minimum or maximum amount of each token the vault is allowed to transfer.\n `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\n equivalent `swap` call.\n Emits `Swap` events."
									},
									"functionSelector": "945bcec9",
									"id": 1167,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchSwap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1148,
												"mutability": "mutable",
												"name": "kind",
												"nodeType": "VariableDeclaration",
												"scope": 1167,
												"src": "53101:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_SwapKind_$1118",
													"typeString": "enum IVault.SwapKind"
												},
												"typeName": {
													"id": 1147,
													"name": "SwapKind",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1118,
													"src": "53101:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_SwapKind_$1118",
														"typeString": "enum IVault.SwapKind"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1151,
												"mutability": "mutable",
												"name": "swaps",
												"nodeType": "VariableDeclaration",
												"scope": 1167,
												"src": "53125:28:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_BatchSwapStep_$1178_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct IVault.BatchSwapStep[]"
												},
												"typeName": {
													"baseType": {
														"id": 1149,
														"name": "BatchSwapStep",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 1178,
														"src": "53125:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_BatchSwapStep_$1178_storage_ptr",
															"typeString": "struct IVault.BatchSwapStep"
														}
													},
													"id": 1150,
													"nodeType": "ArrayTypeName",
													"src": "53125:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_BatchSwapStep_$1178_storage_$dyn_storage_ptr",
														"typeString": "struct IVault.BatchSwapStep[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1154,
												"mutability": "mutable",
												"name": "assets",
												"nodeType": "VariableDeclaration",
												"scope": 1167,
												"src": "53164:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IAsset_$48_$dyn_memory_ptr",
													"typeString": "contract IAsset[]"
												},
												"typeName": {
													"baseType": {
														"id": 1152,
														"name": "IAsset",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 48,
														"src": "53164:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IAsset_$48",
															"typeString": "contract IAsset"
														}
													},
													"id": 1153,
													"nodeType": "ArrayTypeName",
													"src": "53164:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IAsset_$48_$dyn_storage_ptr",
														"typeString": "contract IAsset[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1156,
												"mutability": "mutable",
												"name": "funds",
												"nodeType": "VariableDeclaration",
												"scope": 1167,
												"src": "53197:27:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_FundManagement_$1200_memory_ptr",
													"typeString": "struct IVault.FundManagement"
												},
												"typeName": {
													"id": 1155,
													"name": "FundManagement",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1200,
													"src": "53197:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_FundManagement_$1200_storage_ptr",
														"typeString": "struct IVault.FundManagement"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1159,
												"mutability": "mutable",
												"name": "limits",
												"nodeType": "VariableDeclaration",
												"scope": 1167,
												"src": "53235:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr",
													"typeString": "int256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1157,
														"name": "int256",
														"nodeType": "ElementaryTypeName",
														"src": "53235:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 1158,
													"nodeType": "ArrayTypeName",
													"src": "53235:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr",
														"typeString": "int256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1161,
												"mutability": "mutable",
												"name": "deadline",
												"nodeType": "VariableDeclaration",
												"scope": 1167,
												"src": "53268:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "53268:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "53090:201:0"
									},
									"returnParameters": {
										"id": 1166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1165,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1167,
												"src": "53318:15:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr",
													"typeString": "int256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1163,
														"name": "int256",
														"nodeType": "ElementaryTypeName",
														"src": "53318:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 1164,
													"nodeType": "ArrayTypeName",
													"src": "53318:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr",
														"typeString": "int256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "53317:17:0"
									},
									"scope": 1294,
									"src": "53072:263:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "IVault.BatchSwapStep",
									"id": 1178,
									"members": [
										{
											"constant": false,
											"id": 1169,
											"mutability": "mutable",
											"name": "poolId",
											"nodeType": "VariableDeclaration",
											"scope": 1178,
											"src": "53941:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 1168,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "53941:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1171,
											"mutability": "mutable",
											"name": "assetInIndex",
											"nodeType": "VariableDeclaration",
											"scope": 1178,
											"src": "53966:20:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1170,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "53966:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1173,
											"mutability": "mutable",
											"name": "assetOutIndex",
											"nodeType": "VariableDeclaration",
											"scope": 1178,
											"src": "53997:21:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1172,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "53997:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1175,
											"mutability": "mutable",
											"name": "amount",
											"nodeType": "VariableDeclaration",
											"scope": 1178,
											"src": "54029:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1174,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "54029:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1177,
											"mutability": "mutable",
											"name": "userData",
											"nodeType": "VariableDeclaration",
											"scope": 1178,
											"src": "54054:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1176,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "54054:5:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BatchSwapStep",
									"nodeType": "StructDefinition",
									"scope": 1294,
									"src": "53909:167:0",
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1179,
										"nodeType": "StructuredDocumentation",
										"src": "54084:94:0",
										"text": " @dev Emitted for each individual swap performed by `swap` or `batchSwap`."
									},
									"id": 1191,
									"name": "Swap",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1181,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolId",
												"nodeType": "VariableDeclaration",
												"scope": 1191,
												"src": "54205:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1180,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "54205:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1183,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenIn",
												"nodeType": "VariableDeclaration",
												"scope": 1191,
												"src": "54238:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$451",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1182,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 451,
													"src": "54238:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$451",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1185,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenOut",
												"nodeType": "VariableDeclaration",
												"scope": 1191,
												"src": "54271:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$451",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1184,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 451,
													"src": "54271:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$451",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1187,
												"indexed": false,
												"mutability": "mutable",
												"name": "amountIn",
												"nodeType": "VariableDeclaration",
												"scope": 1191,
												"src": "54305:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1186,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "54305:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1189,
												"indexed": false,
												"mutability": "mutable",
												"name": "amountOut",
												"nodeType": "VariableDeclaration",
												"scope": 1191,
												"src": "54332:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1188,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "54332:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "54194:162:0"
									},
									"src": "54184:173:0"
								},
								{
									"canonicalName": "IVault.FundManagement",
									"id": 1200,
									"members": [
										{
											"constant": false,
											"id": 1193,
											"mutability": "mutable",
											"name": "sender",
											"nodeType": "VariableDeclaration",
											"scope": 1200,
											"src": "55340:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1192,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "55340:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1195,
											"mutability": "mutable",
											"name": "fromInternalBalance",
											"nodeType": "VariableDeclaration",
											"scope": 1200,
											"src": "55365:24:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1194,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "55365:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1197,
											"mutability": "mutable",
											"name": "recipient",
											"nodeType": "VariableDeclaration",
											"scope": 1200,
											"src": "55400:25:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address_payable",
												"typeString": "address payable"
											},
											"typeName": {
												"id": 1196,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "55400:15:0",
												"stateMutability": "payable",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1199,
											"mutability": "mutable",
											"name": "toInternalBalance",
											"nodeType": "VariableDeclaration",
											"scope": 1200,
											"src": "55436:22:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1198,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "55436:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "FundManagement",
									"nodeType": "StructDefinition",
									"scope": 1294,
									"src": "55307:159:0",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1201,
										"nodeType": "StructuredDocumentation",
										"src": "55474:1041:0",
										"text": " @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\n simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\n Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\n the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\n receives are the same that an equivalent `batchSwap` call would receive.\n Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\n This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\n approve them for the Vault, or even know a user's address.\n Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\n eth_call instead of eth_sendTransaction."
									},
									"functionSelector": "f84d066e",
									"id": 1217,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "queryBatchSwap",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1203,
												"mutability": "mutable",
												"name": "kind",
												"nodeType": "VariableDeclaration",
												"scope": 1217,
												"src": "56555:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_SwapKind_$1118",
													"typeString": "enum IVault.SwapKind"
												},
												"typeName": {
													"id": 1202,
													"name": "SwapKind",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1118,
													"src": "56555:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_SwapKind_$1118",
														"typeString": "enum IVault.SwapKind"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1206,
												"mutability": "mutable",
												"name": "swaps",
												"nodeType": "VariableDeclaration",
												"scope": 1217,
												"src": "56579:28:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_BatchSwapStep_$1178_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct IVault.BatchSwapStep[]"
												},
												"typeName": {
													"baseType": {
														"id": 1204,
														"name": "BatchSwapStep",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 1178,
														"src": "56579:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_BatchSwapStep_$1178_storage_ptr",
															"typeString": "struct IVault.BatchSwapStep"
														}
													},
													"id": 1205,
													"nodeType": "ArrayTypeName",
													"src": "56579:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_BatchSwapStep_$1178_storage_$dyn_storage_ptr",
														"typeString": "struct IVault.BatchSwapStep[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1209,
												"mutability": "mutable",
												"name": "assets",
												"nodeType": "VariableDeclaration",
												"scope": 1217,
												"src": "56618:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IAsset_$48_$dyn_memory_ptr",
													"typeString": "contract IAsset[]"
												},
												"typeName": {
													"baseType": {
														"id": 1207,
														"name": "IAsset",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 48,
														"src": "56618:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IAsset_$48",
															"typeString": "contract IAsset"
														}
													},
													"id": 1208,
													"nodeType": "ArrayTypeName",
													"src": "56618:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IAsset_$48_$dyn_storage_ptr",
														"typeString": "contract IAsset[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1211,
												"mutability": "mutable",
												"name": "funds",
												"nodeType": "VariableDeclaration",
												"scope": 1217,
												"src": "56651:27:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_FundManagement_$1200_memory_ptr",
													"typeString": "struct IVault.FundManagement"
												},
												"typeName": {
													"id": 1210,
													"name": "FundManagement",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1200,
													"src": "56651:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_FundManagement_$1200_storage_ptr",
														"typeString": "struct IVault.FundManagement"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "56544:141:0"
									},
									"returnParameters": {
										"id": 1216,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1215,
												"mutability": "mutable",
												"name": "assetDeltas",
												"nodeType": "VariableDeclaration",
												"scope": 1217,
												"src": "56704:27:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_int256_$dyn_memory_ptr",
													"typeString": "int256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1213,
														"name": "int256",
														"nodeType": "ElementaryTypeName",
														"src": "56704:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 1214,
													"nodeType": "ArrayTypeName",
													"src": "56704:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_int256_$dyn_storage_ptr",
														"typeString": "int256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "56703:29:0"
									},
									"scope": 1294,
									"src": "56521:212:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1218,
										"nodeType": "StructuredDocumentation",
										"src": "56763:615:0",
										"text": " @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\n and then reverting unless the tokens plus a proportional protocol fee have been returned.\n The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\n for each token contract. `tokens` must be sorted in ascending order.\n The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\n `receiveFlashLoan` call.\n Emits `FlashLoan` events."
									},
									"functionSelector": "5c38449e",
									"id": 1231,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flashLoan",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1220,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1231,
												"src": "57413:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IFlashLoanRecipient_$468",
													"typeString": "contract IFlashLoanRecipient"
												},
												"typeName": {
													"id": 1219,
													"name": "IFlashLoanRecipient",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 468,
													"src": "57413:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IFlashLoanRecipient_$468",
														"typeString": "contract IFlashLoanRecipient"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1223,
												"mutability": "mutable",
												"name": "tokens",
												"nodeType": "VariableDeclaration",
												"scope": 1231,
												"src": "57453:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_memory_ptr",
													"typeString": "contract IERC20[]"
												},
												"typeName": {
													"baseType": {
														"id": 1221,
														"name": "IERC20",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 451,
														"src": "57453:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$451",
															"typeString": "contract IERC20"
														}
													},
													"id": 1222,
													"nodeType": "ArrayTypeName",
													"src": "57453:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_storage_ptr",
														"typeString": "contract IERC20[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1226,
												"mutability": "mutable",
												"name": "amounts",
												"nodeType": "VariableDeclaration",
												"scope": 1231,
												"src": "57486:24:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1224,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "57486:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1225,
													"nodeType": "ArrayTypeName",
													"src": "57486:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1228,
												"mutability": "mutable",
												"name": "userData",
												"nodeType": "VariableDeclaration",
												"scope": 1231,
												"src": "57521:21:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1227,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "57521:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "57402:147:0"
									},
									"returnParameters": {
										"id": 1230,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "57558:0:0"
									},
									"scope": 1294,
									"src": "57384:175:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1232,
										"nodeType": "StructuredDocumentation",
										"src": "57567:90:0",
										"text": " @dev Emitted for each individual flash loan performed by `flashLoan`."
									},
									"id": 1242,
									"name": "FlashLoan",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1241,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1234,
												"indexed": true,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1242,
												"src": "57679:37:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IFlashLoanRecipient_$468",
													"typeString": "contract IFlashLoanRecipient"
												},
												"typeName": {
													"id": 1233,
													"name": "IFlashLoanRecipient",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 468,
													"src": "57679:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IFlashLoanRecipient_$468",
														"typeString": "contract IFlashLoanRecipient"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1236,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 1242,
												"src": "57718:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$451",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1235,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 451,
													"src": "57718:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$451",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1238,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1242,
												"src": "57740:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1237,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "57740:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1240,
												"indexed": false,
												"mutability": "mutable",
												"name": "feeAmount",
												"nodeType": "VariableDeclaration",
												"scope": 1242,
												"src": "57756:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1239,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "57756:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "57678:96:0"
									},
									"src": "57663:112:0"
								},
								{
									"documentation": {
										"id": 1243,
										"nodeType": "StructuredDocumentation",
										"src": "58787:441:0",
										"text": " @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\n Pool Balance management features batching, which means a single contract call can be used to perform multiple\n operations of different kinds, with different Pools and tokens, at once.\n For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`."
									},
									"functionSelector": "e6c46092",
									"id": 1249,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "managePoolBalance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1246,
												"mutability": "mutable",
												"name": "ops",
												"nodeType": "VariableDeclaration",
												"scope": 1249,
												"src": "59261:26:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_PoolBalanceOp_$1258_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct IVault.PoolBalanceOp[]"
												},
												"typeName": {
													"baseType": {
														"id": 1244,
														"name": "PoolBalanceOp",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 1258,
														"src": "59261:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PoolBalanceOp_$1258_storage_ptr",
															"typeString": "struct IVault.PoolBalanceOp"
														}
													},
													"id": 1245,
													"nodeType": "ArrayTypeName",
													"src": "59261:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_PoolBalanceOp_$1258_storage_$dyn_storage_ptr",
														"typeString": "struct IVault.PoolBalanceOp[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "59260:28:0"
									},
									"returnParameters": {
										"id": 1248,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "59297:0:0"
									},
									"scope": 1294,
									"src": "59234:64:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"canonicalName": "IVault.PoolBalanceOp",
									"id": 1258,
									"members": [
										{
											"constant": false,
											"id": 1251,
											"mutability": "mutable",
											"name": "kind",
											"nodeType": "VariableDeclaration",
											"scope": 1258,
											"src": "59338:22:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_enum$_PoolBalanceOpKind_$1262",
												"typeString": "enum IVault.PoolBalanceOpKind"
											},
											"typeName": {
												"id": 1250,
												"name": "PoolBalanceOpKind",
												"nodeType": "UserDefinedTypeName",
												"referencedDeclaration": 1262,
												"src": "59338:17:0",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_PoolBalanceOpKind_$1262",
													"typeString": "enum IVault.PoolBalanceOpKind"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1253,
											"mutability": "mutable",
											"name": "poolId",
											"nodeType": "VariableDeclaration",
											"scope": 1258,
											"src": "59371:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 1252,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "59371:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1255,
											"mutability": "mutable",
											"name": "token",
											"nodeType": "VariableDeclaration",
											"scope": 1258,
											"src": "59396:12:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_IERC20_$451",
												"typeString": "contract IERC20"
											},
											"typeName": {
												"id": 1254,
												"name": "IERC20",
												"nodeType": "UserDefinedTypeName",
												"referencedDeclaration": 451,
												"src": "59396:6:0",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$451",
													"typeString": "contract IERC20"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1257,
											"mutability": "mutable",
											"name": "amount",
											"nodeType": "VariableDeclaration",
											"scope": 1258,
											"src": "59419:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1256,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "59419:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PoolBalanceOp",
									"nodeType": "StructDefinition",
									"scope": 1294,
									"src": "59306:135:0",
									"visibility": "public"
								},
								{
									"canonicalName": "IVault.PoolBalanceOpKind",
									"id": 1262,
									"members": [
										{
											"id": 1259,
											"name": "WITHDRAW",
											"nodeType": "EnumValue",
											"src": "59973:8:0"
										},
										{
											"id": 1260,
											"name": "DEPOSIT",
											"nodeType": "EnumValue",
											"src": "59983:7:0"
										},
										{
											"id": 1261,
											"name": "UPDATE",
											"nodeType": "EnumValue",
											"src": "59992:6:0"
										}
									],
									"name": "PoolBalanceOpKind",
									"nodeType": "EnumDefinition",
									"src": "59948:52:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1263,
										"nodeType": "StructuredDocumentation",
										"src": "60008:111:0",
										"text": " @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`."
									},
									"id": 1275,
									"name": "PoolBalanceManaged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1265,
												"indexed": true,
												"mutability": "mutable",
												"name": "poolId",
												"nodeType": "VariableDeclaration",
												"scope": 1275,
												"src": "60160:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1264,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "60160:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1267,
												"indexed": true,
												"mutability": "mutable",
												"name": "assetManager",
												"nodeType": "VariableDeclaration",
												"scope": 1275,
												"src": "60193:28:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1266,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "60193:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1269,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 1275,
												"src": "60232:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$451",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1268,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 451,
													"src": "60232:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$451",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1271,
												"indexed": false,
												"mutability": "mutable",
												"name": "cashDelta",
												"nodeType": "VariableDeclaration",
												"scope": 1275,
												"src": "60263:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1270,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "60263:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1273,
												"indexed": false,
												"mutability": "mutable",
												"name": "managedDelta",
												"nodeType": "VariableDeclaration",
												"scope": 1275,
												"src": "60290:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1272,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "60290:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "60149:167:0"
									},
									"src": "60125:192:0"
								},
								{
									"documentation": {
										"id": 1276,
										"nodeType": "StructuredDocumentation",
										"src": "61211:66:0",
										"text": " @dev Returns the current protocol fee module."
									},
									"functionSelector": "d2946c2b",
									"id": 1281,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getProtocolFeesCollector",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1277,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "61316:2:0"
									},
									"returnParameters": {
										"id": 1280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1279,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1281,
												"src": "61342:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ProtocolFeesCollector_$1555",
													"typeString": "contract ProtocolFeesCollector"
												},
												"typeName": {
													"id": 1278,
													"name": "ProtocolFeesCollector",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1555,
													"src": "61342:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ProtocolFeesCollector_$1555",
														"typeString": "contract ProtocolFeesCollector"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "61341:23:0"
									},
									"scope": 1294,
									"src": "61283:82:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1282,
										"nodeType": "StructuredDocumentation",
										"src": "61373:649:0",
										"text": " @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\n error in some part of the system.\n The Vault can only be paused during an initial time period, after which pausing is forever disabled.\n While the contract is paused, the following features are disabled:\n - depositing and transferring internal balance\n - transferring external balance (using the Vault's allowance)\n - swaps\n - joining Pools\n - Asset Manager interactions\n Internal Balance can still be withdrawn, and Pools exited."
									},
									"functionSelector": "16c38b3c",
									"id": 1287,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setPaused",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1285,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1284,
												"mutability": "mutable",
												"name": "paused",
												"nodeType": "VariableDeclaration",
												"scope": 1287,
												"src": "62047:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1283,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "62047:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "62046:13:0"
									},
									"returnParameters": {
										"id": 1286,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "62068:0:0"
									},
									"scope": 1294,
									"src": "62028:41:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1288,
										"nodeType": "StructuredDocumentation",
										"src": "62077:60:0",
										"text": " @dev Returns the Vault's WETH instance."
									},
									"functionSelector": "ad5c4648",
									"id": 1293,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "WETH",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1289,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "62156:2:0"
									},
									"returnParameters": {
										"id": 1292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1291,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1293,
												"src": "62182:5:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IWETH_$481",
													"typeString": "contract IWETH"
												},
												"typeName": {
													"id": 1290,
													"name": "IWETH",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 481,
													"src": "62182:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IWETH_$481",
														"typeString": "contract IWETH"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "62181:7:0"
									},
									"scope": 1294,
									"src": "62143:46:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1556,
							"src": "24375:37875:0"
						},
						{
							"id": 1295,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "62254:23:0"
						},
						{
							"id": 1296,
							"literals": [
								"experimental",
								"ABIEncoderV2"
							],
							"nodeType": "PragmaDirective",
							"src": "62279:33:0"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1298,
										"name": "Authentication",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 715,
										"src": "62807:14:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Authentication_$715",
											"typeString": "contract Authentication"
										}
									},
									"id": 1299,
									"nodeType": "InheritanceSpecifier",
									"src": "62807:14:0"
								},
								{
									"baseName": {
										"id": 1300,
										"name": "ReentrancyGuard",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 641,
										"src": "62823:15:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ReentrancyGuard_$641",
											"typeString": "contract ReentrancyGuard"
										}
									},
									"id": 1301,
									"nodeType": "InheritanceSpecifier",
									"src": "62823:15:0"
								}
							],
							"contractDependencies": [
								45,
								641,
								715
							],
							"contractKind": "contract",
							"documentation": {
								"id": 1297,
								"nodeType": "StructuredDocumentation",
								"src": "62314:457:0",
								"text": " @dev This an auxiliary contract to the Vault, deployed by it during construction. It offloads some of the tasks the\n Vault performs to reduce its overall bytecode size.\n The current values for all protocol fee percentages are stored here, and any tokens charged as protocol fees are\n sent to this contract, where they may be withdrawn by authorized entities. All authorization tasks are delegated\n to the Vault's own authorizer."
							},
							"fullyImplemented": true,
							"id": 1555,
							"linearizedBaseContracts": [
								1555,
								641,
								715,
								45
							],
							"name": "ProtocolFeesCollector",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1304,
									"libraryName": {
										"id": 1302,
										"name": "SafeERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 587,
										"src": "62852:9:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeERC20_$587",
											"typeString": "library SafeERC20"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "62846:27:0",
									"typeName": {
										"id": 1303,
										"name": "IERC20",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 451,
										"src": "62866:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$451",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"constant": true,
									"id": 1307,
									"mutability": "constant",
									"name": "_MAX_PROTOCOL_SWAP_FEE_PERCENTAGE",
									"nodeType": "VariableDeclaration",
									"scope": 1555,
									"src": "62948:66:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1305,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "62948:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3530653136",
										"id": 1306,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "63009:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_500000000000000000_by_1",
											"typeString": "int_const 500000000000000000"
										},
										"value": "50e16"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1310,
									"mutability": "constant",
									"name": "_MAX_PROTOCOL_FLASH_LOAN_FEE_PERCENTAGE",
									"nodeType": "VariableDeclaration",
									"scope": 1555,
									"src": "63028:71:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1308,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "63028:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31653136",
										"id": 1309,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "63095:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_10000000000000000_by_1",
											"typeString": "int_const 10000000000000000"
										},
										"value": "1e16"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"functionSelector": "fbfa77cf",
									"id": 1312,
									"mutability": "immutable",
									"name": "vault",
									"nodeType": "VariableDeclaration",
									"scope": 1555,
									"src": "63114:29:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IVault_$1294",
										"typeString": "contract IVault"
									},
									"typeName": {
										"id": 1311,
										"name": "IVault",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1294,
										"src": "63114:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IVault_$1294",
											"typeString": "contract IVault"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 1314,
									"mutability": "mutable",
									"name": "_swapFeePercentage",
									"nodeType": "VariableDeclaration",
									"scope": 1555,
									"src": "63493:34:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1313,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "63493:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1316,
									"mutability": "mutable",
									"name": "_flashLoanFeePercentage",
									"nodeType": "VariableDeclaration",
									"scope": 1555,
									"src": "63640:39:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1315,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "63640:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 1320,
									"name": "SwapFeePercentageChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1318,
												"indexed": false,
												"mutability": "mutable",
												"name": "newSwapFeePercentage",
												"nodeType": "VariableDeclaration",
												"scope": 1320,
												"src": "63719:28:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1317,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "63719:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "63718:30:0"
									},
									"src": "63688:61:0"
								},
								{
									"anonymous": false,
									"id": 1324,
									"name": "FlashLoanFeePercentageChanged",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1323,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1322,
												"indexed": false,
												"mutability": "mutable",
												"name": "newFlashLoanFeePercentage",
												"nodeType": "VariableDeclaration",
												"scope": 1324,
												"src": "63791:33:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1321,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "63791:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "63790:35:0"
									},
									"src": "63755:71:0"
								},
								{
									"body": {
										"id": 1345,
										"nodeType": "Block",
										"src": "64059:33:0",
										"statements": [
											{
												"expression": {
													"id": 1343,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1341,
														"name": "vault",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1312,
														"src": "64070:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IVault_$1294",
															"typeString": "contract IVault"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1342,
														"name": "_vault",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1326,
														"src": "64078:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IVault_$1294",
															"typeString": "contract IVault"
														}
													},
													"src": "64070:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IVault_$1294",
														"typeString": "contract IVault"
													}
												},
												"id": 1344,
												"nodeType": "ExpressionStatement",
												"src": "64070:14:0"
											}
										]
									},
									"id": 1346,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1335,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "64045:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_ProtocolFeesCollector_$1555",
																				"typeString": "contract ProtocolFeesCollector"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_ProtocolFeesCollector_$1555",
																				"typeString": "contract ProtocolFeesCollector"
																			}
																		],
																		"id": 1334,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "64037:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1333,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "64037:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1336,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "64037:13:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1332,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "64029:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1331,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "64029:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 1337,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "64029:22:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1330,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "64021:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_bytes32_$",
															"typeString": "type(bytes32)"
														},
														"typeName": {
															"id": 1329,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "64021:7:0",
															"typeDescriptions": {}
														}
													},
													"id": 1338,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "64021:31:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 1339,
											"modifierName": {
												"id": 1328,
												"name": "Authentication",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 715,
												"src": "64006:14:0",
												"typeDescriptions": {
													"typeIdentifier": "t_type$_t_contract$_Authentication_$715_$",
													"typeString": "type(contract Authentication)"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "64006:47:0"
										}
									],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1327,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1326,
												"mutability": "mutable",
												"name": "_vault",
												"nodeType": "VariableDeclaration",
												"scope": 1346,
												"src": "63846:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IVault_$1294",
													"typeString": "contract IVault"
												},
												"typeName": {
													"id": 1325,
													"name": "IVault",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1294,
													"src": "63846:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IVault_$1294",
														"typeString": "contract IVault"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "63845:15:0"
									},
									"returnParameters": {
										"id": 1340,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "64059:0:0"
									},
									"scope": 1555,
									"src": "63834:258:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1402,
										"nodeType": "Block",
										"src": "64273:286:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1364,
																"name": "tokens",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1349,
																"src": "64320:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_calldata_ptr",
																	"typeString": "contract IERC20[] calldata"
																}
															},
															"id": 1365,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "64320:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1366,
																"name": "amounts",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1352,
																"src": "64335:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																	"typeString": "uint256[] calldata"
																}
															},
															"id": 1367,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "64335:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1361,
															"name": "InputHelpers",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 842,
															"src": "64284:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_InputHelpers_$842_$",
																"typeString": "type(library InputHelpers)"
															}
														},
														"id": 1363,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "ensureInputLengthMatch",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 732,
														"src": "64284:35:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (uint256,uint256) pure"
														}
													},
													"id": 1368,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "64284:66:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1369,
												"nodeType": "ExpressionStatement",
												"src": "64284:66:0"
											},
											{
												"body": {
													"id": 1400,
													"nodeType": "Block",
													"src": "64407:145:0",
													"statements": [
														{
															"assignments": [
																1382
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1382,
																	"mutability": "mutable",
																	"name": "token",
																	"nodeType": "VariableDeclaration",
																	"scope": 1400,
																	"src": "64422:12:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$451",
																		"typeString": "contract IERC20"
																	},
																	"typeName": {
																		"id": 1381,
																		"name": "IERC20",
																		"nodeType": "UserDefinedTypeName",
																		"referencedDeclaration": 451,
																		"src": "64422:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$451",
																			"typeString": "contract IERC20"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1386,
															"initialValue": {
																"baseExpression": {
																	"id": 1383,
																	"name": "tokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1349,
																	"src": "64437:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_calldata_ptr",
																		"typeString": "contract IERC20[] calldata"
																	}
																},
																"id": 1385,
																"indexExpression": {
																	"id": 1384,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1371,
																	"src": "64444:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "64437:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$451",
																	"typeString": "contract IERC20"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "64422:24:0"
														},
														{
															"assignments": [
																1388
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1388,
																	"mutability": "mutable",
																	"name": "amount",
																	"nodeType": "VariableDeclaration",
																	"scope": 1400,
																	"src": "64461:14:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1387,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "64461:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1392,
															"initialValue": {
																"baseExpression": {
																	"id": 1389,
																	"name": "amounts",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1352,
																	"src": "64478:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																		"typeString": "uint256[] calldata"
																	}
																},
																"id": 1391,
																"indexExpression": {
																	"id": 1390,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1371,
																	"src": "64486:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "64478:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "64461:27:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1396,
																		"name": "recipient",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1354,
																		"src": "64522:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1397,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1388,
																		"src": "64533:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1393,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1382,
																		"src": "64503:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$451",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1395,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 522,
																	"src": "64503:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$451_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$451_$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1398,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "64503:37:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1399,
															"nodeType": "ExpressionStatement",
															"src": "64503:37:0"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1377,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1374,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1371,
														"src": "64383:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1375,
															"name": "tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1349,
															"src": "64387:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_calldata_ptr",
																"typeString": "contract IERC20[] calldata"
															}
														},
														"id": 1376,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "64387:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "64383:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1401,
												"initializationExpression": {
													"assignments": [
														1371
													],
													"declarations": [
														{
															"constant": false,
															"id": 1371,
															"mutability": "mutable",
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 1401,
															"src": "64368:9:0",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1370,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "64368:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1373,
													"initialValue": {
														"hexValue": "30",
														"id": 1372,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "64380:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "64368:13:0"
												},
												"loopExpression": {
													"expression": {
														"id": 1379,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "64402:3:0",
														"subExpression": {
															"id": 1378,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1371,
															"src": "64404:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1380,
													"nodeType": "ExpressionStatement",
													"src": "64402:3:0"
												},
												"nodeType": "ForStatement",
												"src": "64363:189:0"
											}
										]
									},
									"functionSelector": "6daefab6",
									"id": 1403,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1357,
											"modifierName": {
												"id": 1356,
												"name": "nonReentrant",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 616,
												"src": "64247:12:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "64247:12:0"
										},
										{
											"id": 1359,
											"modifierName": {
												"id": 1358,
												"name": "authenticate",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 666,
												"src": "64260:12:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "64260:12:0"
										}
									],
									"name": "withdrawCollectedFees",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1355,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1349,
												"mutability": "mutable",
												"name": "tokens",
												"nodeType": "VariableDeclaration",
												"scope": 1403,
												"src": "64141:24:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_calldata_ptr",
													"typeString": "contract IERC20[]"
												},
												"typeName": {
													"baseType": {
														"id": 1347,
														"name": "IERC20",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 451,
														"src": "64141:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$451",
															"typeString": "contract IERC20"
														}
													},
													"id": 1348,
													"nodeType": "ArrayTypeName",
													"src": "64141:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_storage_ptr",
														"typeString": "contract IERC20[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1352,
												"mutability": "mutable",
												"name": "amounts",
												"nodeType": "VariableDeclaration",
												"scope": 1403,
												"src": "64176:26:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1350,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "64176:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1351,
													"nodeType": "ArrayTypeName",
													"src": "64176:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1354,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1403,
												"src": "64213:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1353,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "64213:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "64130:107:0"
									},
									"returnParameters": {
										"id": 1360,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "64273:0:0"
									},
									"scope": 1555,
									"src": "64100:459:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1426,
										"nodeType": "Block",
										"src": "64649:237:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1413,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1411,
																"name": "newSwapFeePercentage",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1405,
																"src": "64669:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1412,
																"name": "_MAX_PROTOCOL_SWAP_FEE_PERCENTAGE",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1307,
																"src": "64693:33:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "64669:57:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"expression": {
																"id": 1414,
																"name": "Errors",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 374,
																"src": "64728:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Errors_$374_$",
																	"typeString": "type(library Errors)"
																}
															},
															"id": 1415,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "SWAP_FEE_PERCENTAGE_TOO_HIGH",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 367,
															"src": "64728:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1410,
														"name": "_require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 65,
														"src": "64660:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_uint256_$returns$__$",
															"typeString": "function (bool,uint256) pure"
														}
													},
													"id": 1416,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "64660:104:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1417,
												"nodeType": "ExpressionStatement",
												"src": "64660:104:0"
											},
											{
												"expression": {
													"id": 1420,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1418,
														"name": "_swapFeePercentage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1314,
														"src": "64775:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1419,
														"name": "newSwapFeePercentage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1405,
														"src": "64796:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "64775:41:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1421,
												"nodeType": "ExpressionStatement",
												"src": "64775:41:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1423,
															"name": "newSwapFeePercentage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1405,
															"src": "64857:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1422,
														"name": "SwapFeePercentageChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1320,
														"src": "64832:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1424,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "64832:46:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1425,
												"nodeType": "EmitStatement",
												"src": "64827:51:0"
											}
										]
									},
									"functionSelector": "38e9922e",
									"id": 1427,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1408,
											"modifierName": {
												"id": 1407,
												"name": "authenticate",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 666,
												"src": "64636:12:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "64636:12:0"
										}
									],
									"name": "setSwapFeePercentage",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1406,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1405,
												"mutability": "mutable",
												"name": "newSwapFeePercentage",
												"nodeType": "VariableDeclaration",
												"scope": 1427,
												"src": "64597:28:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1404,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "64597:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "64596:30:0"
									},
									"returnParameters": {
										"id": 1409,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "64649:0:0"
									},
									"scope": 1555,
									"src": "64567:319:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1450,
										"nodeType": "Block",
										"src": "64986:311:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1437,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1435,
																"name": "newFlashLoanFeePercentage",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1429,
																"src": "65020:25:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1436,
																"name": "_MAX_PROTOCOL_FLASH_LOAN_FEE_PERCENTAGE",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1310,
																"src": "65049:39:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "65020:68:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"expression": {
																"id": 1438,
																"name": "Errors",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 374,
																"src": "65103:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Errors_$374_$",
																	"typeString": "type(library Errors)"
																}
															},
															"id": 1439,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 370,
															"src": "65103:41:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1434,
														"name": "_require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 65,
														"src": "64997:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_uint256_$returns$__$",
															"typeString": "function (bool,uint256) pure"
														}
													},
													"id": 1440,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "64997:158:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1441,
												"nodeType": "ExpressionStatement",
												"src": "64997:158:0"
											},
											{
												"expression": {
													"id": 1444,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1442,
														"name": "_flashLoanFeePercentage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1316,
														"src": "65166:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1443,
														"name": "newFlashLoanFeePercentage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1429,
														"src": "65192:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "65166:51:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1445,
												"nodeType": "ExpressionStatement",
												"src": "65166:51:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1447,
															"name": "newFlashLoanFeePercentage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1429,
															"src": "65263:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1446,
														"name": "FlashLoanFeePercentageChanged",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1324,
														"src": "65233:29:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1448,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "65233:56:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1449,
												"nodeType": "EmitStatement",
												"src": "65228:61:0"
											}
										]
									},
									"functionSelector": "6b6b9f69",
									"id": 1451,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1432,
											"modifierName": {
												"id": 1431,
												"name": "authenticate",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 666,
												"src": "64973:12:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "64973:12:0"
										}
									],
									"name": "setFlashLoanFeePercentage",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1429,
												"mutability": "mutable",
												"name": "newFlashLoanFeePercentage",
												"nodeType": "VariableDeclaration",
												"scope": 1451,
												"src": "64929:33:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1428,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "64929:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "64928:35:0"
									},
									"returnParameters": {
										"id": 1433,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "64986:0:0"
									},
									"scope": 1555,
									"src": "64894:403:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1458,
										"nodeType": "Block",
										"src": "65369:44:0",
										"statements": [
											{
												"expression": {
													"id": 1456,
													"name": "_swapFeePercentage",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1314,
													"src": "65387:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1455,
												"id": 1457,
												"nodeType": "Return",
												"src": "65380:25:0"
											}
										]
									},
									"functionSelector": "55c67628",
									"id": 1459,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getSwapFeePercentage",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1452,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "65334:2:0"
									},
									"returnParameters": {
										"id": 1455,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1454,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1459,
												"src": "65360:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1453,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "65360:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "65359:9:0"
									},
									"scope": 1555,
									"src": "65305:108:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1466,
										"nodeType": "Block",
										"src": "65490:49:0",
										"statements": [
											{
												"expression": {
													"id": 1464,
													"name": "_flashLoanFeePercentage",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1316,
													"src": "65508:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1463,
												"id": 1465,
												"nodeType": "Return",
												"src": "65501:30:0"
											}
										]
									},
									"functionSelector": "d877845c",
									"id": 1467,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getFlashLoanFeePercentage",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1460,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "65455:2:0"
									},
									"returnParameters": {
										"id": 1463,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1462,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1467,
												"src": "65481:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1461,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "65481:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "65480:9:0"
									},
									"scope": 1555,
									"src": "65421:118:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1512,
										"nodeType": "Block",
										"src": "65655:191:0",
										"statements": [
											{
												"expression": {
													"id": 1483,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1476,
														"name": "feeAmounts",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1474,
														"src": "65666:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[] memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 1480,
																	"name": "tokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1470,
																	"src": "65693:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_memory_ptr",
																		"typeString": "contract IERC20[] memory"
																	}
																},
																"id": 1481,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "65693:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1479,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "NewExpression",
															"src": "65679:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
																"typeString": "function (uint256) pure returns (uint256[] memory)"
															},
															"typeName": {
																"baseType": {
																	"id": 1477,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "65683:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1478,
																"nodeType": "ArrayTypeName",
																"src": "65683:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																	"typeString": "uint256[]"
																}
															}
														},
														"id": 1482,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "65679:28:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[] memory"
														}
													},
													"src": "65666:41:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
														"typeString": "uint256[] memory"
													}
												},
												"id": 1484,
												"nodeType": "ExpressionStatement",
												"src": "65666:41:0"
											},
											{
												"body": {
													"id": 1510,
													"nodeType": "Block",
													"src": "65762:77:0",
													"statements": [
														{
															"expression": {
																"id": 1508,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1496,
																		"name": "feeAmounts",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1474,
																		"src": "65777:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																			"typeString": "uint256[] memory"
																		}
																	},
																	"id": 1498,
																	"indexExpression": {
																		"id": 1497,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1486,
																		"src": "65788:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "65777:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1505,
																					"name": "this",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967268,
																					"src": "65821:4:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_ProtocolFeesCollector_$1555",
																						"typeString": "contract ProtocolFeesCollector"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_ProtocolFeesCollector_$1555",
																						"typeString": "contract ProtocolFeesCollector"
																					}
																				],
																				"id": 1504,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "65813:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 1503,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "65813:7:0",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1506,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "65813:13:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"expression": {
																			"baseExpression": {
																				"id": 1499,
																				"name": "tokens",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1470,
																				"src": "65793:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_memory_ptr",
																					"typeString": "contract IERC20[] memory"
																				}
																			},
																			"id": 1501,
																			"indexExpression": {
																				"id": 1500,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1486,
																				"src": "65800:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "65793:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$451",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 1502,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "balanceOf",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 390,
																		"src": "65793:19:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) view external returns (uint256)"
																		}
																	},
																	"id": 1507,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "65793:34:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "65777:50:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1509,
															"nodeType": "ExpressionStatement",
															"src": "65777:50:0"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1492,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1489,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1486,
														"src": "65738:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1490,
															"name": "tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1470,
															"src": "65742:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_memory_ptr",
																"typeString": "contract IERC20[] memory"
															}
														},
														"id": 1491,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "65742:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "65738:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1511,
												"initializationExpression": {
													"assignments": [
														1486
													],
													"declarations": [
														{
															"constant": false,
															"id": 1486,
															"mutability": "mutable",
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 1511,
															"src": "65723:9:0",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1485,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "65723:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1488,
													"initialValue": {
														"hexValue": "30",
														"id": 1487,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "65735:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "65723:13:0"
												},
												"loopExpression": {
													"expression": {
														"id": 1494,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "65757:3:0",
														"subExpression": {
															"id": 1493,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1486,
															"src": "65759:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1495,
													"nodeType": "ExpressionStatement",
													"src": "65757:3:0"
												},
												"nodeType": "ForStatement",
												"src": "65718:121:0"
											}
										]
									},
									"functionSelector": "e42abf35",
									"id": 1513,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getCollectedFeeAmounts",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1471,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1470,
												"mutability": "mutable",
												"name": "tokens",
												"nodeType": "VariableDeclaration",
												"scope": 1513,
												"src": "65579:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_memory_ptr",
													"typeString": "contract IERC20[]"
												},
												"typeName": {
													"baseType": {
														"id": 1468,
														"name": "IERC20",
														"nodeType": "UserDefinedTypeName",
														"referencedDeclaration": 451,
														"src": "65579:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$451",
															"typeString": "contract IERC20"
														}
													},
													"id": 1469,
													"nodeType": "ArrayTypeName",
													"src": "65579:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_contract$_IERC20_$451_$dyn_storage_ptr",
														"typeString": "contract IERC20[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "65578:24:0"
									},
									"returnParameters": {
										"id": 1475,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1474,
												"mutability": "mutable",
												"name": "feeAmounts",
												"nodeType": "VariableDeclaration",
												"scope": 1513,
												"src": "65626:27:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1472,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "65626:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1473,
													"nodeType": "ArrayTypeName",
													"src": "65626:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "65625:29:0"
									},
									"scope": 1555,
									"src": "65547:299:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1521,
										"nodeType": "Block",
										"src": "65915:42:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1518,
														"name": "_getAuthorizer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1554,
														"src": "65933:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IAuthorizer_$495_$",
															"typeString": "function () view returns (contract IAuthorizer)"
														}
													},
													"id": 1519,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "65933:16:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAuthorizer_$495",
														"typeString": "contract IAuthorizer"
													}
												},
												"functionReturnParameters": 1517,
												"id": 1520,
												"nodeType": "Return",
												"src": "65926:23:0"
											}
										]
									},
									"functionSelector": "aaabadc5",
									"id": 1522,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAuthorizer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1514,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "65876:2:0"
									},
									"returnParameters": {
										"id": 1517,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1516,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1522,
												"src": "65902:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IAuthorizer_$495",
													"typeString": "contract IAuthorizer"
												},
												"typeName": {
													"id": 1515,
													"name": "IAuthorizer",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 495,
													"src": "65902:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAuthorizer_$495",
														"typeString": "contract IAuthorizer"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "65901:13:0"
									},
									"scope": 1555,
									"src": "65854:103:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										714
									],
									"body": {
										"id": 1543,
										"nodeType": "Block",
										"src": "66059:87:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1535,
															"name": "actionId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1524,
															"src": "66105:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1536,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1526,
															"src": "66115:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1539,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "66132:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ProtocolFeesCollector_$1555",
																		"typeString": "contract ProtocolFeesCollector"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ProtocolFeesCollector_$1555",
																		"typeString": "contract ProtocolFeesCollector"
																	}
																],
																"id": 1538,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "66124:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1537,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "66124:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 1540,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "66124:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1532,
																"name": "_getAuthorizer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1554,
																"src": "66077:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_contract$_IAuthorizer_$495_$",
																	"typeString": "function () view returns (contract IAuthorizer)"
																}
															},
															"id": 1533,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "66077:16:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IAuthorizer_$495",
																"typeString": "contract IAuthorizer"
															}
														},
														"id": 1534,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "canPerform",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 494,
														"src": "66077:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_bytes32_$_t_address_$_t_address_$returns$_t_bool_$",
															"typeString": "function (bytes32,address,address) view external returns (bool)"
														}
													},
													"id": 1541,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "66077:61:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1531,
												"id": 1542,
												"nodeType": "Return",
												"src": "66070:68:0"
											}
										]
									},
									"id": 1544,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_canPerform",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1528,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "66035:8:0"
									},
									"parameters": {
										"id": 1527,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1524,
												"mutability": "mutable",
												"name": "actionId",
												"nodeType": "VariableDeclaration",
												"scope": 1544,
												"src": "65986:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1523,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "65986:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1526,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 1544,
												"src": "66004:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1525,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "66004:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "65985:35:0"
									},
									"returnParameters": {
										"id": 1531,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1530,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1544,
												"src": "66053:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1529,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "66053:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "66052:6:0"
									},
									"scope": 1555,
									"src": "65965:181:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1553,
										"nodeType": "Block",
										"src": "66216:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 1549,
															"name": "vault",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1312,
															"src": "66234:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IVault_$1294",
																"typeString": "contract IVault"
															}
														},
														"id": 1550,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "getAuthorizer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 854,
														"src": "66234:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$__$returns$_t_contract$_IAuthorizer_$495_$",
															"typeString": "function () view external returns (contract IAuthorizer)"
														}
													},
													"id": 1551,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "66234:21:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAuthorizer_$495",
														"typeString": "contract IAuthorizer"
													}
												},
												"functionReturnParameters": 1548,
												"id": 1552,
												"nodeType": "Return",
												"src": "66227:28:0"
											}
										]
									},
									"id": 1554,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getAuthorizer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1545,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "66177:2:0"
									},
									"returnParameters": {
										"id": 1548,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1547,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1554,
												"src": "66203:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IAuthorizer_$495",
													"typeString": "contract IAuthorizer"
												},
												"typeName": {
													"id": 1546,
													"name": "IAuthorizer",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 495,
													"src": "66203:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IAuthorizer_$495",
														"typeString": "contract IAuthorizer"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "66202:13:0"
									},
									"scope": 1555,
									"src": "66154:109:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1556,
							"src": "62773:3493:0"
						}
					],
					"src": "0:66266:0"
				},
				"id": 0
			}
		}
	}
}