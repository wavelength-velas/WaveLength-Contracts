/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MockWeightedOracleMathInterface extends utils.Interface {
  functions: {
    "calcLogBPTPrice(uint256,uint256,int256)": FunctionFragment;
    "calcLogSpotPrice(uint256,uint256,uint256,uint256)": FunctionFragment;
    "fromLowResLog(int256)": FunctionFragment;
    "toLowResLog(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calcLogBPTPrice"
      | "calcLogSpotPrice"
      | "fromLowResLog"
      | "toLowResLog"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calcLogBPTPrice",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcLogSpotPrice",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fromLowResLog",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "toLowResLog",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "calcLogBPTPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcLogSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fromLowResLog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toLowResLog",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockWeightedOracleMath extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockWeightedOracleMathInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calcLogBPTPrice(
      normalizedWeight: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      bptTotalSupplyLn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcLogSpotPrice(
      normalizedWeightA: PromiseOrValue<BigNumberish>,
      balanceA: PromiseOrValue<BigNumberish>,
      normalizedWeightB: PromiseOrValue<BigNumberish>,
      balanceB: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fromLowResLog(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    toLowResLog(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  calcLogBPTPrice(
    normalizedWeight: PromiseOrValue<BigNumberish>,
    balance: PromiseOrValue<BigNumberish>,
    bptTotalSupplyLn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcLogSpotPrice(
    normalizedWeightA: PromiseOrValue<BigNumberish>,
    balanceA: PromiseOrValue<BigNumberish>,
    normalizedWeightB: PromiseOrValue<BigNumberish>,
    balanceB: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fromLowResLog(
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toLowResLog(
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    calcLogBPTPrice(
      normalizedWeight: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      bptTotalSupplyLn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcLogSpotPrice(
      normalizedWeightA: PromiseOrValue<BigNumberish>,
      balanceA: PromiseOrValue<BigNumberish>,
      normalizedWeightB: PromiseOrValue<BigNumberish>,
      balanceB: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fromLowResLog(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toLowResLog(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    calcLogBPTPrice(
      normalizedWeight: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      bptTotalSupplyLn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcLogSpotPrice(
      normalizedWeightA: PromiseOrValue<BigNumberish>,
      balanceA: PromiseOrValue<BigNumberish>,
      normalizedWeightB: PromiseOrValue<BigNumberish>,
      balanceB: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fromLowResLog(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toLowResLog(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calcLogBPTPrice(
      normalizedWeight: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      bptTotalSupplyLn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcLogSpotPrice(
      normalizedWeightA: PromiseOrValue<BigNumberish>,
      balanceA: PromiseOrValue<BigNumberish>,
      normalizedWeightB: PromiseOrValue<BigNumberish>,
      balanceB: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fromLowResLog(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toLowResLog(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
