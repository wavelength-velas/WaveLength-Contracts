/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace WeightedPool2Tokens {
  export type NewPoolParamsStruct = {
    vault: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    token0: PromiseOrValue<string>;
    token1: PromiseOrValue<string>;
    normalizedWeight0: PromiseOrValue<BigNumberish>;
    normalizedWeight1: PromiseOrValue<BigNumberish>;
    swapFeePercentage: PromiseOrValue<BigNumberish>;
    pauseWindowDuration: PromiseOrValue<BigNumberish>;
    bufferPeriodDuration: PromiseOrValue<BigNumberish>;
    oracleEnabled: PromiseOrValue<boolean>;
    owner: PromiseOrValue<string>;
  };

  export type NewPoolParamsStructOutput = [
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    string
  ] & {
    vault: string;
    name: string;
    symbol: string;
    token0: string;
    token1: string;
    normalizedWeight0: BigNumber;
    normalizedWeight1: BigNumber;
    swapFeePercentage: BigNumber;
    pauseWindowDuration: BigNumber;
    bufferPeriodDuration: BigNumber;
    oracleEnabled: boolean;
    owner: string;
  };
}

export declare namespace MockSamples {
  export type SampleStruct = {
    logPairPrice: PromiseOrValue<BigNumberish>;
    accLogPairPrice: PromiseOrValue<BigNumberish>;
    logBptPrice: PromiseOrValue<BigNumberish>;
    accLogBptPrice: PromiseOrValue<BigNumberish>;
    logInvariant: PromiseOrValue<BigNumberish>;
    accLogInvariant: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type SampleStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    logPairPrice: BigNumber;
    accLogPairPrice: BigNumber;
    logBptPrice: BigNumber;
    accLogBptPrice: BigNumber;
    logInvariant: BigNumber;
    accLogInvariant: BigNumber;
    timestamp: BigNumber;
  };
}

export declare namespace MockPoolPriceOracle {
  export type BinarySearchResultStruct = {
    prev: PromiseOrValue<BigNumberish>;
    next: PromiseOrValue<BigNumberish>;
  };

  export type BinarySearchResultStructOutput = [BigNumber, BigNumber] & {
    prev: BigNumber;
    next: BigNumber;
  };
}

export declare namespace IPriceOracle {
  export type OracleAccumulatorQueryStruct = {
    variable: PromiseOrValue<BigNumberish>;
    ago: PromiseOrValue<BigNumberish>;
  };

  export type OracleAccumulatorQueryStructOutput = [number, BigNumber] & {
    variable: number;
    ago: BigNumber;
  };

  export type OracleAverageQueryStruct = {
    variable: PromiseOrValue<BigNumberish>;
    secs: PromiseOrValue<BigNumberish>;
    ago: PromiseOrValue<BigNumberish>;
  };

  export type OracleAverageQueryStructOutput = [
    number,
    BigNumber,
    BigNumber
  ] & { variable: number; secs: BigNumber; ago: BigNumber };
}

export declare namespace MockWeightedPool2Tokens {
  export type MiscDataStruct = {
    logInvariant: PromiseOrValue<BigNumberish>;
    logTotalSupply: PromiseOrValue<BigNumberish>;
    oracleSampleCreationTimestamp: PromiseOrValue<BigNumberish>;
    oracleIndex: PromiseOrValue<BigNumberish>;
    oracleEnabled: PromiseOrValue<boolean>;
    swapFeePercentage: PromiseOrValue<BigNumberish>;
  };

  export type MiscDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    logInvariant: BigNumber;
    logTotalSupply: BigNumber;
    oracleSampleCreationTimestamp: BigNumber;
    oracleIndex: BigNumber;
    oracleEnabled: boolean;
    swapFeePercentage: BigNumber;
  };
}

export declare namespace IPoolSwapStructs {
  export type SwapRequestStruct = {
    kind: PromiseOrValue<BigNumberish>;
    tokenIn: PromiseOrValue<string>;
    tokenOut: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    poolId: PromiseOrValue<BytesLike>;
    lastChangeBlock: PromiseOrValue<BigNumberish>;
    from: PromiseOrValue<string>;
    to: PromiseOrValue<string>;
    userData: PromiseOrValue<BytesLike>;
  };

  export type SwapRequestStructOutput = [
    number,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    string
  ] & {
    kind: number;
    tokenIn: string;
    tokenOut: string;
    amount: BigNumber;
    poolId: string;
    lastChangeBlock: BigNumber;
    from: string;
    to: string;
    userData: string;
  };
}

export interface MockWeightedPool2TokensInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "calcLogBPTPrice(uint256,uint256,int256)": FunctionFragment;
    "calcLogSpotPrice(uint256,uint256,uint256,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decode(bytes32)": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "enableOracle()": FunctionFragment;
    "encode((int256,int256,int256,int256,int256,int256,uint256))": FunctionFragment;
    "findNearestSamplesTimestamp(uint256[],uint256)": FunctionFragment;
    "fromLowResLog(int256)": FunctionFragment;
    "getActionId(bytes4)": FunctionFragment;
    "getAuthorizer()": FunctionFragment;
    "getInvariant()": FunctionFragment;
    "getLargestSafeQueryWindow()": FunctionFragment;
    "getLastInvariant()": FunctionFragment;
    "getLatest(uint8)": FunctionFragment;
    "getMiscData()": FunctionFragment;
    "getNormalizedWeights()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "getPastAccumulator(uint8,uint256,uint256)": FunctionFragment;
    "getPastAccumulators((uint8,uint256)[])": FunctionFragment;
    "getPausedState()": FunctionFragment;
    "getPoolId()": FunctionFragment;
    "getRate()": FunctionFragment;
    "getSample(uint256)": FunctionFragment;
    "getSwapFeePercentage()": FunctionFragment;
    "getTimeWeightedAverage((uint8,uint256,uint256)[])": FunctionFragment;
    "getTotalSamples()": FunctionFragment;
    "getVault()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "mockMiscData((int256,int256,uint256,uint256,bool,uint256))": FunctionFragment;
    "mockOracleDisabled()": FunctionFragment;
    "mockOracleIndex(uint256)": FunctionFragment;
    "mockSample(uint256,(int256,int256,int256,int256,int256,int256,uint256))": FunctionFragment;
    "mockSamples(uint256[],(int256,int256,int256,int256,int256,int256,uint256)[])": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)": FunctionFragment;
    "onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)": FunctionFragment;
    "onSwap((uint8,address,address,uint256,bytes32,uint256,address,address,bytes),uint256,uint256)": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "processPriceData(uint256,uint256,int256,int256,int256)": FunctionFragment;
    "queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)": FunctionFragment;
    "queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)": FunctionFragment;
    "setPaused(bool)": FunctionFragment;
    "setSwapFeePercentage(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "toLowResLog(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "update(bytes32,int256,int256,int256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "calcLogBPTPrice"
      | "calcLogSpotPrice"
      | "decimals"
      | "decode"
      | "decreaseAllowance"
      | "enableOracle"
      | "encode"
      | "findNearestSamplesTimestamp"
      | "fromLowResLog"
      | "getActionId"
      | "getAuthorizer"
      | "getInvariant"
      | "getLargestSafeQueryWindow"
      | "getLastInvariant"
      | "getLatest"
      | "getMiscData"
      | "getNormalizedWeights"
      | "getOwner"
      | "getPastAccumulator"
      | "getPastAccumulators"
      | "getPausedState"
      | "getPoolId"
      | "getRate"
      | "getSample"
      | "getSwapFeePercentage"
      | "getTimeWeightedAverage"
      | "getTotalSamples"
      | "getVault"
      | "increaseAllowance"
      | "mockMiscData"
      | "mockOracleDisabled"
      | "mockOracleIndex"
      | "mockSample"
      | "mockSamples"
      | "name"
      | "nonces"
      | "onExitPool"
      | "onJoinPool"
      | "onSwap"
      | "permit"
      | "processPriceData"
      | "queryExit"
      | "queryJoin"
      | "setPaused"
      | "setSwapFeePercentage"
      | "symbol"
      | "toLowResLog"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "update"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "calcLogBPTPrice",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcLogSpotPrice",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decode",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "encode",
    values: [MockSamples.SampleStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "findNearestSamplesTimestamp",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fromLowResLog",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInvariant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLargestSafeQueryWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastInvariant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMiscData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNormalizedWeights",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPastAccumulator",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastAccumulators",
    values: [IPriceOracle.OracleAccumulatorQueryStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPausedState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPoolId", values?: undefined): string;
  encodeFunctionData(functionFragment: "getRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSample",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeWeightedAverage",
    values: [IPriceOracle.OracleAverageQueryStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSamples",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mockMiscData",
    values: [MockWeightedPool2Tokens.MiscDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mockOracleDisabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockOracleIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mockSample",
    values: [PromiseOrValue<BigNumberish>, MockSamples.SampleStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mockSamples",
    values: [PromiseOrValue<BigNumberish>[], MockSamples.SampleStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onExitPool",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onJoinPool",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onSwap",
    values: [
      IPoolSwapStructs.SwapRequestStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processPriceData",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryExit",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryJoin",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaused",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFeePercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toLowResLog",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcLogBPTPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcLogSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "encode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findNearestSamplesTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fromLowResLog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvariant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLargestSafeQueryWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastInvariant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLatest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMiscData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNormalizedWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPastAccumulator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastAccumulators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPausedState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSample", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSwapFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeWeightedAverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSamples",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockMiscData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockOracleDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockOracleIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mockSample", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mockSamples",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onExitPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onJoinPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processPriceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queryExit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queryJoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSwapFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toLowResLog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "OracleEnabledChanged(bool)": EventFragment;
    "PausedStateChanged(bool)": EventFragment;
    "PriceDataProcessed(bool,uint256)": EventFragment;
    "SwapFeePercentageChanged(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleEnabledChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausedStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceDataProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapFeePercentageChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface OracleEnabledChangedEventObject {
  enabled: boolean;
}
export type OracleEnabledChangedEvent = TypedEvent<
  [boolean],
  OracleEnabledChangedEventObject
>;

export type OracleEnabledChangedEventFilter =
  TypedEventFilter<OracleEnabledChangedEvent>;

export interface PausedStateChangedEventObject {
  paused: boolean;
}
export type PausedStateChangedEvent = TypedEvent<
  [boolean],
  PausedStateChangedEventObject
>;

export type PausedStateChangedEventFilter =
  TypedEventFilter<PausedStateChangedEvent>;

export interface PriceDataProcessedEventObject {
  newSample: boolean;
  sampleIndex: BigNumber;
}
export type PriceDataProcessedEvent = TypedEvent<
  [boolean, BigNumber],
  PriceDataProcessedEventObject
>;

export type PriceDataProcessedEventFilter =
  TypedEventFilter<PriceDataProcessedEvent>;

export interface SwapFeePercentageChangedEventObject {
  swapFeePercentage: BigNumber;
}
export type SwapFeePercentageChangedEvent = TypedEvent<
  [BigNumber],
  SwapFeePercentageChangedEventObject
>;

export type SwapFeePercentageChangedEventFilter =
  TypedEventFilter<SwapFeePercentageChangedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface MockWeightedPool2Tokens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockWeightedPool2TokensInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcLogBPTPrice(
      normalizedWeight: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      bptTotalSupplyLn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcLogSpotPrice(
      normalizedWeightA: PromiseOrValue<BigNumberish>,
      balanceA: PromiseOrValue<BigNumberish>,
      normalizedWeightB: PromiseOrValue<BigNumberish>,
      balanceB: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decode(
      sample: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[MockSamples.SampleStructOutput]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableOracle(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    encode(
      sample: MockSamples.SampleStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    findNearestSamplesTimestamp(
      dates: PromiseOrValue<BigNumberish>[],
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [MockPoolPriceOracle.BinarySearchResultStructOutput[]] & {
        results: MockPoolPriceOracle.BinarySearchResultStructOutput[];
      }
    >;

    fromLowResLog(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getActionId(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAuthorizer(overrides?: CallOverrides): Promise<[string]>;

    getInvariant(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLargestSafeQueryWindow(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastInvariant(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLatest(
      variable: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMiscData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        logInvariant: BigNumber;
        logTotalSupply: BigNumber;
        oracleSampleCreationTimestamp: BigNumber;
        oracleIndex: BigNumber;
        oracleEnabled: boolean;
        swapFeePercentage: BigNumber;
      }
    >;

    getNormalizedWeights(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getPastAccumulator(
      variable: PromiseOrValue<BigNumberish>,
      currentIndex: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPastAccumulators(
      queries: IPriceOracle.OracleAccumulatorQueryStruct[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { results: BigNumber[] }>;

    getPausedState(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        paused: boolean;
        pauseWindowEndTime: BigNumber;
        bufferPeriodEndTime: BigNumber;
      }
    >;

    getPoolId(overrides?: CallOverrides): Promise<[string]>;

    getRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSample(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        logPairPrice: BigNumber;
        accLogPairPrice: BigNumber;
        logBptPrice: BigNumber;
        accLogBptPrice: BigNumber;
        logInvariant: BigNumber;
        accLogInvariant: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getSwapFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTimeWeightedAverage(
      queries: IPriceOracle.OracleAverageQueryStruct[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { results: BigNumber[] }>;

    getTotalSamples(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVault(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mockMiscData(
      miscData: MockWeightedPool2Tokens.MiscDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mockOracleDisabled(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mockOracleIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mockSample(
      index: PromiseOrValue<BigNumberish>,
      sample: MockSamples.SampleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mockSamples(
      indexes: PromiseOrValue<BigNumberish>[],
      samples: MockSamples.SampleStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onExitPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onJoinPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onSwap(
      request: IPoolSwapStructs.SwapRequestStruct,
      balanceTokenIn: PromiseOrValue<BigNumberish>,
      balanceTokenOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processPriceData(
      elapsed: PromiseOrValue<BigNumberish>,
      currentIndex: PromiseOrValue<BigNumberish>,
      logPairPrice: PromiseOrValue<BigNumberish>,
      logBptPrice: PromiseOrValue<BigNumberish>,
      logInvariant: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    queryExit(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    queryJoin(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaused(
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSwapFeePercentage(
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toLowResLog(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    update(
      sample: PromiseOrValue<BytesLike>,
      logPairPrice: PromiseOrValue<BigNumberish>,
      logBptPrice: PromiseOrValue<BigNumberish>,
      logInvariant: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MockSamples.SampleStructOutput]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcLogBPTPrice(
    normalizedWeight: PromiseOrValue<BigNumberish>,
    balance: PromiseOrValue<BigNumberish>,
    bptTotalSupplyLn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcLogSpotPrice(
    normalizedWeightA: PromiseOrValue<BigNumberish>,
    balanceA: PromiseOrValue<BigNumberish>,
    normalizedWeightB: PromiseOrValue<BigNumberish>,
    balanceB: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decode(
    sample: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<MockSamples.SampleStructOutput>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableOracle(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  encode(
    sample: MockSamples.SampleStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  findNearestSamplesTimestamp(
    dates: PromiseOrValue<BigNumberish>[],
    offset: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MockPoolPriceOracle.BinarySearchResultStructOutput[]>;

  fromLowResLog(
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getActionId(
    selector: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAuthorizer(overrides?: CallOverrides): Promise<string>;

  getInvariant(overrides?: CallOverrides): Promise<BigNumber>;

  getLargestSafeQueryWindow(overrides?: CallOverrides): Promise<BigNumber>;

  getLastInvariant(overrides?: CallOverrides): Promise<BigNumber>;

  getLatest(
    variable: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMiscData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
      logInvariant: BigNumber;
      logTotalSupply: BigNumber;
      oracleSampleCreationTimestamp: BigNumber;
      oracleIndex: BigNumber;
      oracleEnabled: boolean;
      swapFeePercentage: BigNumber;
    }
  >;

  getNormalizedWeights(overrides?: CallOverrides): Promise<BigNumber[]>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  getPastAccumulator(
    variable: PromiseOrValue<BigNumberish>,
    currentIndex: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPastAccumulators(
    queries: IPriceOracle.OracleAccumulatorQueryStruct[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPausedState(
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      paused: boolean;
      pauseWindowEndTime: BigNumber;
      bufferPeriodEndTime: BigNumber;
    }
  >;

  getPoolId(overrides?: CallOverrides): Promise<string>;

  getRate(overrides?: CallOverrides): Promise<BigNumber>;

  getSample(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      logPairPrice: BigNumber;
      accLogPairPrice: BigNumber;
      logBptPrice: BigNumber;
      accLogBptPrice: BigNumber;
      logInvariant: BigNumber;
      accLogInvariant: BigNumber;
      timestamp: BigNumber;
    }
  >;

  getSwapFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  getTimeWeightedAverage(
    queries: IPriceOracle.OracleAverageQueryStruct[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTotalSamples(overrides?: CallOverrides): Promise<BigNumber>;

  getVault(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mockMiscData(
    miscData: MockWeightedPool2Tokens.MiscDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mockOracleDisabled(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mockOracleIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mockSample(
    index: PromiseOrValue<BigNumberish>,
    sample: MockSamples.SampleStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mockSamples(
    indexes: PromiseOrValue<BigNumberish>[],
    samples: MockSamples.SampleStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onExitPool(
    poolId: PromiseOrValue<BytesLike>,
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    balances: PromiseOrValue<BigNumberish>[],
    lastChangeBlock: PromiseOrValue<BigNumberish>,
    protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onJoinPool(
    poolId: PromiseOrValue<BytesLike>,
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    balances: PromiseOrValue<BigNumberish>[],
    lastChangeBlock: PromiseOrValue<BigNumberish>,
    protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onSwap(
    request: IPoolSwapStructs.SwapRequestStruct,
    balanceTokenIn: PromiseOrValue<BigNumberish>,
    balanceTokenOut: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processPriceData(
    elapsed: PromiseOrValue<BigNumberish>,
    currentIndex: PromiseOrValue<BigNumberish>,
    logPairPrice: PromiseOrValue<BigNumberish>,
    logBptPrice: PromiseOrValue<BigNumberish>,
    logInvariant: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  queryExit(
    poolId: PromiseOrValue<BytesLike>,
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    balances: PromiseOrValue<BigNumberish>[],
    lastChangeBlock: PromiseOrValue<BigNumberish>,
    protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  queryJoin(
    poolId: PromiseOrValue<BytesLike>,
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    balances: PromiseOrValue<BigNumberish>[],
    lastChangeBlock: PromiseOrValue<BigNumberish>,
    protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
    userData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaused(
    paused: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSwapFeePercentage(
    swapFeePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  toLowResLog(
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  update(
    sample: PromiseOrValue<BytesLike>,
    logPairPrice: PromiseOrValue<BigNumberish>,
    logBptPrice: PromiseOrValue<BigNumberish>,
    logInvariant: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MockSamples.SampleStructOutput>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcLogBPTPrice(
      normalizedWeight: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      bptTotalSupplyLn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcLogSpotPrice(
      normalizedWeightA: PromiseOrValue<BigNumberish>,
      balanceA: PromiseOrValue<BigNumberish>,
      normalizedWeightB: PromiseOrValue<BigNumberish>,
      balanceB: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decode(
      sample: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<MockSamples.SampleStructOutput>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enableOracle(overrides?: CallOverrides): Promise<void>;

    encode(
      sample: MockSamples.SampleStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    findNearestSamplesTimestamp(
      dates: PromiseOrValue<BigNumberish>[],
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MockPoolPriceOracle.BinarySearchResultStructOutput[]>;

    fromLowResLog(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActionId(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAuthorizer(overrides?: CallOverrides): Promise<string>;

    getInvariant(overrides?: CallOverrides): Promise<BigNumber>;

    getLargestSafeQueryWindow(overrides?: CallOverrides): Promise<BigNumber>;

    getLastInvariant(overrides?: CallOverrides): Promise<BigNumber>;

    getLatest(
      variable: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMiscData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        logInvariant: BigNumber;
        logTotalSupply: BigNumber;
        oracleSampleCreationTimestamp: BigNumber;
        oracleIndex: BigNumber;
        oracleEnabled: boolean;
        swapFeePercentage: BigNumber;
      }
    >;

    getNormalizedWeights(overrides?: CallOverrides): Promise<BigNumber[]>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    getPastAccumulator(
      variable: PromiseOrValue<BigNumberish>,
      currentIndex: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastAccumulators(
      queries: IPriceOracle.OracleAccumulatorQueryStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPausedState(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        paused: boolean;
        pauseWindowEndTime: BigNumber;
        bufferPeriodEndTime: BigNumber;
      }
    >;

    getPoolId(overrides?: CallOverrides): Promise<string>;

    getRate(overrides?: CallOverrides): Promise<BigNumber>;

    getSample(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        logPairPrice: BigNumber;
        accLogPairPrice: BigNumber;
        logBptPrice: BigNumber;
        accLogBptPrice: BigNumber;
        logInvariant: BigNumber;
        accLogInvariant: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getSwapFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    getTimeWeightedAverage(
      queries: IPriceOracle.OracleAverageQueryStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTotalSamples(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mockMiscData(
      miscData: MockWeightedPool2Tokens.MiscDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    mockOracleDisabled(overrides?: CallOverrides): Promise<void>;

    mockOracleIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mockSample(
      index: PromiseOrValue<BigNumberish>,
      sample: MockSamples.SampleStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    mockSamples(
      indexes: PromiseOrValue<BigNumberish>[],
      samples: MockSamples.SampleStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onExitPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    onJoinPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        amountsIn: BigNumber[];
        dueProtocolFeeAmounts: BigNumber[];
      }
    >;

    onSwap(
      request: IPoolSwapStructs.SwapRequestStruct,
      balanceTokenIn: PromiseOrValue<BigNumberish>,
      balanceTokenOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    processPriceData(
      elapsed: PromiseOrValue<BigNumberish>,
      currentIndex: PromiseOrValue<BigNumberish>,
      logPairPrice: PromiseOrValue<BigNumberish>,
      logBptPrice: PromiseOrValue<BigNumberish>,
      logInvariant: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    queryExit(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & { bptIn: BigNumber; amountsOut: BigNumber[] }
    >;

    queryJoin(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & { bptOut: BigNumber; amountsIn: BigNumber[] }
    >;

    setPaused(
      paused: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapFeePercentage(
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toLowResLog(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    update(
      sample: PromiseOrValue<BytesLike>,
      logPairPrice: PromiseOrValue<BigNumberish>,
      logBptPrice: PromiseOrValue<BigNumberish>,
      logInvariant: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MockSamples.SampleStructOutput>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "OracleEnabledChanged(bool)"(
      enabled?: null
    ): OracleEnabledChangedEventFilter;
    OracleEnabledChanged(enabled?: null): OracleEnabledChangedEventFilter;

    "PausedStateChanged(bool)"(paused?: null): PausedStateChangedEventFilter;
    PausedStateChanged(paused?: null): PausedStateChangedEventFilter;

    "PriceDataProcessed(bool,uint256)"(
      newSample?: null,
      sampleIndex?: null
    ): PriceDataProcessedEventFilter;
    PriceDataProcessed(
      newSample?: null,
      sampleIndex?: null
    ): PriceDataProcessedEventFilter;

    "SwapFeePercentageChanged(uint256)"(
      swapFeePercentage?: null
    ): SwapFeePercentageChangedEventFilter;
    SwapFeePercentageChanged(
      swapFeePercentage?: null
    ): SwapFeePercentageChangedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcLogBPTPrice(
      normalizedWeight: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      bptTotalSupplyLn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcLogSpotPrice(
      normalizedWeightA: PromiseOrValue<BigNumberish>,
      balanceA: PromiseOrValue<BigNumberish>,
      normalizedWeightB: PromiseOrValue<BigNumberish>,
      balanceB: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decode(
      sample: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableOracle(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    encode(
      sample: MockSamples.SampleStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findNearestSamplesTimestamp(
      dates: PromiseOrValue<BigNumberish>[],
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fromLowResLog(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActionId(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuthorizer(overrides?: CallOverrides): Promise<BigNumber>;

    getInvariant(overrides?: CallOverrides): Promise<BigNumber>;

    getLargestSafeQueryWindow(overrides?: CallOverrides): Promise<BigNumber>;

    getLastInvariant(overrides?: CallOverrides): Promise<BigNumber>;

    getLatest(
      variable: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMiscData(overrides?: CallOverrides): Promise<BigNumber>;

    getNormalizedWeights(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getPastAccumulator(
      variable: PromiseOrValue<BigNumberish>,
      currentIndex: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastAccumulators(
      queries: IPriceOracle.OracleAccumulatorQueryStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPausedState(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolId(overrides?: CallOverrides): Promise<BigNumber>;

    getRate(overrides?: CallOverrides): Promise<BigNumber>;

    getSample(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    getTimeWeightedAverage(
      queries: IPriceOracle.OracleAverageQueryStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSamples(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mockMiscData(
      miscData: MockWeightedPool2Tokens.MiscDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mockOracleDisabled(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mockOracleIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mockSample(
      index: PromiseOrValue<BigNumberish>,
      sample: MockSamples.SampleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mockSamples(
      indexes: PromiseOrValue<BigNumberish>[],
      samples: MockSamples.SampleStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onExitPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onJoinPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onSwap(
      request: IPoolSwapStructs.SwapRequestStruct,
      balanceTokenIn: PromiseOrValue<BigNumberish>,
      balanceTokenOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processPriceData(
      elapsed: PromiseOrValue<BigNumberish>,
      currentIndex: PromiseOrValue<BigNumberish>,
      logPairPrice: PromiseOrValue<BigNumberish>,
      logBptPrice: PromiseOrValue<BigNumberish>,
      logInvariant: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    queryExit(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    queryJoin(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaused(
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSwapFeePercentage(
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toLowResLog(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    update(
      sample: PromiseOrValue<BytesLike>,
      logPairPrice: PromiseOrValue<BigNumberish>,
      logBptPrice: PromiseOrValue<BigNumberish>,
      logInvariant: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcLogBPTPrice(
      normalizedWeight: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      bptTotalSupplyLn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcLogSpotPrice(
      normalizedWeightA: PromiseOrValue<BigNumberish>,
      balanceA: PromiseOrValue<BigNumberish>,
      normalizedWeightB: PromiseOrValue<BigNumberish>,
      balanceB: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decode(
      sample: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableOracle(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    encode(
      sample: MockSamples.SampleStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findNearestSamplesTimestamp(
      dates: PromiseOrValue<BigNumberish>[],
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fromLowResLog(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActionId(
      selector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuthorizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInvariant(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLargestSafeQueryWindow(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastInvariant(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLatest(
      variable: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMiscData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNormalizedWeights(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPastAccumulator(
      variable: PromiseOrValue<BigNumberish>,
      currentIndex: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPastAccumulators(
      queries: IPriceOracle.OracleAccumulatorQueryStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPausedState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSample(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapFeePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeWeightedAverage(
      queries: IPriceOracle.OracleAverageQueryStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalSamples(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mockMiscData(
      miscData: MockWeightedPool2Tokens.MiscDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mockOracleDisabled(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mockOracleIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mockSample(
      index: PromiseOrValue<BigNumberish>,
      sample: MockSamples.SampleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mockSamples(
      indexes: PromiseOrValue<BigNumberish>[],
      samples: MockSamples.SampleStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onExitPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onJoinPool(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onSwap(
      request: IPoolSwapStructs.SwapRequestStruct,
      balanceTokenIn: PromiseOrValue<BigNumberish>,
      balanceTokenOut: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processPriceData(
      elapsed: PromiseOrValue<BigNumberish>,
      currentIndex: PromiseOrValue<BigNumberish>,
      logPairPrice: PromiseOrValue<BigNumberish>,
      logBptPrice: PromiseOrValue<BigNumberish>,
      logInvariant: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    queryExit(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    queryJoin(
      poolId: PromiseOrValue<BytesLike>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      balances: PromiseOrValue<BigNumberish>[],
      lastChangeBlock: PromiseOrValue<BigNumberish>,
      protocolSwapFeePercentage: PromiseOrValue<BigNumberish>,
      userData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaused(
      paused: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSwapFeePercentage(
      swapFeePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toLowResLog(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    update(
      sample: PromiseOrValue<BytesLike>,
      logPairPrice: PromiseOrValue<BigNumberish>,
      logBptPrice: PromiseOrValue<BigNumberish>,
      logInvariant: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
