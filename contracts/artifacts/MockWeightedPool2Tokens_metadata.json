{
	"compiler": {
		"version": "0.7.6+commit.7338295f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "contract IVault",
								"name": "vault",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "symbol",
								"type": "string"
							},
							{
								"internalType": "contract IERC20",
								"name": "token0",
								"type": "address"
							},
							{
								"internalType": "contract IERC20",
								"name": "token1",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "normalizedWeight0",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "normalizedWeight1",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "swapFeePercentage",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "pauseWindowDuration",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "bufferPeriodDuration",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "oracleEnabled",
								"type": "bool"
							},
							{
								"internalType": "address",
								"name": "owner",
								"type": "address"
							}
						],
						"internalType": "struct WeightedPool2Tokens.NewPoolParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bool",
						"name": "enabled",
						"type": "bool"
					}
				],
				"name": "OracleEnabledChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bool",
						"name": "paused",
						"type": "bool"
					}
				],
				"name": "PausedStateChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bool",
						"name": "newSample",
						"type": "bool"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "sampleIndex",
						"type": "uint256"
					}
				],
				"name": "PriceDataProcessed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "swapFeePercentage",
						"type": "uint256"
					}
				],
				"name": "SwapFeePercentageChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DOMAIN_SEPARATOR",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "normalizedWeight",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "balance",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "bptTotalSupplyLn",
						"type": "int256"
					}
				],
				"name": "calcLogBPTPrice",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "normalizedWeightA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "balanceA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "normalizedWeightB",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "balanceB",
						"type": "uint256"
					}
				],
				"name": "calcLogSpotPrice",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "sample",
						"type": "bytes32"
					}
				],
				"name": "decode",
				"outputs": [
					{
						"components": [
							{
								"internalType": "int256",
								"name": "logPairPrice",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "accLogPairPrice",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "logBptPrice",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "accLogBptPrice",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "logInvariant",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "accLogInvariant",
								"type": "int256"
							},
							{
								"internalType": "uint256",
								"name": "timestamp",
								"type": "uint256"
							}
						],
						"internalType": "struct MockSamples.Sample",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "decreaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "enableOracle",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "int256",
								"name": "logPairPrice",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "accLogPairPrice",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "logBptPrice",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "accLogBptPrice",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "logInvariant",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "accLogInvariant",
								"type": "int256"
							},
							{
								"internalType": "uint256",
								"name": "timestamp",
								"type": "uint256"
							}
						],
						"internalType": "struct MockSamples.Sample",
						"name": "sample",
						"type": "tuple"
					}
				],
				"name": "encode",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[]",
						"name": "dates",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256",
						"name": "offset",
						"type": "uint256"
					}
				],
				"name": "findNearestSamplesTimestamp",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "prev",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "next",
								"type": "uint256"
							}
						],
						"internalType": "struct MockPoolPriceOracle.BinarySearchResult[]",
						"name": "results",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "int256",
						"name": "value",
						"type": "int256"
					}
				],
				"name": "fromLowResLog",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "selector",
						"type": "bytes4"
					}
				],
				"name": "getActionId",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAuthorizer",
				"outputs": [
					{
						"internalType": "contract IAuthorizer",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getInvariant",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getLargestSafeQueryWindow",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getLastInvariant",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "enum IPriceOracle.Variable",
						"name": "variable",
						"type": "uint8"
					}
				],
				"name": "getLatest",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getMiscData",
				"outputs": [
					{
						"internalType": "int256",
						"name": "logInvariant",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "logTotalSupply",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "oracleSampleCreationTimestamp",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "oracleIndex",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "oracleEnabled",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "swapFeePercentage",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getNormalizedWeights",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "enum IPriceOracle.Variable",
						"name": "variable",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "currentIndex",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "getPastAccumulator",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "enum IPriceOracle.Variable",
								"name": "variable",
								"type": "uint8"
							},
							{
								"internalType": "uint256",
								"name": "ago",
								"type": "uint256"
							}
						],
						"internalType": "struct IPriceOracle.OracleAccumulatorQuery[]",
						"name": "queries",
						"type": "tuple[]"
					}
				],
				"name": "getPastAccumulators",
				"outputs": [
					{
						"internalType": "int256[]",
						"name": "results",
						"type": "int256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getPausedState",
				"outputs": [
					{
						"internalType": "bool",
						"name": "paused",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "pauseWindowEndTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "bufferPeriodEndTime",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getPoolId",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "getSample",
				"outputs": [
					{
						"internalType": "int256",
						"name": "logPairPrice",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "accLogPairPrice",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "logBptPrice",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "accLogBptPrice",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "logInvariant",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "accLogInvariant",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getSwapFeePercentage",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "enum IPriceOracle.Variable",
								"name": "variable",
								"type": "uint8"
							},
							{
								"internalType": "uint256",
								"name": "secs",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "ago",
								"type": "uint256"
							}
						],
						"internalType": "struct IPriceOracle.OracleAverageQuery[]",
						"name": "queries",
						"type": "tuple[]"
					}
				],
				"name": "getTimeWeightedAverage",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "results",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getTotalSamples",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getVault",
				"outputs": [
					{
						"internalType": "contract IVault",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "addedValue",
						"type": "uint256"
					}
				],
				"name": "increaseAllowance",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "int256",
								"name": "logInvariant",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "logTotalSupply",
								"type": "int256"
							},
							{
								"internalType": "uint256",
								"name": "oracleSampleCreationTimestamp",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "oracleIndex",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "oracleEnabled",
								"type": "bool"
							},
							{
								"internalType": "uint256",
								"name": "swapFeePercentage",
								"type": "uint256"
							}
						],
						"internalType": "struct MockWeightedPool2Tokens.MiscData",
						"name": "miscData",
						"type": "tuple"
					}
				],
				"name": "mockMiscData",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "mockOracleDisabled",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "mockOracleIndex",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "int256",
								"name": "logPairPrice",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "accLogPairPrice",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "logBptPrice",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "accLogBptPrice",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "logInvariant",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "accLogInvariant",
								"type": "int256"
							},
							{
								"internalType": "uint256",
								"name": "timestamp",
								"type": "uint256"
							}
						],
						"internalType": "struct MockSamples.Sample",
						"name": "sample",
						"type": "tuple"
					}
				],
				"name": "mockSample",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256[]",
						"name": "indexes",
						"type": "uint256[]"
					},
					{
						"components": [
							{
								"internalType": "int256",
								"name": "logPairPrice",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "accLogPairPrice",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "logBptPrice",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "accLogBptPrice",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "logInvariant",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "accLogInvariant",
								"type": "int256"
							},
							{
								"internalType": "uint256",
								"name": "timestamp",
								"type": "uint256"
							}
						],
						"internalType": "struct MockSamples.Sample[]",
						"name": "samples",
						"type": "tuple[]"
					}
				],
				"name": "mockSamples",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "nonces",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "balances",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256",
						"name": "lastChangeBlock",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "protocolSwapFeePercentage",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "userData",
						"type": "bytes"
					}
				],
				"name": "onExitPool",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "balances",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256",
						"name": "lastChangeBlock",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "protocolSwapFeePercentage",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "userData",
						"type": "bytes"
					}
				],
				"name": "onJoinPool",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "amountsIn",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "dueProtocolFeeAmounts",
						"type": "uint256[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "enum IVault.SwapKind",
								"name": "kind",
								"type": "uint8"
							},
							{
								"internalType": "contract IERC20",
								"name": "tokenIn",
								"type": "address"
							},
							{
								"internalType": "contract IERC20",
								"name": "tokenOut",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							},
							{
								"internalType": "bytes32",
								"name": "poolId",
								"type": "bytes32"
							},
							{
								"internalType": "uint256",
								"name": "lastChangeBlock",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "from",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "to",
								"type": "address"
							},
							{
								"internalType": "bytes",
								"name": "userData",
								"type": "bytes"
							}
						],
						"internalType": "struct IPoolSwapStructs.SwapRequest",
						"name": "request",
						"type": "tuple"
					},
					{
						"internalType": "uint256",
						"name": "balanceTokenIn",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "balanceTokenOut",
						"type": "uint256"
					}
				],
				"name": "onSwap",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "permit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "elapsed",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "currentIndex",
						"type": "uint256"
					},
					{
						"internalType": "int256",
						"name": "logPairPrice",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "logBptPrice",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "logInvariant",
						"type": "int256"
					}
				],
				"name": "processPriceData",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "balances",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256",
						"name": "lastChangeBlock",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "protocolSwapFeePercentage",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "userData",
						"type": "bytes"
					}
				],
				"name": "queryExit",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "bptIn",
						"type": "uint256"
					},
					{
						"internalType": "uint256[]",
						"name": "amountsOut",
						"type": "uint256[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "poolId",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "balances",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256",
						"name": "lastChangeBlock",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "protocolSwapFeePercentage",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "userData",
						"type": "bytes"
					}
				],
				"name": "queryJoin",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "bptOut",
						"type": "uint256"
					},
					{
						"internalType": "uint256[]",
						"name": "amountsIn",
						"type": "uint256[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "paused",
						"type": "bool"
					}
				],
				"name": "setPaused",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "swapFeePercentage",
						"type": "uint256"
					}
				],
				"name": "setSwapFeePercentage",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "toLowResLog",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "sample",
						"type": "bytes32"
					},
					{
						"internalType": "int256",
						"name": "logPairPrice",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "logBptPrice",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "logInvariant",
						"type": "int256"
					},
					{
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "update",
				"outputs": [
					{
						"components": [
							{
								"internalType": "int256",
								"name": "logPairPrice",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "accLogPairPrice",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "logBptPrice",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "accLogBptPrice",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "logInvariant",
								"type": "int256"
							},
							{
								"internalType": "int256",
								"name": "accLogInvariant",
								"type": "int256"
							},
							{
								"internalType": "uint256",
								"name": "timestamp",
								"type": "uint256"
							}
						],
						"internalType": "struct MockSamples.Sample",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"DOMAIN_SEPARATOR()": {
					"details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
				},
				"allowance(address,address)": {
					"details": "See {IERC20-allowance}."
				},
				"approve(address,uint256)": {
					"details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
				},
				"balanceOf(address)": {
					"details": "See {IERC20-balanceOf}."
				},
				"decimals()": {
					"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
				},
				"decreaseAllowance(address,uint256)": {
					"details": "Override to allow decreasing allowance by more than the current amount (setting it to zero)"
				},
				"enableOracle()": {
					"details": "Balancer Governance can always enable the Oracle, even if it was originally not enabled. This allows for Pools that unexpectedly drive much more volume and liquidity than expected to serve as Price Oracles. Note that the Oracle can only be enabled - it can never be disabled."
				},
				"getActionId(bytes4)": {
					"details": "Returns the action identifier associated with the external function described by `selector`."
				},
				"getInvariant()": {
					"details": "Returns the current value of the invariant."
				},
				"getLargestSafeQueryWindow()": {
					"details": "Returns largest time window that can be safely queried, where 'safely' means the Oracle is guaranteed to be able to produce a result and not revert. If a query has a non-zero `ago` value, then `secs + ago` (the oldest point in time) must be smaller than this value for 'safe' queries."
				},
				"getLatest(uint8)": {
					"details": "Returns latest sample of `variable`. Prices are represented as 18 decimal fixed point values."
				},
				"getPastAccumulators((uint8,uint256)[])": {
					"details": "Returns the accumulators corresponding to each of `queries`."
				},
				"getPausedState()": {
					"details": "Returns the current contract pause status, as well as the end times of the Pause Window and Buffer Period."
				},
				"getRate()": {
					"details": "This function returns the appreciation of one BPT relative to the underlying tokens. This starts at 1 when the pool is created and grows over time"
				},
				"getSample(uint256)": {
					"details": "Returns the raw data of the sample at `index`."
				},
				"getTimeWeightedAverage((uint8,uint256,uint256)[])": {
					"details": "Returns the time average weighted price corresponding to each of `queries`. Prices are represented as 18 decimal fixed point values."
				},
				"getTotalSamples()": {
					"details": "Returns the total number of samples."
				},
				"increaseAllowance(address,uint256)": {
					"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
				},
				"name()": {
					"details": "Returns the name of the token."
				},
				"nonces(address)": {
					"details": "See {IERC20Permit-nonces}."
				},
				"onExitPool(bytes32,address,address,uint256[],uint256,uint256,bytes)": {
					"details": "Called by the Vault when a user calls `IVault.exitPool` to remove liquidity from this Pool. Returns how many tokens the Vault should deduct from the Pool's balances, as well as the amount of protocol fees the Pool owes to the Vault. The Vault will then take tokens from the Pool's balances and send them to `recipient`, as well as collect the reported amount in protocol fees, which the Pool should calculate based on `protocolSwapFeePercentage`. Protocol fees are charged on exit events to guarantee that users exiting the Pool have paid their share. `sender` is the account performing the exit (typically the pool shareholder), and `recipient` is the account to which the Vault will send the proceeds. `balances` contains the total token balances for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return. `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total balance. `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of exit (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.) Contracts implementing this function should check that the caller is indeed the Vault before performing any state-changing operations, such as burning pool shares."
				},
				"onJoinPool(bytes32,address,address,uint256[],uint256,uint256,bytes)": {
					"details": "Called by the Vault when a user calls `IVault.joinPool` to add liquidity to this Pool. Returns how many of each registered token the user should provide, as well as the amount of protocol fees the Pool owes to the Vault. The Vault will then take tokens from `sender` and add them to the Pool's balances, as well as collect the reported amount in protocol fees, which the pool should calculate based on `protocolSwapFeePercentage`. Protocol fees are reported and charged on join events so that the Pool is free of debt whenever new users join. `sender` is the account performing the join (from which tokens will be withdrawn), and `recipient` is the account designated to receive any benefits (typically pool shares). `balances` contains the total balances for each token the Pool registered in the Vault, in the same order that `IVault.getPoolTokens` would return. `lastChangeBlock` is the last block in which *any* of the Pool's registered tokens last changed its total balance. `userData` contains any pool-specific instructions needed to perform the calculations, such as the type of join (e.g., proportional given an amount of pool shares, single-asset, multi-asset, etc.) Contracts implementing this function should check that the caller is indeed the Vault before performing any state-changing operations, such as minting pool shares."
				},
				"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
					"details": "See {IERC20Permit-permit}."
				},
				"queryExit(bytes32,address,address,uint256[],uint256,uint256,bytes)": {
					"details": "Returns the amount of BPT that would be burned from `sender` if the `onExitPool` hook were called by the Vault with the same arguments, along with the number of tokens `recipient` would receive. This function is not meant to be called directly, but rather from a helper contract that fetches current Vault data, such as the protocol swap fee percentage and Pool balances. Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must explicitly use eth_call instead of eth_sendTransaction."
				},
				"queryJoin(bytes32,address,address,uint256[],uint256,uint256,bytes)": {
					"details": "Returns the amount of BPT that would be granted to `recipient` if the `onJoinPool` hook were called by the Vault with the same arguments, along with the number of tokens `sender` would have to supply. This function is not meant to be called directly, but rather from a helper contract that fetches current Vault data, such as the protocol swap fee percentage and Pool balances. Like `IVault.queryBatchSwap`, this function is not view due to internal implementation details: the caller must explicitly use eth_call instead of eth_sendTransaction."
				},
				"symbol()": {
					"details": "Returns the symbol of the token, usually a shorter version of the name."
				},
				"totalSupply()": {
					"details": "See {IERC20-totalSupply}."
				},
				"transfer(address,uint256)": {
					"details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
				},
				"transferFrom(address,address,uint256)": {
					"details": "Override to allow for 'infinite allowance' and let the token owner use `transferFrom` with no self-allowance"
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/NoProtocolFeeLiquidityBootstrappingPoolFactory.sol": "MockWeightedPool2Tokens"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/NoProtocolFeeLiquidityBootstrappingPoolFactory.sol": {
			"keccak256": "0xf7d653f766e0c3e564f45bab629066b8d255570d61e01c3a046418ad27c249b4",
			"urls": [
				"bzz-raw://4a7bb57f05136be0fa4e231afa0fcef6084671485489d742b795d67b89365cf9",
				"dweb:/ipfs/Qmd1EJ6SfMiK9wi2NkeBrHwwqdsenDaCAVgtXf7fR28Z5V"
			]
		}
	},
	"version": 1
}