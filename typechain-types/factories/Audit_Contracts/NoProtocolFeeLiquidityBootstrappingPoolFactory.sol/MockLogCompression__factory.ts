/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockLogCompression,
  MockLogCompressionInterface,
} from "../../../Audit_Contracts/NoProtocolFeeLiquidityBootstrappingPoolFactory.sol/MockLogCompression";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "value",
        type: "int256",
      },
    ],
    name: "fromLowResLog",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "toLowResLog",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a92806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806357aad0131461003b578063abb9d0d514610064575b600080fd5b61004e610049366004610a3b565b610077565b60405161005b9190610a53565b60405180910390f35b61004e610072366004610a3b565b61008a565b600061008282610095565b90505b919050565b6000610082826100d5565b6000806100a1836100e8565b905060008082136100ba57652d79883d200082036100c4565b652d79883d200082015b655af3107a40009005949350505050565b6000610082655af3107a4000830261014c565b60006100f860008313606461051f565b670c7d713b49da0000821380156101165750670f43fc2c04ee000082125b1561013c57670de0b6b3a764000061012d83610531565b8161013457fe5b059050610085565b6101458261064f565b9050610085565b600061017b680238fd42c5cf03ffff198312158015610174575068070c1cc73b00c800008313155b600961051f565b60008212156101a6576101908260000361014c565b6a0c097ce7bc90715b34b9f160241b8161013457fe5b60006806f05b59d3b200000083126101e457506806f05b59d3b1ffffff199091019072195e54c5dd42177f53a27172fa9ec63026282760241b61021a565b6803782dace9d9000000831261021657506803782dace9d8ffffff19909101906b1425982cf597cd205cef738061021a565b5060015b6064929092029168056bc75e2d6310000068ad78ebc5ac62000000841261026a5768ad78ebc5ac61ffffff199093019268056bc75e2d631000006e01855144814a7ff805980ff008400082020590505b6856bc75e2d63100000084126102a6576856bc75e2d630ffffff199093019268056bc75e2d631000006b02df0ab5a80a22c61ab5a70082020590505b682b5e3af16b1880000084126102e057682b5e3af16b187fffff199093019268056bc75e2d63100000693f1fce3da636ea5cf85082020590505b6815af1d78b58c400000841261031a576815af1d78b58c3fffff199093019268056bc75e2d63100000690127fa27722cc06cc5e282020590505b680ad78ebc5ac6200000841261035357680ad78ebc5ac61fffff199093019268056bc75e2d6310000068280e60114edb805d0382020590505b68056bc75e2d63100000841261038c5768056bc75e2d630fffff199093019268056bc75e2d63100000680ebc5fb4174612111082020590505b6802b5e3af16b188000084126103c5576802b5e3af16b187ffff199093019268056bc75e2d631000006808f00f760a4b2db55d82020590505b68015af1d78b58c4000084126103fe5768015af1d78b58c3ffff199093019268056bc75e2d631000006806f5f177578893793782020590505b68056bc75e2d631000008481019085906002908280020505918201919050600368056bc75e2d631000008783020505918201919050600468056bc75e2d631000008783020505918201919050600568056bc75e2d631000008783020505918201919050600668056bc75e2d631000008783020505918201919050600768056bc75e2d631000008783020505918201919050600868056bc75e2d631000008783020505918201919050600968056bc75e2d631000008783020505918201919050600a68056bc75e2d631000008783020505918201919050600b68056bc75e2d631000008783020505918201919050600c68056bc75e2d631000008783020505918201919050606468056bc75e2d63100000848402058502059695505050505050565b8161052d5761052d816109e8565b5050565b670de0b6b3a7640000026000806a0c097ce7bc90715b34b9f160241b808401906ec097ce7bc90715b34b9f0fffffffff198501028161056c57fe5b05905060006a0c097ce7bc90715b34b9f160241b82800205905081806a0c097ce7bc90715b34b9f160241b81840205915060038205016a0c097ce7bc90715b34b9f160241b82840205915060058205016a0c097ce7bc90715b34b9f160241b82840205915060078205016a0c097ce7bc90715b34b9f160241b82840205915060098205016a0c097ce7bc90715b34b9f160241b828402059150600b8205016a0c097ce7bc90715b34b9f160241b828402059150600d8205016a0c097ce7bc90715b34b9f160241b828402059150600f826002919005919091010295945050505050565b6000670de0b6b3a764000082121561068b57610681826a0c097ce7bc90715b34b9f160241b8161067b57fe5b0561064f565b6000039050610085565b6000775803bcc5cb9634ba4cfb2213f784019318ed4dcb6017880f60361b83126106d65772195e54c5dd42177f53a27172fa9ec63026282760241b830592506806f05b59d3b2000000015b73011798004d755d3c8bc8e03204cf44619e000000831261070e576b1425982cf597cd205cef7380830592506803782dace9d9000000015b606492830292026e01855144814a7ff805980ff00840008312610756576e01855144814a7ff805980ff008400068056bc75e2d63100000840205925068ad78ebc5ac62000000015b6b02df0ab5a80a22c61ab5a7008312610791576b02df0ab5a80a22c61ab5a70068056bc75e2d6310000084020592506856bc75e2d631000000015b693f1fce3da636ea5cf85083126107c857693f1fce3da636ea5cf85068056bc75e2d631000008402059250682b5e3af16b18800000015b690127fa27722cc06cc5e283126107ff57690127fa27722cc06cc5e268056bc75e2d6310000084020592506815af1d78b58c400000015b68280e60114edb805d0383126108345768280e60114edb805d0368056bc75e2d631000008402059250680ad78ebc5ac6200000015b680ebc5fb41746121110831261085f57680ebc5fb4174612111068056bc75e2d631000009384020592015b6808f00f760a4b2db55d8312610894576808f00f760a4b2db55d68056bc75e2d6310000084020592506802b5e3af16b1880000015b6806f5f177578893793783126108c9576806f5f177578893793768056bc75e2d63100000840205925068015af1d78b58c40000015b6806248f33704b28660383126108fd576806248f33704b28660368056bc75e2d63100000840205925067ad78ebc5ac620000015b6805c548670b9510e7ac8312610931576805c548670b9510e7ac68056bc75e2d6310000084020592506756bc75e2d6310000015b600068056bc75e2d63100000840168056bc75e2d63100000808603028161095457fe5b059050600068056bc75e2d63100000828002059050818068056bc75e2d63100000818402059150600382050168056bc75e2d63100000828402059150600582050168056bc75e2d63100000828402059150600782050168056bc75e2d63100000828402059150600982050168056bc75e2d63100000828402059150600b820501600202606485820105979650505050505050565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b600060208284031215610a4c578081fd5b5035919050565b9081526020019056fea264697066735822122086b2f1ab4e3afa6c527ec5be6bf77ac4e1a6af145f02864c7b83469baae689a764736f6c63430007060033";

type MockLogCompressionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockLogCompressionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockLogCompression__factory extends ContractFactory {
  constructor(...args: MockLogCompressionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockLogCompression> {
    return super.deploy(overrides || {}) as Promise<MockLogCompression>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockLogCompression {
    return super.attach(address) as MockLogCompression;
  }
  override connect(signer: Signer): MockLogCompression__factory {
    return super.connect(signer) as MockLogCompression__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockLogCompressionInterface {
    return new utils.Interface(_abi) as MockLogCompressionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockLogCompression {
    return new Contract(address, _abi, signerOrProvider) as MockLogCompression;
  }
}
