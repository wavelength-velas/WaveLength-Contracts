/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace MockSamples {
  export type SampleStruct = {
    logPairPrice: PromiseOrValue<BigNumberish>;
    accLogPairPrice: PromiseOrValue<BigNumberish>;
    logBptPrice: PromiseOrValue<BigNumberish>;
    accLogBptPrice: PromiseOrValue<BigNumberish>;
    logInvariant: PromiseOrValue<BigNumberish>;
    accLogInvariant: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type SampleStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    logPairPrice: BigNumber;
    accLogPairPrice: BigNumber;
    logBptPrice: BigNumber;
    accLogBptPrice: BigNumber;
    logInvariant: BigNumber;
    accLogInvariant: BigNumber;
    timestamp: BigNumber;
  };
}

export interface MockSamplesInterface extends utils.Interface {
  functions: {
    "decode(bytes32)": FunctionFragment;
    "encode((int256,int256,int256,int256,int256,int256,uint256))": FunctionFragment;
    "update(bytes32,int256,int256,int256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "decode" | "encode" | "update"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "decode",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "encode",
    values: [MockSamples.SampleStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "decode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "encode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {};
}

export interface MockSamples extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockSamplesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decode(
      sample: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[MockSamples.SampleStructOutput]>;

    encode(
      sample: MockSamples.SampleStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    update(
      sample: PromiseOrValue<BytesLike>,
      logPairPrice: PromiseOrValue<BigNumberish>,
      logBptPrice: PromiseOrValue<BigNumberish>,
      logInvariant: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MockSamples.SampleStructOutput]>;
  };

  decode(
    sample: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<MockSamples.SampleStructOutput>;

  encode(
    sample: MockSamples.SampleStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  update(
    sample: PromiseOrValue<BytesLike>,
    logPairPrice: PromiseOrValue<BigNumberish>,
    logBptPrice: PromiseOrValue<BigNumberish>,
    logInvariant: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MockSamples.SampleStructOutput>;

  callStatic: {
    decode(
      sample: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<MockSamples.SampleStructOutput>;

    encode(
      sample: MockSamples.SampleStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    update(
      sample: PromiseOrValue<BytesLike>,
      logPairPrice: PromiseOrValue<BigNumberish>,
      logBptPrice: PromiseOrValue<BigNumberish>,
      logInvariant: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MockSamples.SampleStructOutput>;
  };

  filters: {};

  estimateGas: {
    decode(
      sample: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encode(
      sample: MockSamples.SampleStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    update(
      sample: PromiseOrValue<BytesLike>,
      logPairPrice: PromiseOrValue<BigNumberish>,
      logBptPrice: PromiseOrValue<BigNumberish>,
      logInvariant: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decode(
      sample: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encode(
      sample: MockSamples.SampleStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    update(
      sample: PromiseOrValue<BytesLike>,
      logPairPrice: PromiseOrValue<BigNumberish>,
      logBptPrice: PromiseOrValue<BigNumberish>,
      logInvariant: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
