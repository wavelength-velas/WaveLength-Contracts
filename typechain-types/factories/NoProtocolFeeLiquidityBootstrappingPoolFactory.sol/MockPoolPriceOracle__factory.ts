/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MockPoolPriceOracle,
  MockPoolPriceOracleInterface,
} from "../../NoProtocolFeeLiquidityBootstrappingPoolFactory.sol/MockPoolPriceOracle";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "newSample",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sampleIndex",
        type: "uint256",
      },
    ],
    name: "PriceDataProcessed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "sample",
        type: "bytes32",
      },
    ],
    name: "decode",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct MockSamples.Sample",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct MockSamples.Sample",
        name: "sample",
        type: "tuple",
      },
    ],
    name: "encode",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "dates",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
    ],
    name: "findNearestSamplesTimestamp",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "prev",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "next",
            type: "uint256",
          },
        ],
        internalType: "struct MockPoolPriceOracle.BinarySearchResult[]",
        name: "results",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPriceOracle.Variable",
        name: "variable",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "currentIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "getPastAccumulator",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getSample",
    outputs: [
      {
        internalType: "int256",
        name: "logPairPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "accLogPairPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logBptPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "accLogBptPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logInvariant",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "accLogInvariant",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalSamples",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct MockSamples.Sample",
        name: "sample",
        type: "tuple",
      },
    ],
    name: "mockSample",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "indexes",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct MockSamples.Sample[]",
        name: "samples",
        type: "tuple[]",
      },
    ],
    name: "mockSamples",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "elapsed",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentIndex",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "logPairPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logBptPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logInvariant",
        type: "int256",
      },
    ],
    name: "processPriceData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "sample",
        type: "bytes32",
      },
      {
        internalType: "int256",
        name: "logPairPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logBptPrice",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "logInvariant",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "update",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "logPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogPairPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogBptPrice",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "logInvariant",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "accLogInvariant",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct MockSamples.Sample",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e8b806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063c3748ef111610066578063c3748ef114610122578063d437680414610142578063d5125db614610162578063e5fe5f3c14610175578063ff7b6f1e146101885761009e565b8063259efd16146100a3578063264959fb146100b85780633d48f8c1146100e157806360d1507c146100f4578063b48b5b401461011a575b600080fd5b6100b66100b1366004610d00565b61019b565b005b6100cb6100c6366004610cae565b6101ba565b6040516100d89190610d8c565b60405180910390f35b6100cb6100ef366004610ce5565b6101d3565b610107610102366004610c5c565b610206565b6040516100d89796959493929190610d95565b6100cb61024f565b610135610130366004610c5c565b610255565b6040516100d89190610dc5565b610155610150366004610c19565b6102da565b6040516100d89190610d2d565b6100b6610170366004610c74565b6103ae565b6100b6610183366004610b54565b610408565b610135610196366004610c74565b610451565b6101a4816101d3565b6000928352602083905260409092209190915550565b60006101c9848484420361047e565b90505b9392505050565b6000610200826000015183602001518460400151856060015186608001518760a001518860c001516105c4565b92915050565b6000806000806000806000610221610400891061013b610624565b600061022c89610636565b905061023781610648565b959f949e50929c50909a509850965090945092505050565b61040090565b61025d610a14565b6040805160e08101909152806102748460006106ab565b81526020016102848460006106f6565b81526020016102948460016106ab565b81526020016102a48460016106f6565b81526020016102b48460026106ab565b81526020016102c48460026106f6565b81526020016102d28461073a565b905292915050565b6060825167ffffffffffffffff811180156102f457600080fd5b5060405190808252806020026020018201604052801561032e57816020015b61031b610a51565b8152602001906001900390816103135790505b50905060005b83518110156103a75760008061035d86848151811061034f57fe5b602002602001015186610746565b9150915060405180604001604052806103758461073a565b81526020016103838361073a565b81525084848151811061039257fe5b60209081029190910101525050600101610334565b5092915050565b4285900360006103c182878787876107f9565b90507fa7f3e984c65d79d0fa58244dddb6522f661c9dea23fe4940801cbfe08810750686821415826040516103f7929190610d7c565b60405180910390a150505050505050565b60005b825181101561044c5761044483828151811061042357fe5b602002602001015183838151811061043757fe5b602002602001015161019b565b60010161040b565b505050565b610459610a14565b60006104688787878787610850565b905061047381610255565b979650505050505050565b600061048f82421015610138610624565b42829003600061049e85610636565b905060006104ab8261073a565b90506104bc60008211610139610624565b8281116104e857808303806104d1848a6106ab565b026104dc848a6106f6565b019450505050506101cc565b60006104f3876108b0565b9050600061050082610636565b9050600061050d8261073a565b905061051e60008211610139610624565b61052d8682111561013a610624565b505060008061053c8684610746565b91509150600061054b8361073a565b6105548361073a565b03905080156105ac576000610569848d6106f6565b610573848e6106f6565b03905060006105818561073a565b89039050828183028161059057fe5b0561059b868f6106f6565b0199505050505050505050506101cc565b6105b6838c6106f6565b9750505050505050506101cc565b60006105d082826108bd565b6105db84601f6108c1565b6105e68660546108d2565b6105f188606a6108c1565b6105fc8a609f6108d2565b6106078c60b56108c1565b6106128e60ea6108d2565b17171717171798975050505050505050565b8161063257610632816108df565b5050565b60009081526020819052604090205490565b600080600080600080600061065c88610932565b96506106678861093f565b95506106728861094c565b945061067d88610959565b935061068888610966565b925061069388610973565b915061069e8861073a565b9050919395979092949650565b6000808260028111156106ba57fe5b14156106d0576106c983610932565b9050610200565b60018260028111156106de57fe5b14156106ed576106c98361094c565b6106c983610966565b60008082600281111561070557fe5b1415610714576106c98361093f565b600182600281111561072257fe5b1415610731576106c983610959565b6106c983610973565b60006102008282610980565b600080806103ff8180805b8385116107bd57600285850104610768818a61098a565b935061077384610636565b925061077e8361073a565b915089821015610793578060010195506107b7565b898211156107a6576001810394506107b7565b8283975097505050505050506107f2565b50610751565b8881106107db576107d56107d08461099b565b610636565b826107e8565b816107e86107d0856108b0565b9650965050505050505b9250929050565b6000806108158585854261080c8b610636565b93929190610850565b905060784288900310158061082a5786610833565b610833876108b0565b600081815260208190526040902092909255509695505050505050565b60008061085c8761073a565b83039050600081870261086e8961093f565b019050600082870261087f8a610959565b01905060008387026108908b610973565b0190506108a289848a858b868c6105c4565b9a9950505050505050505050565b600061020082600161098a565b1b90565b661fffffffffffff91909116901b90565b623fffff91909116901b90565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60006102008260ea6109a8565b60006102008260b56109d2565b600061020082609f6109a8565b600061020082606a6109d2565b60006102008260546109a8565b600061020082601f6109d2565b1c637fffffff1690565b60006104008383015b069392505050565b6000610200826001610a05565b600082821c623fffff16621fffff81136109c257806109ca565b623fffff1981175b949350505050565b600082821c661fffffffffffff16660fffffffffffff81136109f457806109ca565b661fffffffffffff19179392505050565b60006104008284038101610993565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b600082601f830112610a7b578081fd5b81356020610a90610a8b83610e37565b610e13565b8281528181019085830183850287018401881015610aac578586fd5b855b85811015610aca57813584529284019290840190600101610aae565b5090979650505050505050565b600060e08284031215610ae8578081fd5b60405160e0810181811067ffffffffffffffff82111715610b0557fe5b8060405250809150823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201525092915050565b60008060408385031215610b66578182fd5b823567ffffffffffffffff80821115610b7d578384fd5b610b8986838701610a6b565b9350602091508185013581811115610b9f578384fd5b85019050601f81018613610bb1578283fd5b8035610bbf610a8b82610e37565b8181528381019083850160e0808502860187018b1015610bdd578788fd5b8795505b84861015610c0957610bf38b83610ad7565b8452600195909501949286019290810190610be1565b5096999098509650505050505050565b60008060408385031215610c2b578182fd5b823567ffffffffffffffff811115610c41578283fd5b610c4d85828601610a6b565b95602094909401359450505050565b600060208284031215610c6d578081fd5b5035919050565b600080600080600060a08688031215610c8b578081fd5b505083359560208501359550604085013594606081013594506080013592509050565b600080600060608486031215610cc2578283fd5b833560038110610cd0578384fd5b95602085013595506040909401359392505050565b600060e08284031215610cf6578081fd5b6101cc8383610ad7565b6000806101008385031215610d13578182fd5b82359150610d248460208501610ad7565b90509250929050565b602080825282518282018190526000919060409081850190868401855b82811015610d6f57815180518552860151868501529284019290850190600101610d4a565b5091979650505050505050565b9115158252602082015260400190565b90815260200190565b968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b60405181810167ffffffffffffffff81118282101715610e2f57fe5b604052919050565b600067ffffffffffffffff821115610e4b57fe5b506020908102019056fea26469706673582212205f48655763168936a1eaf30fe97a020c2722f896c1100416c93ef995ae8dbc3d64736f6c63430007060033";

type MockPoolPriceOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPoolPriceOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockPoolPriceOracle__factory extends ContractFactory {
  constructor(...args: MockPoolPriceOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockPoolPriceOracle> {
    return super.deploy(overrides || {}) as Promise<MockPoolPriceOracle>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockPoolPriceOracle {
    return super.attach(address) as MockPoolPriceOracle;
  }
  override connect(signer: Signer): MockPoolPriceOracle__factory {
    return super.connect(signer) as MockPoolPriceOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPoolPriceOracleInterface {
    return new utils.Interface(_abi) as MockPoolPriceOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockPoolPriceOracle {
    return new Contract(address, _abi, signerOrProvider) as MockPoolPriceOracle;
  }
}
