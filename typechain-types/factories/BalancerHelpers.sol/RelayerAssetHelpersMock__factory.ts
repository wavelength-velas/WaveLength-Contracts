/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  RelayerAssetHelpersMock,
  RelayerAssetHelpersMockInterface,
} from "../../BalancerHelpers.sol/RelayerAssetHelpersMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IVault",
        name: "vault",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approveToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getVault",
    outputs: [
      {
        internalType: "contract IVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "pullToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "pullTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sweepETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161095c38038061095c83398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c6108c9610093600039806061528061015552506108c96000f3fe60806040526004361061004e5760003560e01c80632e144579146100915780638d928af8146100b1578063c553f733146100dc578063d47f6877146100fc578063da3e3397146101115761008c565b3661008c5761008a336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610206610131565b005b600080fd5b34801561009d57600080fd5b5061008a6100ac3660046106ef565b610143565b3480156100bd57600080fd5b506100c6610153565b6040516100d3919061082a565b60405180910390f35b3480156100e857600080fd5b5061008a6100f736600461061c565b610177565b34801561010857600080fd5b5061008a610182565b34801561011d57600080fd5b5061008a61012c3660046106ef565b61018c565b8161013f5761013f81610197565b5050565b61014e8383836101ea565b505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b61014e83838361028d565b61018a6103e4565b565b61014e8383836103f8565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b806101f45761014e565b60408051600180825281830190925260009160208083019080368337019050509050828160008151811061022457fe5b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050828160008151811061026f57fe5b60200260200101818152505061028685838361028d565b5050505050565b600082516001600160401b03811180156102a657600080fd5b506040519080825280602002602001820160405280156102e057816020015b6102cd610580565b8152602001906001900390816102c55790505b50905060005b8351811015610378576040805160a08101909152806003815260200185838151811061030e57fe5b60200260200101516001600160a01b0316815260200184838151811061033057fe5b60200260200101518152602001866001600160a01b03168152602001306001600160a01b031681525082828151811061036557fe5b60209081029190910101526001016102e6565b50610381610153565b6001600160a01b0316630e8e3e84826040518263ffffffff1660e01b81526004016103ac91906107a4565b600060405180830381600087803b1580156103c657600080fd5b505af11580156103da573d6000803e3d6000fd5b5050505050505050565b4780156103f5576103f53382610506565b50565b604051636eb1769f60e11b815281906001600160a01b0385169063dd62ed3e906104289030908790600401610771565b60206040518083038186803b15801561044057600080fd5b505afa158015610454573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104789190610756565b101561014e5760405163095ea7b360e01b81526001600160a01b0384169063095ea7b3906104ae9085906000199060040161078b565b602060405180830381600087803b1580156104c857600080fd5b505af11580156104dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610500919061072f565b50505050565b610515814710156101a3610131565b6000826001600160a01b03168260405161052e9061076e565b60006040518083038185875af1925050503d806000811461056b576040519150601f19603f3d011682016040523d82523d6000602084013e610570565b606091505b5050905061014e816101a4610131565b6040805160a081019091528060008152600060208201819052604082018190526060820181905260809091015290565b600082601f8301126105c0578081fd5b813560206105d56105d083610861565b61083e565b82815281810190858301838502870184018810156105f1578586fd5b855b8581101561060f578135845292840192908401906001016105f3565b5090979650505050505050565b600080600060608486031215610630578283fd5b833561063b8161087e565b92506020848101356001600160401b0380821115610657578485fd5b818701915087601f83011261066a578485fd5b81356106786105d082610861565b81815284810190848601868402860187018c1015610694578889fd5b8895505b838610156106bf5780356106ab8161087e565b835260019590950194918601918601610698565b509650505060408701359250808311156106d7578384fd5b50506106e5868287016105b0565b9150509250925092565b600080600060608486031215610703578283fd5b833561070e8161087e565b9250602084013561071e8161087e565b929592945050506040919091013590565b600060208284031215610740578081fd5b8151801515811461074f578182fd5b9392505050565b600060208284031215610767578081fd5b5051919050565b90565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b602080825282518282018190526000919060409081850190868401855b8281101561081d5781518051600481106107d757fe5b8552808701516001600160a01b03908116888701528682015187870152606080830151821690870152608091820151169085015260a090930192908501906001016107c1565b5091979650505050505050565b6001600160a01b0391909116815260200190565b6040518181016001600160401b038111828210171561085957fe5b604052919050565b60006001600160401b0382111561087457fe5b5060209081020190565b6001600160a01b03811681146103f557600080fdfea2646970667358221220f1d58a13662b8dd123c0862b8b096fba4841d4dc5208eb1a898b3fda3d1f2e3564736f6c63430007060033";

type RelayerAssetHelpersMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RelayerAssetHelpersMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RelayerAssetHelpersMock__factory extends ContractFactory {
  constructor(...args: RelayerAssetHelpersMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RelayerAssetHelpersMock> {
    return super.deploy(
      vault,
      overrides || {}
    ) as Promise<RelayerAssetHelpersMock>;
  }
  override getDeployTransaction(
    vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(vault, overrides || {});
  }
  override attach(address: string): RelayerAssetHelpersMock {
    return super.attach(address) as RelayerAssetHelpersMock;
  }
  override connect(signer: Signer): RelayerAssetHelpersMock__factory {
    return super.connect(signer) as RelayerAssetHelpersMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RelayerAssetHelpersMockInterface {
    return new utils.Interface(_abi) as RelayerAssetHelpersMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RelayerAssetHelpersMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as RelayerAssetHelpersMock;
  }
}
