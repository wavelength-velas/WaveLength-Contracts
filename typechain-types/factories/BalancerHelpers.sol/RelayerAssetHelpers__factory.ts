/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  RelayerAssetHelpers,
  RelayerAssetHelpersInterface,
} from "../../BalancerHelpers.sol/RelayerAssetHelpers";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IVault",
        name: "vault",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getVault",
    outputs: [
      {
        internalType: "contract IVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516101f53803806101f583398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c610163610092600039806035528060a452506101636000f3fe6080604052600436106100225760003560e01c80638d928af81461006557610060565b366100605761005e336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610206610090565b005b600080fd5b34801561007157600080fd5b5061007a6100a2565b6040516100879190610119565b60405180910390f35b8161009e5761009e816100c6565b5050565b7f000000000000000000000000000000000000000000000000000000000000000090565b62461bcd60e51b6000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b6001600160a01b039190911681526020019056fea264697066735822122054b624e0db6b7cf3eb7dff24fc2dab46648836a91443fc0faa70d904b9a4013964736f6c63430007060033";

type RelayerAssetHelpersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RelayerAssetHelpersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RelayerAssetHelpers__factory extends ContractFactory {
  constructor(...args: RelayerAssetHelpersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RelayerAssetHelpers> {
    return super.deploy(vault, overrides || {}) as Promise<RelayerAssetHelpers>;
  }
  override getDeployTransaction(
    vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(vault, overrides || {});
  }
  override attach(address: string): RelayerAssetHelpers {
    return super.attach(address) as RelayerAssetHelpers;
  }
  override connect(signer: Signer): RelayerAssetHelpers__factory {
    return super.connect(signer) as RelayerAssetHelpers__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RelayerAssetHelpersInterface {
    return new utils.Interface(_abi) as RelayerAssetHelpersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RelayerAssetHelpers {
    return new Contract(address, _abi, signerOrProvider) as RelayerAssetHelpers;
  }
}
