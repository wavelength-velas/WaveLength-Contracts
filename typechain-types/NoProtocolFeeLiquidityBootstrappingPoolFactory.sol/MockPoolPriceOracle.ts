/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace MockSamples {
  export type SampleStruct = {
    logPairPrice: PromiseOrValue<BigNumberish>;
    accLogPairPrice: PromiseOrValue<BigNumberish>;
    logBptPrice: PromiseOrValue<BigNumberish>;
    accLogBptPrice: PromiseOrValue<BigNumberish>;
    logInvariant: PromiseOrValue<BigNumberish>;
    accLogInvariant: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type SampleStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    logPairPrice: BigNumber;
    accLogPairPrice: BigNumber;
    logBptPrice: BigNumber;
    accLogBptPrice: BigNumber;
    logInvariant: BigNumber;
    accLogInvariant: BigNumber;
    timestamp: BigNumber;
  };
}

export declare namespace MockPoolPriceOracle {
  export type BinarySearchResultStruct = {
    prev: PromiseOrValue<BigNumberish>;
    next: PromiseOrValue<BigNumberish>;
  };

  export type BinarySearchResultStructOutput = [BigNumber, BigNumber] & {
    prev: BigNumber;
    next: BigNumber;
  };
}

export interface MockPoolPriceOracleInterface extends utils.Interface {
  functions: {
    "decode(bytes32)": FunctionFragment;
    "encode((int256,int256,int256,int256,int256,int256,uint256))": FunctionFragment;
    "findNearestSamplesTimestamp(uint256[],uint256)": FunctionFragment;
    "getPastAccumulator(uint8,uint256,uint256)": FunctionFragment;
    "getSample(uint256)": FunctionFragment;
    "getTotalSamples()": FunctionFragment;
    "mockSample(uint256,(int256,int256,int256,int256,int256,int256,uint256))": FunctionFragment;
    "mockSamples(uint256[],(int256,int256,int256,int256,int256,int256,uint256)[])": FunctionFragment;
    "processPriceData(uint256,uint256,int256,int256,int256)": FunctionFragment;
    "update(bytes32,int256,int256,int256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "decode"
      | "encode"
      | "findNearestSamplesTimestamp"
      | "getPastAccumulator"
      | "getSample"
      | "getTotalSamples"
      | "mockSample"
      | "mockSamples"
      | "processPriceData"
      | "update"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "decode",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "encode",
    values: [MockSamples.SampleStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "findNearestSamplesTimestamp",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastAccumulator",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSample",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSamples",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockSample",
    values: [PromiseOrValue<BigNumberish>, MockSamples.SampleStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mockSamples",
    values: [PromiseOrValue<BigNumberish>[], MockSamples.SampleStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "processPriceData",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "decode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "encode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findNearestSamplesTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastAccumulator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSample", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSamples",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mockSample", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mockSamples",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processPriceData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {
    "PriceDataProcessed(bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PriceDataProcessed"): EventFragment;
}

export interface PriceDataProcessedEventObject {
  newSample: boolean;
  sampleIndex: BigNumber;
}
export type PriceDataProcessedEvent = TypedEvent<
  [boolean, BigNumber],
  PriceDataProcessedEventObject
>;

export type PriceDataProcessedEventFilter =
  TypedEventFilter<PriceDataProcessedEvent>;

export interface MockPoolPriceOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockPoolPriceOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decode(
      sample: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[MockSamples.SampleStructOutput]>;

    encode(
      sample: MockSamples.SampleStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    findNearestSamplesTimestamp(
      dates: PromiseOrValue<BigNumberish>[],
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [MockPoolPriceOracle.BinarySearchResultStructOutput[]] & {
        results: MockPoolPriceOracle.BinarySearchResultStructOutput[];
      }
    >;

    getPastAccumulator(
      variable: PromiseOrValue<BigNumberish>,
      currentIndex: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSample(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        logPairPrice: BigNumber;
        accLogPairPrice: BigNumber;
        logBptPrice: BigNumber;
        accLogBptPrice: BigNumber;
        logInvariant: BigNumber;
        accLogInvariant: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getTotalSamples(overrides?: CallOverrides): Promise<[BigNumber]>;

    mockSample(
      index: PromiseOrValue<BigNumberish>,
      sample: MockSamples.SampleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mockSamples(
      indexes: PromiseOrValue<BigNumberish>[],
      samples: MockSamples.SampleStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processPriceData(
      elapsed: PromiseOrValue<BigNumberish>,
      currentIndex: PromiseOrValue<BigNumberish>,
      logPairPrice: PromiseOrValue<BigNumberish>,
      logBptPrice: PromiseOrValue<BigNumberish>,
      logInvariant: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    update(
      sample: PromiseOrValue<BytesLike>,
      logPairPrice: PromiseOrValue<BigNumberish>,
      logBptPrice: PromiseOrValue<BigNumberish>,
      logInvariant: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MockSamples.SampleStructOutput]>;
  };

  decode(
    sample: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<MockSamples.SampleStructOutput>;

  encode(
    sample: MockSamples.SampleStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  findNearestSamplesTimestamp(
    dates: PromiseOrValue<BigNumberish>[],
    offset: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MockPoolPriceOracle.BinarySearchResultStructOutput[]>;

  getPastAccumulator(
    variable: PromiseOrValue<BigNumberish>,
    currentIndex: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSample(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      logPairPrice: BigNumber;
      accLogPairPrice: BigNumber;
      logBptPrice: BigNumber;
      accLogBptPrice: BigNumber;
      logInvariant: BigNumber;
      accLogInvariant: BigNumber;
      timestamp: BigNumber;
    }
  >;

  getTotalSamples(overrides?: CallOverrides): Promise<BigNumber>;

  mockSample(
    index: PromiseOrValue<BigNumberish>,
    sample: MockSamples.SampleStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mockSamples(
    indexes: PromiseOrValue<BigNumberish>[],
    samples: MockSamples.SampleStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processPriceData(
    elapsed: PromiseOrValue<BigNumberish>,
    currentIndex: PromiseOrValue<BigNumberish>,
    logPairPrice: PromiseOrValue<BigNumberish>,
    logBptPrice: PromiseOrValue<BigNumberish>,
    logInvariant: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  update(
    sample: PromiseOrValue<BytesLike>,
    logPairPrice: PromiseOrValue<BigNumberish>,
    logBptPrice: PromiseOrValue<BigNumberish>,
    logInvariant: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MockSamples.SampleStructOutput>;

  callStatic: {
    decode(
      sample: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<MockSamples.SampleStructOutput>;

    encode(
      sample: MockSamples.SampleStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    findNearestSamplesTimestamp(
      dates: PromiseOrValue<BigNumberish>[],
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MockPoolPriceOracle.BinarySearchResultStructOutput[]>;

    getPastAccumulator(
      variable: PromiseOrValue<BigNumberish>,
      currentIndex: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSample(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        logPairPrice: BigNumber;
        accLogPairPrice: BigNumber;
        logBptPrice: BigNumber;
        accLogBptPrice: BigNumber;
        logInvariant: BigNumber;
        accLogInvariant: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getTotalSamples(overrides?: CallOverrides): Promise<BigNumber>;

    mockSample(
      index: PromiseOrValue<BigNumberish>,
      sample: MockSamples.SampleStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    mockSamples(
      indexes: PromiseOrValue<BigNumberish>[],
      samples: MockSamples.SampleStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    processPriceData(
      elapsed: PromiseOrValue<BigNumberish>,
      currentIndex: PromiseOrValue<BigNumberish>,
      logPairPrice: PromiseOrValue<BigNumberish>,
      logBptPrice: PromiseOrValue<BigNumberish>,
      logInvariant: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    update(
      sample: PromiseOrValue<BytesLike>,
      logPairPrice: PromiseOrValue<BigNumberish>,
      logBptPrice: PromiseOrValue<BigNumberish>,
      logInvariant: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MockSamples.SampleStructOutput>;
  };

  filters: {
    "PriceDataProcessed(bool,uint256)"(
      newSample?: null,
      sampleIndex?: null
    ): PriceDataProcessedEventFilter;
    PriceDataProcessed(
      newSample?: null,
      sampleIndex?: null
    ): PriceDataProcessedEventFilter;
  };

  estimateGas: {
    decode(
      sample: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encode(
      sample: MockSamples.SampleStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findNearestSamplesTimestamp(
      dates: PromiseOrValue<BigNumberish>[],
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastAccumulator(
      variable: PromiseOrValue<BigNumberish>,
      currentIndex: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSample(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalSamples(overrides?: CallOverrides): Promise<BigNumber>;

    mockSample(
      index: PromiseOrValue<BigNumberish>,
      sample: MockSamples.SampleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mockSamples(
      indexes: PromiseOrValue<BigNumberish>[],
      samples: MockSamples.SampleStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processPriceData(
      elapsed: PromiseOrValue<BigNumberish>,
      currentIndex: PromiseOrValue<BigNumberish>,
      logPairPrice: PromiseOrValue<BigNumberish>,
      logBptPrice: PromiseOrValue<BigNumberish>,
      logInvariant: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    update(
      sample: PromiseOrValue<BytesLike>,
      logPairPrice: PromiseOrValue<BigNumberish>,
      logBptPrice: PromiseOrValue<BigNumberish>,
      logInvariant: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decode(
      sample: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encode(
      sample: MockSamples.SampleStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findNearestSamplesTimestamp(
      dates: PromiseOrValue<BigNumberish>[],
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPastAccumulator(
      variable: PromiseOrValue<BigNumberish>,
      currentIndex: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSample(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalSamples(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mockSample(
      index: PromiseOrValue<BigNumberish>,
      sample: MockSamples.SampleStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mockSamples(
      indexes: PromiseOrValue<BigNumberish>[],
      samples: MockSamples.SampleStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processPriceData(
      elapsed: PromiseOrValue<BigNumberish>,
      currentIndex: PromiseOrValue<BigNumberish>,
      logPairPrice: PromiseOrValue<BigNumberish>,
      logBptPrice: PromiseOrValue<BigNumberish>,
      logInvariant: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    update(
      sample: PromiseOrValue<BytesLike>,
      logPairPrice: PromiseOrValue<BigNumberish>,
      logBptPrice: PromiseOrValue<BigNumberish>,
      logInvariant: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
