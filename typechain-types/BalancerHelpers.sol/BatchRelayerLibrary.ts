/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IVault {
  export type BatchSwapStepStruct = {
    poolId: PromiseOrValue<BytesLike>;
    assetInIndex: PromiseOrValue<BigNumberish>;
    assetOutIndex: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    userData: PromiseOrValue<BytesLike>;
  };

  export type BatchSwapStepStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    poolId: string;
    assetInIndex: BigNumber;
    assetOutIndex: BigNumber;
    amount: BigNumber;
    userData: string;
  };

  export type FundManagementStruct = {
    sender: PromiseOrValue<string>;
    fromInternalBalance: PromiseOrValue<boolean>;
    recipient: PromiseOrValue<string>;
    toInternalBalance: PromiseOrValue<boolean>;
  };

  export type FundManagementStructOutput = [
    string,
    boolean,
    string,
    boolean
  ] & {
    sender: string;
    fromInternalBalance: boolean;
    recipient: string;
    toInternalBalance: boolean;
  };

  export type ExitPoolRequestStruct = {
    assets: PromiseOrValue<string>[];
    minAmountsOut: PromiseOrValue<BigNumberish>[];
    userData: PromiseOrValue<BytesLike>;
    toInternalBalance: PromiseOrValue<boolean>;
  };

  export type ExitPoolRequestStructOutput = [
    string[],
    BigNumber[],
    string,
    boolean
  ] & {
    assets: string[];
    minAmountsOut: BigNumber[];
    userData: string;
    toInternalBalance: boolean;
  };

  export type JoinPoolRequestStruct = {
    assets: PromiseOrValue<string>[];
    maxAmountsIn: PromiseOrValue<BigNumberish>[];
    userData: PromiseOrValue<BytesLike>;
    fromInternalBalance: PromiseOrValue<boolean>;
  };

  export type JoinPoolRequestStructOutput = [
    string[],
    BigNumber[],
    string,
    boolean
  ] & {
    assets: string[];
    maxAmountsIn: BigNumber[];
    userData: string;
    fromInternalBalance: boolean;
  };

  export type UserBalanceOpStruct = {
    kind: PromiseOrValue<BigNumberish>;
    asset: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    sender: PromiseOrValue<string>;
    recipient: PromiseOrValue<string>;
  };

  export type UserBalanceOpStructOutput = [
    number,
    string,
    BigNumber,
    string,
    string
  ] & {
    kind: number;
    asset: string;
    amount: BigNumber;
    sender: string;
    recipient: string;
  };

  export type SingleSwapStruct = {
    poolId: PromiseOrValue<BytesLike>;
    kind: PromiseOrValue<BigNumberish>;
    assetIn: PromiseOrValue<string>;
    assetOut: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    userData: PromiseOrValue<BytesLike>;
  };

  export type SingleSwapStructOutput = [
    string,
    number,
    string,
    string,
    BigNumber,
    string
  ] & {
    poolId: string;
    kind: number;
    assetIn: string;
    assetOut: string;
    amount: BigNumber;
    userData: string;
  };
}

export declare namespace VaultActions {
  export type OutputReferenceStruct = {
    index: PromiseOrValue<BigNumberish>;
    key: PromiseOrValue<BigNumberish>;
  };

  export type OutputReferenceStructOutput = [BigNumber, BigNumber] & {
    index: BigNumber;
    key: BigNumber;
  };
}

export interface BatchRelayerLibraryInterface extends utils.Interface {
  functions: {
    "batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256,uint256,(uint256,uint256)[])": FunctionFragment;
    "exitPool(bytes32,uint8,address,address,(address[],uint256[],bytes,bool),(uint256,uint256)[])": FunctionFragment;
    "getEntrypoint()": FunctionFragment;
    "getVault()": FunctionFragment;
    "joinPool(bytes32,uint8,address,address,(address[],uint256[],bytes,bool),uint256,uint256)": FunctionFragment;
    "manageUserBalance((uint8,address,uint256,address,address)[],uint256)": FunctionFragment;
    "setRelayerApproval(address,bool,bytes)": FunctionFragment;
    "swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256,uint256,uint256)": FunctionFragment;
    "vaultPermit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "vaultPermitDAI(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "batchSwap"
      | "exitPool"
      | "getEntrypoint"
      | "getVault"
      | "joinPool"
      | "manageUserBalance"
      | "setRelayerApproval"
      | "swap"
      | "vaultPermit"
      | "vaultPermitDAI"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchSwap",
    values: [
      PromiseOrValue<BigNumberish>,
      IVault.BatchSwapStepStruct[],
      PromiseOrValue<string>[],
      IVault.FundManagementStruct,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      VaultActions.OutputReferenceStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exitPool",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      IVault.ExitPoolRequestStruct,
      VaultActions.OutputReferenceStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntrypoint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "joinPool",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      IVault.JoinPoolRequestStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "manageUserBalance",
    values: [IVault.UserBalanceOpStruct[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRelayerApproval",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      IVault.SingleSwapStruct,
      IVault.FundManagementStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultPermit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultPermitDAI",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "batchSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exitPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEntrypoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "manageUserBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRelayerApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultPermitDAI",
    data: BytesLike
  ): Result;

  events: {};
}

export interface BatchRelayerLibrary extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BatchRelayerLibraryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchSwap(
      kind: PromiseOrValue<BigNumberish>,
      swaps: IVault.BatchSwapStepStruct[],
      assets: PromiseOrValue<string>[],
      funds: IVault.FundManagementStruct,
      limits: PromiseOrValue<BigNumberish>[],
      deadline: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      outputReferences: VaultActions.OutputReferenceStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exitPool(
      poolId: PromiseOrValue<BytesLike>,
      kind: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      request: IVault.ExitPoolRequestStruct,
      outputReferences: VaultActions.OutputReferenceStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getEntrypoint(overrides?: CallOverrides): Promise<[string]>;

    getVault(overrides?: CallOverrides): Promise<[string]>;

    joinPool(
      poolId: PromiseOrValue<BytesLike>,
      kind: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      request: IVault.JoinPoolRequestStruct,
      value: PromiseOrValue<BigNumberish>,
      outputReference: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    manageUserBalance(
      ops: IVault.UserBalanceOpStruct[],
      value: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRelayerApproval(
      relayer: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      authorisation: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swap(
      singleSwap: IVault.SingleSwapStruct,
      funds: IVault.FundManagementStruct,
      limit: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      outputReference: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vaultPermit(
      token: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vaultPermitDAI(
      token: PromiseOrValue<string>,
      holder: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<boolean>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  batchSwap(
    kind: PromiseOrValue<BigNumberish>,
    swaps: IVault.BatchSwapStepStruct[],
    assets: PromiseOrValue<string>[],
    funds: IVault.FundManagementStruct,
    limits: PromiseOrValue<BigNumberish>[],
    deadline: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    outputReferences: VaultActions.OutputReferenceStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exitPool(
    poolId: PromiseOrValue<BytesLike>,
    kind: PromiseOrValue<BigNumberish>,
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    request: IVault.ExitPoolRequestStruct,
    outputReferences: VaultActions.OutputReferenceStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getEntrypoint(overrides?: CallOverrides): Promise<string>;

  getVault(overrides?: CallOverrides): Promise<string>;

  joinPool(
    poolId: PromiseOrValue<BytesLike>,
    kind: PromiseOrValue<BigNumberish>,
    sender: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    request: IVault.JoinPoolRequestStruct,
    value: PromiseOrValue<BigNumberish>,
    outputReference: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  manageUserBalance(
    ops: IVault.UserBalanceOpStruct[],
    value: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRelayerApproval(
    relayer: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    authorisation: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swap(
    singleSwap: IVault.SingleSwapStruct,
    funds: IVault.FundManagementStruct,
    limit: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    outputReference: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vaultPermit(
    token: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vaultPermitDAI(
    token: PromiseOrValue<string>,
    holder: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    allowed: PromiseOrValue<boolean>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    batchSwap(
      kind: PromiseOrValue<BigNumberish>,
      swaps: IVault.BatchSwapStepStruct[],
      assets: PromiseOrValue<string>[],
      funds: IVault.FundManagementStruct,
      limits: PromiseOrValue<BigNumberish>[],
      deadline: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      outputReferences: VaultActions.OutputReferenceStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    exitPool(
      poolId: PromiseOrValue<BytesLike>,
      kind: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      request: IVault.ExitPoolRequestStruct,
      outputReferences: VaultActions.OutputReferenceStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    getEntrypoint(overrides?: CallOverrides): Promise<string>;

    getVault(overrides?: CallOverrides): Promise<string>;

    joinPool(
      poolId: PromiseOrValue<BytesLike>,
      kind: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      request: IVault.JoinPoolRequestStruct,
      value: PromiseOrValue<BigNumberish>,
      outputReference: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    manageUserBalance(
      ops: IVault.UserBalanceOpStruct[],
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRelayerApproval(
      relayer: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      authorisation: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      singleSwap: IVault.SingleSwapStruct,
      funds: IVault.FundManagementStruct,
      limit: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      outputReference: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultPermit(
      token: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultPermitDAI(
      token: PromiseOrValue<string>,
      holder: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<boolean>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    batchSwap(
      kind: PromiseOrValue<BigNumberish>,
      swaps: IVault.BatchSwapStepStruct[],
      assets: PromiseOrValue<string>[],
      funds: IVault.FundManagementStruct,
      limits: PromiseOrValue<BigNumberish>[],
      deadline: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      outputReferences: VaultActions.OutputReferenceStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exitPool(
      poolId: PromiseOrValue<BytesLike>,
      kind: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      request: IVault.ExitPoolRequestStruct,
      outputReferences: VaultActions.OutputReferenceStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getEntrypoint(overrides?: CallOverrides): Promise<BigNumber>;

    getVault(overrides?: CallOverrides): Promise<BigNumber>;

    joinPool(
      poolId: PromiseOrValue<BytesLike>,
      kind: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      request: IVault.JoinPoolRequestStruct,
      value: PromiseOrValue<BigNumberish>,
      outputReference: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    manageUserBalance(
      ops: IVault.UserBalanceOpStruct[],
      value: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRelayerApproval(
      relayer: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      authorisation: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swap(
      singleSwap: IVault.SingleSwapStruct,
      funds: IVault.FundManagementStruct,
      limit: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      outputReference: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vaultPermit(
      token: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vaultPermitDAI(
      token: PromiseOrValue<string>,
      holder: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<boolean>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchSwap(
      kind: PromiseOrValue<BigNumberish>,
      swaps: IVault.BatchSwapStepStruct[],
      assets: PromiseOrValue<string>[],
      funds: IVault.FundManagementStruct,
      limits: PromiseOrValue<BigNumberish>[],
      deadline: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      outputReferences: VaultActions.OutputReferenceStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exitPool(
      poolId: PromiseOrValue<BytesLike>,
      kind: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      request: IVault.ExitPoolRequestStruct,
      outputReferences: VaultActions.OutputReferenceStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getEntrypoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    joinPool(
      poolId: PromiseOrValue<BytesLike>,
      kind: PromiseOrValue<BigNumberish>,
      sender: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      request: IVault.JoinPoolRequestStruct,
      value: PromiseOrValue<BigNumberish>,
      outputReference: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    manageUserBalance(
      ops: IVault.UserBalanceOpStruct[],
      value: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRelayerApproval(
      relayer: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      authorisation: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      singleSwap: IVault.SingleSwapStruct,
      funds: IVault.FundManagementStruct,
      limit: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      outputReference: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vaultPermit(
      token: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vaultPermitDAI(
      token: PromiseOrValue<string>,
      holder: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      allowed: PromiseOrValue<boolean>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
