/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace FBeetsLocker {
  export type EarnedDataStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type EarnedDataStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };

  export type LockedBalanceStruct = {
    locked: PromiseOrValue<BigNumberish>;
    unlockTime: PromiseOrValue<BigNumberish>;
  };

  export type LockedBalanceStructOutput = [BigNumber, BigNumber] & {
    locked: BigNumber;
    unlockTime: BigNumber;
  };
}

export interface FBeetsLockerInterface extends utils.Interface {
  functions: {
    "addReward(address,address)": FunctionFragment;
    "approveRewardDistributor(address,address,bool)": FunctionFragment;
    "balanceAtEpochOf(uint256,address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "checkpointEpoch()": FunctionFragment;
    "claimableRewards(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "denominator()": FunctionFragment;
    "epochCount()": FunctionFragment;
    "epochDuration()": FunctionFragment;
    "epochs(uint256)": FunctionFragment;
    "findEpochId(uint256)": FunctionFragment;
    "getReward(address)": FunctionFragment;
    "isShutdown()": FunctionFragment;
    "kickExpiredLocks(address)": FunctionFragment;
    "kickRewardEpochDelay()": FunctionFragment;
    "kickRewardPerEpoch()": FunctionFragment;
    "lastTimeRewardApplicable(address)": FunctionFragment;
    "lock(address,uint256)": FunctionFragment;
    "lockDuration()": FunctionFragment;
    "lockedBalanceOf(address)": FunctionFragment;
    "lockedBalances(address)": FunctionFragment;
    "lockingToken()": FunctionFragment;
    "name()": FunctionFragment;
    "notifyRewardAmount(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingLockOf(address)": FunctionFragment;
    "processExpiredLocks(bool)": FunctionFragment;
    "recoverERC20(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardData(address)": FunctionFragment;
    "rewardDistributors(address,address)": FunctionFragment;
    "rewardPerToken(address)": FunctionFragment;
    "rewardTokens(uint256)": FunctionFragment;
    "rewards(address,address)": FunctionFragment;
    "setKickIncentive(uint256,uint256)": FunctionFragment;
    "shutdown()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalLockedSupply()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyAtEpoch(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userLocks(address,uint256)": FunctionFragment;
    "userRewardPerTokenPaid(address,address)": FunctionFragment;
    "withdrawExpiredLocksTo(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addReward"
      | "approveRewardDistributor"
      | "balanceAtEpochOf"
      | "balanceOf"
      | "balances"
      | "checkpointEpoch"
      | "claimableRewards"
      | "decimals"
      | "denominator"
      | "epochCount"
      | "epochDuration"
      | "epochs"
      | "findEpochId"
      | "getReward"
      | "isShutdown"
      | "kickExpiredLocks"
      | "kickRewardEpochDelay"
      | "kickRewardPerEpoch"
      | "lastTimeRewardApplicable"
      | "lock"
      | "lockDuration"
      | "lockedBalanceOf"
      | "lockedBalances"
      | "lockingToken"
      | "name"
      | "notifyRewardAmount"
      | "owner"
      | "pendingLockOf"
      | "processExpiredLocks"
      | "recoverERC20"
      | "renounceOwnership"
      | "rewardData"
      | "rewardDistributors"
      | "rewardPerToken"
      | "rewardTokens"
      | "rewards"
      | "setKickIncentive"
      | "shutdown"
      | "symbol"
      | "totalLockedSupply"
      | "totalSupply"
      | "totalSupplyAtEpoch"
      | "transferOwnership"
      | "userLocks"
      | "userRewardPerTokenPaid"
      | "withdrawExpiredLocksTo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addReward",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveRewardDistributor",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceAtEpochOf",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpointEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimableRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "denominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "findEpochId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kickExpiredLocks",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "kickRewardEpochDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kickRewardPerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedBalanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedBalances",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingLockOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "processExpiredLocks",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDistributors",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKickIncentive",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "shutdown", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalLockedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAtEpoch",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userLocks",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardPerTokenPaid",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawExpiredLocksTo",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceAtEpochOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkpointEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "denominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isShutdown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kickExpiredLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kickRewardEpochDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kickRewardPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingLockOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processExpiredLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardDistributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setKickIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shutdown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalLockedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAtEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userLocks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userRewardPerTokenPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawExpiredLocksTo",
    data: BytesLike
  ): Result;

  events: {
    "KickReward(address,address,uint256)": EventFragment;
    "Locked(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Recovered(address,uint256)": EventFragment;
    "RewardAdded(address,uint256,uint256,uint256)": EventFragment;
    "RewardPaid(address,address,uint256)": EventFragment;
    "SetKickIncentive(uint256,uint256)": EventFragment;
    "Withdrawn(address,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "KickReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Locked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Recovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetKickIncentive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface KickRewardEventObject {
  _user: string;
  _kicked: string;
  _reward: BigNumber;
}
export type KickRewardEvent = TypedEvent<
  [string, string, BigNumber],
  KickRewardEventObject
>;

export type KickRewardEventFilter = TypedEventFilter<KickRewardEvent>;

export interface LockedEventObject {
  _user: string;
  _lockedAmount: BigNumber;
  _epoch: BigNumber;
}
export type LockedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LockedEventObject
>;

export type LockedEventFilter = TypedEventFilter<LockedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RecoveredEventObject {
  _token: string;
  _amount: BigNumber;
}
export type RecoveredEvent = TypedEvent<
  [string, BigNumber],
  RecoveredEventObject
>;

export type RecoveredEventFilter = TypedEventFilter<RecoveredEvent>;

export interface RewardAddedEventObject {
  _token: string;
  _reward: BigNumber;
  _rewardRate: BigNumber;
  _periodFinish: BigNumber;
}
export type RewardAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  RewardAddedEventObject
>;

export type RewardAddedEventFilter = TypedEventFilter<RewardAddedEvent>;

export interface RewardPaidEventObject {
  _user: string;
  _rewardsToken: string;
  _reward: BigNumber;
}
export type RewardPaidEvent = TypedEvent<
  [string, string, BigNumber],
  RewardPaidEventObject
>;

export type RewardPaidEventFilter = TypedEventFilter<RewardPaidEvent>;

export interface SetKickIncentiveEventObject {
  _kickRewardEpochDelay: BigNumber;
  _kickRewardPerEpoch: BigNumber;
}
export type SetKickIncentiveEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetKickIncentiveEventObject
>;

export type SetKickIncentiveEventFilter =
  TypedEventFilter<SetKickIncentiveEvent>;

export interface WithdrawnEventObject {
  _user: string;
  _amount: BigNumber;
  _relocked: boolean;
}
export type WithdrawnEvent = TypedEvent<
  [string, BigNumber, boolean],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface FBeetsLocker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FBeetsLockerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addReward(
      _rewardToken: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveRewardDistributor(
      _rewardToken: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceAtEpochOf(
      _epoch: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    balanceOf(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    balances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        lockedAmount: BigNumber;
        nextUnlockIndex: BigNumber;
      }
    >;

    checkpointEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimableRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [FBeetsLocker.EarnedDataStructOutput[]] & {
        userRewards: FBeetsLocker.EarnedDataStructOutput[];
      }
    >;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    denominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { supply: BigNumber; startTime: BigNumber }
    >;

    findEpochId(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { epoch: BigNumber }>;

    getReward(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isShutdown(overrides?: CallOverrides): Promise<[boolean]>;

    kickExpiredLocks(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    kickRewardEpochDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    kickRewardPerEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastTimeRewardApplicable(
      _rewardsToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lock(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lockDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedBalanceOf(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    lockedBalances(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        FBeetsLocker.LockedBalanceStructOutput[]
      ] & {
        total: BigNumber;
        unlockable: BigNumber;
        locked: BigNumber;
        lockData: FBeetsLocker.LockedBalanceStructOutput[];
      }
    >;

    lockingToken(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    notifyRewardAmount(
      _rewardToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingLockOf(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    processExpiredLocks(
      _relock: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recoverERC20(
      _tokenAddress: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        periodFinish: BigNumber;
        rewardRate: BigNumber;
        lastUpdateTime: BigNumber;
        rewardPerTokenStored: BigNumber;
      }
    >;

    rewardDistributors(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rewardPerToken(
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setKickIncentive(
      _kickRewardPerEpoch: PromiseOrValue<BigNumberish>,
      _kickRewardEpochDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shutdown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalLockedSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { supply: BigNumber }>;

    totalSupplyAtEpoch(
      _epochIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { supply: BigNumber }>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userLocks(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { locked: BigNumber; unlockTime: BigNumber }
    >;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawExpiredLocksTo(
      _withdrawTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addReward(
    _rewardToken: PromiseOrValue<string>,
    _distributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveRewardDistributor(
    _rewardToken: PromiseOrValue<string>,
    _distributor: PromiseOrValue<string>,
    _approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceAtEpochOf(
    _epoch: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balances(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      lockedAmount: BigNumber;
      nextUnlockIndex: BigNumber;
    }
  >;

  checkpointEpoch(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimableRewards(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<FBeetsLocker.EarnedDataStructOutput[]>;

  decimals(overrides?: CallOverrides): Promise<number>;

  denominator(overrides?: CallOverrides): Promise<BigNumber>;

  epochCount(overrides?: CallOverrides): Promise<BigNumber>;

  epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

  epochs(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { supply: BigNumber; startTime: BigNumber }
  >;

  findEpochId(
    _time: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReward(
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isShutdown(overrides?: CallOverrides): Promise<boolean>;

  kickExpiredLocks(
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  kickRewardEpochDelay(overrides?: CallOverrides): Promise<BigNumber>;

  kickRewardPerEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  lastTimeRewardApplicable(
    _rewardsToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lock(
    _user: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  lockedBalanceOf(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockedBalances(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      FBeetsLocker.LockedBalanceStructOutput[]
    ] & {
      total: BigNumber;
      unlockable: BigNumber;
      locked: BigNumber;
      lockData: FBeetsLocker.LockedBalanceStructOutput[];
    }
  >;

  lockingToken(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  notifyRewardAmount(
    _rewardToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingLockOf(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  processExpiredLocks(
    _relock: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recoverERC20(
    _tokenAddress: PromiseOrValue<string>,
    _tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardData(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      periodFinish: BigNumber;
      rewardRate: BigNumber;
      lastUpdateTime: BigNumber;
      rewardPerTokenStored: BigNumber;
    }
  >;

  rewardDistributors(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rewardPerToken(
    _rewardToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardTokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  rewards(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setKickIncentive(
    _kickRewardPerEpoch: PromiseOrValue<BigNumberish>,
    _kickRewardEpochDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shutdown(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalLockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyAtEpoch(
    _epochIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userLocks(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { locked: BigNumber; unlockTime: BigNumber }
  >;

  userRewardPerTokenPaid(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawExpiredLocksTo(
    _withdrawTo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addReward(
      _rewardToken: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    approveRewardDistributor(
      _rewardToken: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceAtEpochOf(
      _epoch: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        lockedAmount: BigNumber;
        nextUnlockIndex: BigNumber;
      }
    >;

    checkpointEpoch(overrides?: CallOverrides): Promise<void>;

    claimableRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<FBeetsLocker.EarnedDataStructOutput[]>;

    decimals(overrides?: CallOverrides): Promise<number>;

    denominator(overrides?: CallOverrides): Promise<BigNumber>;

    epochCount(overrides?: CallOverrides): Promise<BigNumber>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    epochs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { supply: BigNumber; startTime: BigNumber }
    >;

    findEpochId(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReward(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isShutdown(overrides?: CallOverrides): Promise<boolean>;

    kickExpiredLocks(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    kickRewardEpochDelay(overrides?: CallOverrides): Promise<BigNumber>;

    kickRewardPerEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    lastTimeRewardApplicable(
      _rewardsToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    lockedBalanceOf(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedBalances(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        FBeetsLocker.LockedBalanceStructOutput[]
      ] & {
        total: BigNumber;
        unlockable: BigNumber;
        locked: BigNumber;
        lockData: FBeetsLocker.LockedBalanceStructOutput[];
      }
    >;

    lockingToken(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    notifyRewardAmount(
      _rewardToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingLockOf(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processExpiredLocks(
      _relock: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverERC20(
      _tokenAddress: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        periodFinish: BigNumber;
        rewardRate: BigNumber;
        lastUpdateTime: BigNumber;
        rewardPerTokenStored: BigNumber;
      }
    >;

    rewardDistributors(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rewardPerToken(
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    rewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setKickIncentive(
      _kickRewardPerEpoch: PromiseOrValue<BigNumberish>,
      _kickRewardEpochDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    shutdown(overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalLockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAtEpoch(
      _epochIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userLocks(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { locked: BigNumber; unlockTime: BigNumber }
    >;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawExpiredLocksTo(
      _withdrawTo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "KickReward(address,address,uint256)"(
      _user?: PromiseOrValue<string> | null,
      _kicked?: PromiseOrValue<string> | null,
      _reward?: null
    ): KickRewardEventFilter;
    KickReward(
      _user?: PromiseOrValue<string> | null,
      _kicked?: PromiseOrValue<string> | null,
      _reward?: null
    ): KickRewardEventFilter;

    "Locked(address,uint256,uint256)"(
      _user?: PromiseOrValue<string> | null,
      _lockedAmount?: null,
      _epoch?: null
    ): LockedEventFilter;
    Locked(
      _user?: PromiseOrValue<string> | null,
      _lockedAmount?: null,
      _epoch?: null
    ): LockedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Recovered(address,uint256)"(
      _token?: null,
      _amount?: null
    ): RecoveredEventFilter;
    Recovered(_token?: null, _amount?: null): RecoveredEventFilter;

    "RewardAdded(address,uint256,uint256,uint256)"(
      _token?: PromiseOrValue<string> | null,
      _reward?: null,
      _rewardRate?: null,
      _periodFinish?: null
    ): RewardAddedEventFilter;
    RewardAdded(
      _token?: PromiseOrValue<string> | null,
      _reward?: null,
      _rewardRate?: null,
      _periodFinish?: null
    ): RewardAddedEventFilter;

    "RewardPaid(address,address,uint256)"(
      _user?: PromiseOrValue<string> | null,
      _rewardsToken?: PromiseOrValue<string> | null,
      _reward?: null
    ): RewardPaidEventFilter;
    RewardPaid(
      _user?: PromiseOrValue<string> | null,
      _rewardsToken?: PromiseOrValue<string> | null,
      _reward?: null
    ): RewardPaidEventFilter;

    "SetKickIncentive(uint256,uint256)"(
      _kickRewardEpochDelay?: null,
      _kickRewardPerEpoch?: null
    ): SetKickIncentiveEventFilter;
    SetKickIncentive(
      _kickRewardEpochDelay?: null,
      _kickRewardPerEpoch?: null
    ): SetKickIncentiveEventFilter;

    "Withdrawn(address,uint256,bool)"(
      _user?: PromiseOrValue<string> | null,
      _amount?: null,
      _relocked?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      _user?: PromiseOrValue<string> | null,
      _amount?: null,
      _relocked?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    addReward(
      _rewardToken: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveRewardDistributor(
      _rewardToken: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceAtEpochOf(
      _epoch: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkpointEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimableRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    denominator(overrides?: CallOverrides): Promise<BigNumber>;

    epochCount(overrides?: CallOverrides): Promise<BigNumber>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    epochs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findEpochId(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReward(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isShutdown(overrides?: CallOverrides): Promise<BigNumber>;

    kickExpiredLocks(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    kickRewardEpochDelay(overrides?: CallOverrides): Promise<BigNumber>;

    kickRewardPerEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    lastTimeRewardApplicable(
      _rewardsToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    lockedBalanceOf(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedBalances(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockingToken(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      _rewardToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingLockOf(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processExpiredLocks(
      _relock: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recoverERC20(
      _tokenAddress: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardDistributors(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPerToken(
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setKickIncentive(
      _kickRewardPerEpoch: PromiseOrValue<BigNumberish>,
      _kickRewardEpochDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shutdown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAtEpoch(
      _epochIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userLocks(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawExpiredLocksTo(
      _withdrawTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addReward(
      _rewardToken: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveRewardDistributor(
      _rewardToken: PromiseOrValue<string>,
      _distributor: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceAtEpochOf(
      _epoch: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkpointEpoch(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimableRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    denominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findEpochId(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isShutdown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kickExpiredLocks(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    kickRewardEpochDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kickRewardPerEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(
      _rewardsToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lockDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedBalanceOf(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedBalances(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      _rewardToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingLockOf(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processExpiredLocks(
      _relock: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recoverERC20(
      _tokenAddress: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardData(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardDistributors(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerToken(
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setKickIncentive(
      _kickRewardPerEpoch: PromiseOrValue<BigNumberish>,
      _kickRewardEpochDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shutdown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLockedSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyAtEpoch(
      _epochIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userLocks(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawExpiredLocksTo(
      _withdrawTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
